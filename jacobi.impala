type Mask = Mask3;
type MaskSep = Mask3Sep;

fn apply_stencil(x: int, y: int, acc: Acc, stencil: Mask,
                 bh_lower: fn(int, int, int, fn(f32)) -> int, bh_upper: fn(int, int, int, fn(f32)) -> int
                ) -> float {
    let mut sum = 0.0f;
    let half_range_y = stencil.size_y / 2;
    let half_range_x = stencil.size_x / 2;

    for j in range(-half_range_y, half_range_y+1) {
        for i in range(-half_range_x, half_range_x+1) {
            let stencil_val = stencil.data(j + half_range_y)(i + half_range_x);
            if stencil_val != 0.0f {
                sum += get_pixel(acc, x + i, y + j, bh_lower, bh_upper) * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        }
    }

    sum
}

fn main() -> int {
    let width  = 2048;
    let height = 2048;
    let a      = 0.2f;
    let b      = 1.0f - 4.0f * a;
    let arr    = Img { data : ~[width*height:float], width : width, height : height, stride : width };
    let out    = Img { data : ~[width*height:float], width : width, height : height, stride : width };
    init_rand(arr.data, arr.stride, out.height);
    init_zero(out.data, out.stride, out.height);

    let stencil = Mask {
        data : [[0.0f, b, 0.0f],
                [   b, a, b   ],
                [0.0f, b, 0.0f]],
        size_x : 3, size_y : 3
    };

    let lower = clamp_lower;
    let upper = clamp_upper;

    let iteration_fun = iteration;                  // SS
    //let iteration_fun = iteration_bounds;           // SS + BH
    //let iteration_fun = iteration_advanced;         // SS + SM

    for x, y, mut out_acc, arr_acc, stencil in @iteration_fun(out, arr, stencil) {
        out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = apply_stencil(x, y, arr_acc, stencil, lower, upper);
    }
    print_total_timing();

    fn reference() -> int {
        let mut passed = 0;
        let arr_acc = get_acc(arr, 10);
        for y in $range(0, out.height) {
            for x in $range(0, out.width) @{
                let ref = apply_stencil(x, y, arr_acc, stencil, lower, upper);
                let mut diff = ref - out.data(y*out.stride + x);
                if diff < 0.0f  { diff = -diff; }
                if diff > 0.01f { passed = 42; }
            }
        }
        passed
    }

    let result = @reference();

    release(arr.data as &i8);
    release(out.data as &i8);

    result
}
