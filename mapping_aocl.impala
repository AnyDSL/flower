fn release_device_copy(img: Img) -> () {
    release(img.buf)
}

fn get_ldg_fn() -> fn(&[1]f32) -> f32 { if is_nvvm() { nvvm_ldg_f32 } else { cuda_ldg_f32 } }
fn set_pixel_fn(img: Img) -> fn(i32, f32) -> () { |idx, val| bitcast[&mut[1][f32]](img.buf.data)(idx) = val }
fn get_pixel_fn(img: Img) -> fn(i32) -> f32 { |idx| bitcast[&[1][f32]](img.buf.data)(idx) }
fn get_pixel_ldg_fn(img: Img) -> fn(i32) -> f32 { if has_ldg() { |idx| get_ldg_fn()(&bitcast[&[1][f32]](img.buf.data)(idx)) } else { get_pixel_fn(img) } }
fn set_pixel_shared_fn(data: &mut[3][f32]) -> fn(i32, f32) -> () { |idx, val| data(idx) = val }
fn get_pixel_shared_fn(data: &[3][f32]) -> fn(i32) -> f32 { |idx| data(idx) }

struct Swin1D {
    write: fn (int, f32) -> (),
    read: fn (int) -> f32,
    begin: int,
    end: int
}

struct Swin2D {
    write: fn (int, int, f32) -> (),
    read: fn (int, int) -> f32,
    begin: (int, int),
    end: (int, int)
}

fn new_swin1D(begin: int, end: int) -> Swin1D {
    if end == begin {
        Swin1D {
            write: |_, _| (),
            read:  |_| undef[f32](),
            begin: begin,
            end:   end
        }
    } else if begin + 1 == end {
        let mut value : f32;
        Swin1D {
            write: |i, v| value = v,
            read:  |i| value,
            begin: begin,
            end:   end
        }
    } else {
        let m = (end + begin) / 2;
        let left  = new_swin1D(begin, m);
        let right = new_swin1D(m, end);
        Swin1D {
            write: |i, v| if i >= m { right.write(i, v) } else { left.write(i, v) },
            read:  |i|    if i >= m { right.read(i) } else { left.read(i) },
            begin: begin,
            end:   end
        }
    }
}

fn new_swin2D(begin: (int, int), end: (int, int)) -> Swin2D {
    let (begin_x, begin_y) = begin;
    let (end_x, end_y)     = end;
    if end_y == begin_y {
        Swin2D {
            write: |_, _, _| (),
            read: |_, _| undef[f32](),
            begin: begin,
            end:   end
        }
    } else if begin_y + 1 == end_y {
        let row = new_swin1D(begin_x, end_x);
        Swin2D {
            write: |x, y, v| row.write(x, v),
            read:  |x, y|    row.read(x),
            begin: begin,
            end:   end
        }
    } else {
        let m = (end_y + begin_y) / 2;
        let left  = new_swin2D((begin_x, begin_y), (end_x, m));
        let right = new_swin2D((begin_x, m),       (end_x, end_y));
        Swin2D {
            write: |x, y, v| if y >= m { right.write(x, y, v) } else { left.write(x, y, v) },
            read:  |x, y|    if y >= m { right.read(x, y) } else { left.read(x, y) },
            begin: begin,
            end:   end
        }
    }
}

fn shift_swin(lbuf : Acc, swin : Swin2D) -> () {
    let (begin_x, begin_y) = swin.begin;
    let (end_x, end_y) = swin.end;

    // Shift sliding window
    for j in @range(begin_y, end_y) {
        for i in @range(begin_x, end_x - 1) {
            @swin.write(i, j, @swin.read(i + 1, j));
        }
    }

    // Read new col
    for j in @range(begin_y, end_y - 1) {
        @swin.write(end_x - 1, j, lbuf.read(0, j));
    }
}

fn shift_swin_full(lbuf : Acc, swin : Swin2D) -> () {
    let (begin_x, begin_y) = swin.begin;
    let (end_x, end_y) = swin.end;

    // Shift sliding window
    for j in @range(begin_y, end_y) {
        for i in @range(begin_x, end_x - 1) {
            @swin.write(i, j, @swin.read(i + 1, j));
        }
    }

    // Read new col
    for j in @range(begin_y, end_y) {
        @swin.write(end_x - 1, j, lbuf.read(0, j));
    }
}

fn shift_swin_cols(swin : Swin2D) -> () {
    let (begin_x, begin_y) = swin.begin;
    let (end_x, end_y) = swin.end;

    // Shift sliding window
    for j in @range(begin_y, end_y) {
        for i in @range(begin_x, end_x - 1) {
            @swin.write(i, j, @swin.read(i + 1, j));
        }
    }
}

fn shift_swin_with_col(swin : Swin2D, col : Swin1D) -> () {
    let (begin_x, begin_y) = swin.begin;
    let (end_x, end_y) = swin.end;

    // Shift sliding window
    for j in @range(begin_y, end_y) {
        for i in @range(begin_x, end_x - 1) {
            @swin.write(i, j, @swin.read(i + 1, j));
        }
    }

    // Read new col
    for j in @range(begin_y, end_y) {
        @swin.write(end_x - 1, j, col.read(j));
    }
}

fn get_acc_sw(swin: Swin2D) -> Acc {
    Acc {
        read: |x, y|      swin.read(x, y),
        write: |x, y, v|  swin.write(x, y, v)
    }
}


// Line buffers
struct Lbuf2D {
    write: fn (int, int, f32) -> (),
    read: fn (int, int) -> f32,
    size_x: int,
    size_y: int
}

fn new_lbuf2D(size_x: int, size_y: int) -> Lbuf2D {
    if size_y == 0 {
        Lbuf2D {
            write: |_, _, _| (),
            read: |_, _| undef[f32](),
            size_x: size_x,
            size_y: size_y
        }
    } else {
        let lbuf = reserve_shared[f32](size_x);
        let sub_lbuf = new_lbuf2D(size_x, size_y - 1);
        Lbuf2D {
            write: |x, y, v| {
                if y == size_y - 1 {
                    lbuf(x) = v
                } else {
                    sub_lbuf.write(x, y, v)
                }
            },
            read: |x, y| {
                if y == size_y - 1 {
                    lbuf(x)
                } else {
                    sub_lbuf.read(x, y)
                }
            },
            size_x: size_x,
            size_y: size_y
        }
    }
}

fn shift_lbuf2D(lbuf : Lbuf2D, pix_new : float, pix2swin : Swin1D, col_ridx : int) -> () {
    // read from lbuf : (lbuf, pix_new) -> pix2swin
    for j in @range(0, lbuf.size_y) {
        @pix2swin.write(j, @lbuf.read(col_ridx & 0x3FF, j));
    }
    pix2swin.write(lbuf.size_y, pix_new);

    // shift lbuf : pix2swin -> lbuf
    for j in @range(0, lbuf.size_y) {
	    @lbuf.write(col_ridx & 0x3FF, j, pix2swin.read(j+1)); 
    }
}


// v00: lbuf abstraction
fn iteration(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);

    copy_img(arr, arr_gpu);
    with acc.exec((1,1,1), (1,1,1)) @{
        let lbuf_stride = arr_gpu.stride;
        let lbuf_height = mask.size_y - 1;
        let lbuf_size   = lbuf_stride * lbuf_height;
        let half_range_y    = mask.size_y / 2;
        let half_range_x    = mask.size_x / 2;
        let process_time    = arr.width * arr.height;
        let initial_delay   = arr.width * half_range_y + half_range_x - 1;
        let life_time       = initial_delay + process_time;

        let lbuf = @new_lbuf2D(lbuf_stride, mask.size_y - 1);
        let swin = @new_swin2D((0, 0), (mask.size_x, mask.size_y));

        let temp_in_acc  = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), 10, bh_lower, bh_upper);
        let temp_out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));
        let swin_acc = get_acc_sw(swin);

        let mut col_ridx = 0; let mut row_ridx = 0;
        let mut col_widx = 0; let mut row_widx = 0;
        let mut pix_new;
        for clock_tick in $range(0, life_time){
            let in_acc = Acc {
                read: |x, y|        {
                                        let pix_read = temp_in_acc.read(col_ridx, row_ridx);
                                        pix_read
                                    },
                write: |x, y, v|    {temp_in_acc.write(x, y, v)}
            };
            let out_acc = Acc {
                read: |x, y|        {temp_out_acc.read(x, y)},
                write: |x, y, v|    {
                                        temp_out_acc.write(col_widx, row_widx, v);
                                        col_widx++;
                                        if col_widx == arr.width {
                                            col_widx = 0; row_widx++;
                                        }
                                    }
            };

            {
                // read new pix
                if clock_tick < process_time {
                    pix_new = in_acc.read(col_ridx, row_ridx);
                }

                //shift line buffers
                let pix2swin = @new_swin1D(0, mask.size_y);
                shift_lbuf2D(lbuf, pix_new, pix2swin, col_ridx & 0x3FF);
                
				{// update image indexes
				col_ridx = ((col_ridx + 1) & 0x3FF);
                if(col_ridx == 0){
                    row_ridx++;
                }
				};

				{// shift sliding window
                @shift_swin_with_col(swin, pix2swin);
				};
            };

            // write output
            if clock_tick > initial_delay {
                @body(math, half_range_x, half_range_y, out_acc, swin_acc, mask);
            }
        }
    }
    acc.sync();
    copy_img(out_gpu, out);
}


// v10: lbuf abstraction
fn iteration(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);

    copy_img(arr, arr_gpu);
    with acc.exec((1,1,1), (1,1,1)) @{
        let lbuf_stride = arr_gpu.stride;
        let lbuf_height = mask.size_y - 1;
        let lbuf_size   = lbuf_stride * lbuf_height;
        let half_range_y    = mask.size_y / 2;
        let half_range_x    = mask.size_x / 2;
        let process_time    = arr.width * arr.height;
        let initial_delay   = arr.width * half_range_y + half_range_x - 1;
        let life_time       = initial_delay + process_time;

        let lbuf = @new_lbuf2D(lbuf_stride, mask.size_y - 1);
        let swin = @new_swin2D((0, 0), (mask.size_x, mask.size_y));

        let temp_in_acc  = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), 10, bh_lower, bh_upper);
        let temp_out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));
        let swin_acc = get_acc_sw(swin);

        let mut col_ridx = 0; let mut row_ridx = 0;
        let mut col_widx = 0; let mut row_widx = 0;
        let mut pix_new;
        for clock_tick in $range(0, life_time){
            let in_acc = Acc {
                read: |x, y|        {
                                        let pix_read = temp_in_acc.read(col_ridx, row_ridx);
                                        pix_read
                                    },
                write: |x, y, v|    {temp_in_acc.write(x, y, v)}
            };
            let out_acc = Acc {
                read: |x, y|        {temp_out_acc.read(x, y)},
                write: |x, y, v|    {
                                        temp_out_acc.write(col_widx, row_widx, v);
                                        col_widx++;
                                        if col_widx == arr.width {
                                            col_widx = 0; row_widx++;
                                        }
                                    }
            };

            {
                // read new pix
                if clock_tick < process_time {
                    pix_new = in_acc.read(col_ridx, row_ridx);
                }

                //shift line buffers
                let pix2swin = @new_swin1D(0, mask.size_y);
                shift_lbuf2D(lbuf, pix_new, pix2swin, col_ridx & 0x3FF);
                
				{// update image indexes
				col_ridx = ((col_ridx + 1) & 0x3FF);
                if(col_ridx == 0){
                    row_ridx++;
                }
				};

				{// shift sliding window
                @shift_swin_with_col(swin, pix2swin);
				};
            };

            // write output
            if clock_tick > initial_delay {
                @body(math, half_range_x, half_range_y, out_acc, swin_acc, mask);
            }
        }
    }
    acc.sync();
    copy_img(out_gpu, out);
}

// v9_2:  lb -> sw (vivado style row buffers)
fn iteration_v9_2(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);

    copy_img(arr, arr_gpu);
    with acc.exec((1,1,1), (1,1,1)) @{
        let lbuf_stride = arr_gpu.stride;
        let lbuf_height = mask.size_y - 1;
        let lbuf_size   = lbuf_stride * lbuf_height;
        let half_range_y    = mask.size_y / 2;
        let half_range_x    = mask.size_x / 2;
        let process_time    = arr.width * arr.height;
        let initial_delay   = arr.width * half_range_y + half_range_x - 1;
        let life_time       = initial_delay + process_time;

        let lbuf0 = reserve_shared[f32](lbuf_stride);
        let lbuf1 = reserve_shared[f32](lbuf_stride);
        let lbuf2 = reserve_shared[f32](lbuf_stride);
        let lbuf3 = reserve_shared[f32](lbuf_stride);
        let swin = @new_swin2D((0, 0), (mask.size_x, mask.size_y));

        let temp_in_acc  = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), 10, bh_lower, bh_upper);
        let temp_out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));
        //let lbuf_acc = get_acc_memory(set_pixel_shared_fn(lbuf), get_pixel_shared_fn(lbuf), lbuf_stride, lbuf_height);
        let swin_acc = get_acc_sw(swin);

        let mut col_ridx = 0; let mut row_ridx = 0;
        let mut col_widx = 0; let mut row_widx = 0;
        let mut pix_new;
        for clock_tick in $range(0, life_time){
            let in_acc = Acc {
                read: |x, y|        {
                                        let pix_read = temp_in_acc.read(col_ridx, row_ridx);
                                        pix_read
                                    },
                write: |x, y, v|    {temp_in_acc.write(x, y, v)}
            };
            let out_acc = Acc {
                read: |x, y|        {temp_out_acc.read(x, y)},
                write: |x, y, v|    {
                                        temp_out_acc.write(col_widx, row_widx, v);
                                        col_widx++;
                                        if col_widx == arr.width {
                                            col_widx = 0; row_widx++;
                                        }
                                    }
            };

            {
                // read new pix
                if clock_tick < process_time {
                    pix_new = in_acc.read(col_ridx, row_ridx);
                }

                // reads from lbuf
				let pix_2swin0  = lbuf0(col_ridx & 0x3FF);
				let pix_2swin1  = lbuf1(col_ridx & 0x3FF);
				let pix_2swin2  = lbuf2(col_ridx & 0x3FF);
				let pix_2swin3  = lbuf3(col_ridx & 0x3FF);

				{// shift line buffers 
				lbuf0(col_ridx & 0x3FF) = pix_2swin1; 
				lbuf1(col_ridx & 0x3FF) = pix_2swin2;
				lbuf2(col_ridx & 0x3FF) = pix_2swin3;
				lbuf3(col_ridx & 0x3FF) = pix_new;
				};
                
				{// update image indexes
				col_ridx = ((col_ridx + 1) & 0x3FF);
                if(col_ridx == 0){
                    row_ridx++;
                }
				};

				{// shift sliding window
                @shift_swin_cols(swin);
                @swin.write(mask.size_x - 1, 0, pix_2swin0);
                @swin.write(mask.size_x - 1, 1, pix_2swin1);
                @swin.write(mask.size_x - 1, 2, pix_2swin2);
                @swin.write(mask.size_x - 1, 3, pix_2swin3);
                @swin.write(mask.size_x - 1, 4, pix_new);
				};
            };

            // write output
            if clock_tick > initial_delay {
                @body(math, half_range_x, half_range_y, out_acc, swin_acc, mask);
            }
        }
    }
    acc.sync();
    copy_img(out_gpu, out);
}

//v8 : lbuf -> sw (altera style 1 row buffer) 
fn iteration_v8(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);

    copy_img(arr, arr_gpu);
    with acc.exec((1,1,1), (1,1,1)) @{
        let lbuf_stride = arr_gpu.stride;
        let lbuf_height = mask.size_y - 1;
        let lbuf_size   = lbuf_stride * lbuf_height;
        let half_range_y    = mask.size_y / 2;
        let half_range_x    = mask.size_x / 2;
        let process_time    = arr.width * arr.height;
        let initial_delay   = arr.width * half_range_y + half_range_x - 1;
        let life_time       = initial_delay + process_time;

        let lbuf = reserve_shared[f32](lbuf_size);
        let swin = @new_swin2D((0, 0), (mask.size_x, mask.size_y));

        let temp_in_acc  = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), 10, bh_lower, bh_upper);
        let temp_out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));
        let lbuf_acc = get_acc_memory(set_pixel_shared_fn(lbuf), get_pixel_shared_fn(lbuf), lbuf_stride, lbuf_height);
        let swin_acc = get_acc_sw(swin);

        let mut col_ridx = 0; let mut row_ridx = 0;
        let mut col_widx = 0; let mut row_widx = 0;
        for clock_tick in $range(0, life_time){
            let in_acc = Acc {
                read: |x, y|        {
                                        let pix_read = temp_in_acc.read(col_ridx, row_ridx);
                                        col_ridx++;
                                        if col_ridx == arr.width {
                                            col_ridx = 0; row_ridx++;
                                        }
                                        pix_read
                                    },
                write: |x, y, v|    {temp_in_acc.write(x, y, v)}
            };
            let out_acc = Acc {
                read: |x, y|        {temp_out_acc.read(x, y)},
                write: |x, y, v|    {
                                        temp_out_acc.write(col_widx, row_widx, v);
                                        col_widx++;
                                        if col_widx == arr.width {
                                            col_widx = 0; row_widx++;
                                        }
                                    }
            };

            {
                // read new pix
                let pix_new = select(clock_tick < process_time, in_acc.read(col_ridx, row_ridx), 0.0f);

                // shift sliding window
                @shift_swin(lbuf_acc, swin);
                @swin.write(mask.size_x - 1, mask.size_y - 1, pix_new);

                // shift lbuf
                for i in $range(0, lbuf_size - 1){
                    lbuf(i) = lbuf(i + 1);
                }
                lbuf(lbuf_size - 1) = pix_new;
            }

            // write output
            if clock_tick > initial_delay {
                @body(math, half_range_x, half_range_y, out_acc, swin_acc, mask);
            }
        }
    }
    acc.sync();
    copy_img(out_gpu, out);
}


// v5_4 : lbuf (no swin)
fn iteration_v5_4(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);

    copy_img(arr, arr_gpu);
    with acc.exec((1,1,1), (1,1,1)) @{
        let lbuf_stride = arr_gpu.stride;
        let lbuf_height = mask.size_y - 1;
        let lbuf_size   = lbuf_stride * lbuf_height + mask.size_x;
        let half_range_y    = mask.size_y / 2;
        let half_range_x    = mask.size_x / 2;
        let process_time    = arr.width * arr.height;
        let initial_delay   = arr.width * half_range_y + half_range_x - 1;
        let life_time       = initial_delay + process_time;

        let lbuf = reserve_shared[f32](lbuf_size);

        let temp_in_acc  = get_acc_bh(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu), 10, bh_lower, bh_upper);
        let temp_out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));
        let lbuf_acc = get_acc_memory(set_pixel_shared_fn(lbuf), get_pixel_shared_fn(lbuf), lbuf_stride, lbuf_height);

        let mut col_ridx = 0; let mut row_ridx = 0;
        let mut col_widx = 0; let mut row_widx = 0;
        for clock_tick in $range(0, life_time){
            let in_acc = Acc {
                read: |x, y|        {
                                        let pix_read = temp_in_acc.read(col_ridx, row_ridx);
                                        col_ridx++;
                                        if col_ridx == arr.width {
                                            col_ridx = 0; row_ridx++;
                                        }
                                        pix_read
                                    },
                write: |x, y, v|    {temp_in_acc.write(x, y, v)}
            };
            let out_acc = Acc {
                read: |x, y|        {temp_out_acc.read(x, y)},
                write: |x, y, v|    {
                                        temp_out_acc.write(col_widx, row_widx, v);
                                        col_widx++;
                                        if col_widx == arr.width {
                                            col_widx = 0; row_widx++;
                                        }
                                    }
            };

            {
                // read new pixel
                let mut pix_new = 0.0f;
                if clock_tick < process_time {
                    pix_new = in_acc.read(col_ridx, row_ridx);
                }

                // shift lbuf
                for i in $range(0, lbuf_size - 1){
                    lbuf(i) = lbuf(i + 1);
                }
                lbuf(lbuf_size - 1) = pix_new;
            }

            // write output
            if clock_tick > initial_delay {
                @body(math, half_range_x, half_range_y, out_acc, lbuf_acc, mask);
            }
        }
    }
    acc.sync();
    copy_img(out_gpu, out);
}
