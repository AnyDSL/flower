fn release_device_copy(img: Img) -> () {
    release(img.buf)
}


// Image read
fn get_pixel_fn(img: Img) -> fn(i32) -> f32 { |idx| bitcast[&[1][f32]](img.buf.data)(idx) }
fn get_pixel_fn_vec2(img: Img)  -> fn(i32) -> [f32 *  2] { |idx| bitcast[&[1][[f32 *  2]]](img.buf.data)(idx) }
fn get_pixel_fn_vec4(img: Img)  -> fn(i32) -> [f32 *  4] { |idx| bitcast[&[1][[f32 *  4]]](img.buf.data)(idx) }
fn get_pixel_fn_vec8(img: Img)  -> fn(i32) -> [f32 *  8] { |idx| bitcast[&[1][[f32 *  8]]](img.buf.data)(idx) }
fn get_pixel_fn_vec16(img: Img) -> fn(i32) -> [f32 * 16] { |idx| bitcast[&[1][[f32 * 16]]](img.buf.data)(idx) }
fn get_pixel_fn_vec32(img: Img) -> fn(i32) -> [f32 * 32] { |idx| bitcast[&[1][[f32 * 32]]](img.buf.data)(idx) }


fn get_ldg_fn() -> fn(&[1]f32) -> f32 { if is_nvvm() { nvvm_ldg_f32 } else { cuda_ldg_f32 } }
fn set_pixel_fn(img: Img) -> fn(i32, f32) -> () { |idx, val| bitcast[&mut[1][f32]](img.buf.data)(idx) = val }
fn get_pixel_ldg_fn(img: Img) -> fn(i32) -> f32 { if has_ldg() { |idx| get_ldg_fn()(&bitcast[&[1][f32]](img.buf.data)(idx)) } else { get_pixel_fn(img) } }
fn set_pixel_shared_fn(data: &mut[3][f32]) -> fn(i32, f32) -> () { |idx, val| data(idx) = val }
fn get_pixel_shared_fn(data: &[3][f32]) -> fn(i32) -> f32 { |idx| data(idx) }



//  -------------- Array of Registers --------------------
struct regs1d {
    write : fn(int, f32) -> (),
    read  : fn(int) -> f32,
    begin : int,
    end   : int
}

struct regs2d {
    write : fn(int, int, f32) -> (),
    read  : fn(int, int) -> f32,
    begin : (int, int),
    end   : (int, int)
}

fn new_regs1d(begin: int, end: int) -> regs1d {
    if end == begin {
        regs1d {
            write : |_, _| (),
            read  : |_| undef[f32](),
            begin : begin,
            end   : end
        }
    } else if begin + 1 == end {
        //pe_info("found", begin);
        let mut value = 0.0f; // : f32;
        regs1d {
            write : |i, v| value = v,
            read  : |i| value,
            begin : begin,
            end   : end
        }
    } else {
        //pe_info("begin", begin);
        //pe_info("end", end);
        let m = (end + begin) / 2;
        let left  = new_regs1d(begin, m);
        let right = new_regs1d(m, end);
        regs1d {
            write : |i, v| if i >= m { right.write(i, v) } else { left.write(i, v) },
            read  : |i|    if i >= m { right.read(i) } else { left.read(i) },
            begin : begin,
            end   : end
        }
    }
}

fn new_regs2d(begin: (int, int), end: (int, int)) -> regs2d {
    let (begin_x, begin_y) = begin;
    let (end_x, end_y)     = end;
    if end_y == begin_y {
        regs2d {
            write : |_, _, _| (),
            read  : |_, _| undef[f32](),
            begin : begin,
            end   : end
        }
    } else if begin_y + 1 == end_y {
        let row = new_regs1d(begin_x, end_x);
        regs2d {
            write : |x, y, v| row.write(x, v),
            read  : |x, y|    row.read(x),
            begin : begin,
            end   : end
        }
    } else {
        let m = (end_y + begin_y) / 2;
        let left  = new_regs2d((begin_x, begin_y), (end_x, m));
        let right = new_regs2d((begin_x, m),       (end_x, end_y));
        regs2d {
            write : |x, y, v| if y >= m { right.write(x, y, v) } else { left.write(x, y, v) },
            read  : |x, y|    if y >= m { right.read(x, y) } else { left.read(x, y) },
            begin : begin,
            end   : end
        }
    }
}

//  -------------------  Data Types for Loop Coarsening  ----------------------
struct data_beat {
    read  : fn(int) -> f32,
    write : fn(int, f32) -> (),
    load  : fn(data_beat) -> (),
    size  : int
}

fn new_data_beat(size: int) -> data_beat {
    let value = @new_regs1d(0, size);
    let size  = size;

    fn load(inVec: data_beat) -> () {
        for i in @range(0, size) {
            @value.write(i, inVec.read(i));
        }
    }
    data_beat {
        read  : |idx|      value.read(idx),
        write : |idx, val| value.write(idx, val),
        load  : load,
        size  : size
    }
}
// fn set_shared_fn_vec2(smem : &mut[1][f32], idx : int, val : Vect) -> (){
// 	let smem_cast = smem as &mut[1][simd[f32 * 2]];
//   	smem_cast(idx) = simd[val.read(0), val.read(1)];
// }

// Accessors for vectorized reads/writes
// fn set_pixel_fn(img: Img) -> fn(i32, f32) -> () { |idx, val| bitcast[&mut[1][f32]](img.buf.data)(idx) = val }
// fn get_pixel_ldg_fn(img: Img) -> fn(i32) -> f32 { if has_ldg() { |idx| get_ldg_fn()(&bitcast[&[1][f32]](img.buf.data)(idx)) } else { get_pixel_fn(img) } }


fn get_pixel_vec4(img: Img, idx : int, dbeat : data_beat) -> (){
 	let img_cast = img.buf.data as &mut[1][simd[f32 * 4]];
    let pixels = img_cast(idx);
    dbeat.write(0, pixels(0));
    dbeat.write(1, pixels(1));
    dbeat.write(2, pixels(2));
    dbeat.write(3, pixels(3));
}
fn get_pixel_vec2(img: Img, idx : int, dbeat : data_beat) -> (){
 	let img_cast = img.buf.data as &mut[1][simd[f32 * 2]];
    let pixels = img_cast(idx);
    dbeat.write(0, pixels(0));
    dbeat.write(1, pixels(1));
}
fn get_pixel_vec1(img: Img, idx : int, dbeat : data_beat) -> () {
    dbeat.write(0, bitcast[&[1][f32]](img.buf.data)(idx));
}
fn get_image_fn(img: Img, pFactor : int) -> fn(int, data_beat) -> (){
    |idx, dbeat|
 		match pFactor {
 			1 => get_pixel_vec1(img, idx, dbeat),
 			2 => get_pixel_vec2(img, idx, dbeat),
 			4 => get_pixel_vec4(img, idx, dbeat),
 			 _=> ()
 		}
}


fn set_pixel_vec4(img: Img, idx : int, dbeat : data_beat) -> (){
 	let img_cast = img.buf.data as &mut[1][simd[f32 * 4]];
    img_cast(idx) = simd[dbeat.read(0), dbeat.read(1), dbeat.read(2), dbeat.read(3)];
}
fn set_pixel_vec2(img: Img, idx : int, dbeat : data_beat) -> (){
 	let img_cast = img.buf.data as &mut[1][simd[f32 * 2]];
    img_cast(idx) = simd[dbeat.read(0), dbeat.read(1)];
}
fn set_pixel_vec1(img: Img, idx : int, dbeat : data_beat) -> () {
    bitcast[&mut[1][f32]](img.buf.data)(idx) = dbeat.read(0);
}
fn set_image_fn(img: Img, pFactor : int) -> fn(int, data_beat) -> (){
    |idx, dbeat|
 		match pFactor {
 			1 => set_pixel_vec1(img, idx, dbeat),
 			2 => set_pixel_vec2(img, idx, dbeat),
 			4 => set_pixel_vec4(img, idx, dbeat),
 			 _=> ()
 		}
}

//  --------- Line Buffers and Sliding Window  --------------------
// Line Buffer
struct LineBuffer {
    write  : fn(int, int, f32) -> (),
    read   : fn(int, int) -> f32,
    size_x : int,
    size_y : int
}

fn new_LineBuffer(size_x: int, size_y: int) -> LineBuffer {
    if size_y == 0 {
        LineBuffer {
            write  : |_, _, _| (),
            read   : |_, _| undef[f32](),
            size_x : size_x,
            size_y : size_y
        }
    } else {
        let lbuf = reserve_shared[f32](size_x);
        let sub_lbuf = new_LineBuffer(size_x, size_y - 1);
        LineBuffer {
            write  : |x, y, v| {
                if y == size_y - 1 {
                    lbuf(x) = v
                } else {
                    sub_lbuf.write(x, y, v)
                }
            },
            read   : |x, y| {
                if y == size_y - 1 {
                    lbuf(x)
                } else {
                    sub_lbuf.read(x, y)
                }
            },
            size_x : size_x,
            size_y : size_y
        }
    }
}

// Sliding window
struct sliding_win {
    read  : fn(int, int) -> f32,
    shift : fn(regs2d) -> ()
}

fn new_sliding_win(swin_x: int, swin_y: int, pFactor: int) -> sliding_win {
    let swin = @new_regs2d((0, 0), (swin_x, swin_y));

    fn shift(lb2swin: regs2d) -> () {
        // Shift sliding window
        for j in @range(0, swin_y) {
            for i in @range(0, swin_x - pFactor) {
                @swin.write(i, j, @swin.read(i + pFactor, j));
            }
        }

        // Read new col
        for j in @range(0, swin_y) {
            for v in @range(0, pFactor) {
                @swin.write((swin_x - pFactor + v), j, lb2swin.read(v, j));
            }
        }
    }
    sliding_win {
        read  : |x, y| swin.read(x, y),
        shift : shift
    }
}


// On Chip Memory
struct onchipmem {
    read  : fn(int, int) -> f32,
    shift : fn(data_beat, int) -> (),
}

// Vivado style Multiple
fn new_onchipmem(image_x: int, swin_x: int, swin_y: int, pFactor: int) -> onchipmem {
    let swin = @new_sliding_win(swin_x, swin_y, pFactor);
    let lbuf = @new_LineBuffer(image_x, swin_y - 1);
    let lb2swin = @new_regs2d ((0, 0), (pFactor, swin_y));

    fn shift_lbuf2D(vec_pix_new: data_beat, col_ridx: i32) -> () {
        // read from lbuf : lbuf -> lb2swin
        for j in @range(0, lbuf.size_y) {
            for v in @range(0, pFactor) {
                @lb2swin.write(v, j, @lbuf.read((col_ridx + v), j));
            }
        }
        for v in @range(0, pFactor) {
            @lb2swin.write(v, lbuf.size_y, vec_pix_new.read(v));
        }

        // shift lbuf : (lb2swin, vec_pix_new) -> lbuf
        for j in @range(0, lbuf.size_y - 1) {
            for v in @range(0, pFactor) {
                @lbuf.write((col_ridx + v), j, lb2swin.read(v, j + 1));
            }
        }
        for v in @range(0, pFactor) {
            @lbuf.write((col_ridx + v), lbuf.size_y - 1, vec_pix_new.read(v));
        }
    }
    fn shift(vec_pix_new: data_beat, col_ridx: i32) -> () {
        //shift line buffers
        shift_lbuf2D(vec_pix_new, col_ridx);

        // shift sliding window
        @swin.shift(lb2swin);
    }

    onchipmem {
        read  : |x, y| swin.read(x, y),
        shift : shift,
    }
}


//  -------------------  Loop Coarsening  ----------------------
struct coarsening_type {
    shift   : fn(data_beat, int) -> (),
    process : fn() -> data_beat,
}

fn FetchAndCalc(math: Intrinsics, image_x: int, mask: Mask, pFactor: int, body: StencilFn) -> coarsening_type {
    let half_range_y      = mask.size_y >> 1;
    let half_range_x      = mask.size_x >> 1;
    let right_half_radius = ((half_range_x - 1) / pFactor) + 1;
    let swin_x            = half_range_x + (1 + right_half_radius) * pFactor;
    let swin_y            = mask.size_y;

    // On Chip Memory Architecture
    let OnChipMem = new_onchipmem(image_x, swin_x, swin_y, pFactor);
    //let OnChipMem = new_OnChipMem_alteraOne_noswin_vec(image_x, swin_x, swin_y, pFactor);

    fn process() -> data_beat {
        let vec_pix_out = @new_data_beat(pFactor);
        for v in @range(0, pFactor) @{
            let OnChipMem_acc = Acc {
                    read  : |x, y|    OnChipMem.read(x + v, y),
                    write : |x, y, v| {}
            };
            let vec_pix_out_acc = Acc {
                read  : |x, y|       0.0f,
                write : |x, y, data| vec_pix_out.write(v, data)
            };
            @body(math, half_range_x, half_range_y, vec_pix_out_acc, OnChipMem_acc, mask);
            //vec_pix_out_acc.write(0, 0, OnChipMem_acc.read(half_range_x, half_range_y));
        }
        vec_pix_out
    }

    coarsening_type {
        shift   : |vec_new, col_ridx| OnChipMem.shift(vec_new, col_ridx),
        process : process
    }
}

fn CalcAndPack(math: Intrinsics, image_x: int, mask: Mask, pFactor: int, body: StencilFn) -> coarsening_type {
    let half_range_y = mask.size_y >> 1;
    let half_range_x = mask.size_x >> 1;
    let swin_x       = mask.size_x - 1 + pFactor;
    let swin_y       = mask.size_y;

    // On Chip Memory Architecture
    let OnChipMem = new_onchipmem(image_x, swin_x, swin_y, pFactor);
    //let OnChipMem = new_OnChipMem_alteraOne_noswin_vec(image_x, swin_x, swin_y, pFactor);

    // Constants for Pack
    let delayed_pixels_size = ((pFactor + ((pFactor - half_range_x) % pFactor)) % pFactor);
    let pack_offset         = pFactor - delayed_pixels_size;

    let vec_delayed = @new_data_beat(delayed_pixels_size);
    fn process() -> data_beat {
        let vec_pix_out = @new_data_beat(pFactor);
        for v in @range(0, pFactor) @{
            let OnChipMem_acc = Acc {
                    read  : |x, y|    OnChipMem.read(x + v, y),
                    write : |x, y, v| {}
            };
            let vec_pix_out_acc = Acc {
                read  : |x, y| 0.0f,
                write : |x, y, data| {
                    if  v < pack_offset {
                        let pack_idx =  v + delayed_pixels_size;
                        @vec_pix_out.write(pack_idx, data)
                    } else {
                        let pack_idx =  v - pack_offset;
                        @vec_pix_out.write(pack_idx, @vec_delayed.read(pack_idx));
                        @vec_delayed.write(pack_idx, data);
                    }
                }
            };
            @body(math, half_range_x, half_range_y, vec_pix_out_acc, OnChipMem_acc, mask);
            //vec_pix_out_acc.write(0, 0, OnChipMem_acc.read(half_range_x, half_range_y));
        }
        vec_pix_out
    }

    coarsening_type {
        shift   : |vec_new, col_ridx| OnChipMem.shift(vec_new, col_ridx),
        process : process
    }
}


//  ------------------- Stencil Processing ----------------------
// coarsening: assumes that image_width is factor of pFactor
fn iteration(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_gpu = alloc_img(arr, acc.alloc);
    let out_gpu = alloc_img(out, acc.alloc);

    copy_img(arr, arr_gpu);
    for benchmark_aocl(acc) {
        with acc.exec((1,1,1), (1,1,1)) @{
            let half_range_y    = mask.size_y >> 1;
            let half_range_x    = mask.size_x >> 1;
            let pFactor = 2;
            let kVecRightRadius = ((half_range_x - 1) / pFactor) + 1;
            let kVecImageWidth  = arr.width / pFactor;

            let process_time    = kVecImageWidth * arr.height;
            let initial_delay   = kVecImageWidth * half_range_y + kVecRightRadius - 1;
            let life_time       = initial_delay + process_time;

            let in_acc  = get_acc(arr_gpu, set_pixel_fn(arr_gpu), get_pixel_ldg_fn(arr_gpu));
            let out_acc = get_acc(out_gpu, set_pixel_fn(out_gpu), get_pixel_fn(out_gpu));
            let coarsening = FetchAndCalc(math, arr.width, mask, pFactor, body);
            //let coarsening = CalcAndPack(math, arr.width, mask, pFactor, body);

            let mut col_ridx = 0; let mut row_ridx = 0;
            let mut col_widx = 0; let mut row_widx = 0;

            let vec_pix_new = @new_data_beat(pFactor);
            let get_data_beat = get_image_fn(arr_gpu, pFactor);
            let set_data_beat = set_image_fn(out_gpu, pFactor);

            for clock_tick in $range(0, life_time) {
                {
                // read new pix
                if clock_tick < process_time {
                    @get_data_beat((row_ridx * kVecImageWidth + col_ridx), vec_pix_new);
                }

                // Shift on chip mem
                @coarsening.shift(vec_pix_new, col_ridx * pFactor);
                };
                {
                let vec_pix_out = @coarsening.process();
                // write output
                if clock_tick > initial_delay {
                    @set_data_beat((row_widx * kVecImageWidth + col_widx), vec_pix_out);
                    col_widx++;
                }
                };

                // update image indexes
                col_ridx++;
                if col_ridx == kVecImageWidth { col_ridx = 0; row_ridx++; }
                if col_widx == kVecImageWidth { col_widx = 0; row_widx++; }
            }
        }
        //acc.sync();
    }
    copy_img(out_gpu, out);
}





// ------------- Comparison reasons -----------------------------------------
//  // Altera style One row buffer, no Sliding window
//  fn new_OnChipMem_alteraOne_noswin_vec(image_x: int, swin_x: int, swin_y: int, pFactor: int) -> onchipmem {
//      let lbuf_size = image_x * (swin_y - 1) + swin_x;
//      let lbuf = reserve_shared[f32](lbuf_size);
//      let lbuf_acc = get_acc_memory(set_pixel_shared_fn(lbuf), get_pixel_shared_fn(lbuf), image_x, swin_y);
//
//      fn shift(vec_pix_new: data_beat) -> () {
//          // shift lbuf : (lb2swin, pix_new) -> lbuf
//          for i in $range(0, lbuf_size - pFactor) {
//              lbuf(i) = lbuf(i + pFactor);
//          }
//          for v in @range(0, pFactor) {
//              lbuf(lbuf_size - pFactor + v) = vec_pix_new.read(v);
//          }
//      }
//
//      onchipmem {
//          read  : |x, y|   lbuf_acc.read(x, y),
//          shift : |x, idx| shift(x)
//      }
//  }
//  // Vivado style Multiple
//  fn new_onchipmem(image_x: int, swin_x: int, swin_y: int, pFactor: int) -> onchipmem {
//      let swin = @new_sliding_win(swin_x, swin_y, pFactor);
//      let lbuf = @new_LineBuffer(image_x, swin_y - 1);
//      let lb2swin = @new_regs2d ((0, 0), (pFactor, swin_y));
//  
//      fn shift_lbuf2D(vec_pix_new: data_beat, col_ridx: i32) -> () {
//          // read from lbuf : lbuf -> lb2swin
//          for j in @range(0, lbuf.size_y) {
//              for v in @range(0, pFactor) {
//                  @lb2swin.write(v, j, @lbuf.read((col_ridx + v), j));
//              }
//          }
//          for v in @range(0, pFactor) {
//              @lb2swin.write(v, lbuf.size_y, vec_pix_new.read(v));
//          }
//  
//          // shift lbuf : (lb2swin, vec_pix_new) -> lbuf
//          for j in @range(0, lbuf.size_y - 1) {
//              for v in @range(0, pFactor) {
//                  @lbuf.write((col_ridx + v), j, lb2swin.read(v, j + 1));
//              }
//          }
//          for v in @range(0, pFactor) {
//              @lbuf.write((col_ridx + v), lbuf.size_y - 1, vec_pix_new.read(v));
//          }
//      }
//      fn shift(vec_pix_new: data_beat, col_ridx: i32) -> () {
//          //shift line buffers
//          shift_lbuf2D(vec_pix_new, col_ridx);
//  
//          // shift sliding window
//          @swin.shift(lb2swin);
//      }
//  
//      onchipmem {
//          read  : |x, y| swin.read(x, y),
//          shift : shift,
//      }
//  }
