extern "C" {
  fn print(i32, i32) -> ();
}

fn oddeven_merge_sort(length: int, mut arr: [float * 5]) -> () {
    fn compare_and_swap(i: int, j: int) -> () {
        //print(i, j);
        if arr(i) > arr(j) {
            let tmp = arr(i);
            arr(i) = arr(j);
            arr(j) = tmp;
        }
    }

    fn oddeven_merge(lo: int, hi: int, r: int) -> () {
        let step = r * 2;
        if step < hi - lo {
            oddeven_merge(lo, hi, step);
            oddeven_merge(lo + r, hi, step);
            for i in range_step(lo + r, hi - r, step) {
                compare_and_swap(i, i + r);
            }
        } else {
            compare_and_swap(lo, lo + r);
        }
    }

    fn oddeven_merge_sort_range(lo: int, hi: int) -> () {
        if (hi - lo) >= 1 {
            let mid = lo + ((hi - lo) / 2);
            oddeven_merge_sort_range(lo, mid);
            oddeven_merge_sort_range(mid + 1, hi);
            oddeven_merge(lo, hi, 1);
        }
    }

    oddeven_merge_sort_range(0, length - 1);
}

fn main(input: &[float]) -> float {
    let length = 5;

    fn median() -> float {
        let mut arr: [float * 5];
        for i in range(0, length) {
            arr(i) = input(i);
        }

        oddeven_merge_sort(length, arr);

        // return median
        arr((length -1) / 2)
    }
    @median()
}

