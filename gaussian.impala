fn apply_stencil(ksize : int, stencil : [[float * 5] * 5],
                 x : int, y : int, acc : Acc, region: int
                ) -> float {
    let mut sum = 0.0f;
    let half_range = ksize / 2;

    for j in iterate(-half_range, half_range+1) {
        for i in iterate(-half_range, half_range+1) {
            let stencil_val = stencil(i + half_range)(j + half_range);
            if stencil_val != 0.0f {
                let mut idx_x = acc.o_x + x + i;
                let mut idx_y = acc.o_y + y + j;

                // 0 --- 1 --- 2
                // 3 --- 4 --- 5
                // 6 --- 7 --- 8

                // left
                if region == 0 { idx_x = clamp_lower(idx_x, 0); }
                if region == 3 { idx_x = clamp_lower(idx_x, 0); }
                if region == 6 { idx_x = clamp_lower(idx_x, 0); }

                // right
                if region == 2 { idx_x = clamp_upper(idx_x, acc.img.width); }
                if region == 5 { idx_x = clamp_upper(idx_x, acc.img.width); }
                if region == 8 { idx_x = clamp_upper(idx_x, acc.img.width); }

                // top
                if region == 0 { idx_y = clamp_lower(idx_y, 0); }
                if region == 1 { idx_y = clamp_lower(idx_y, 0); }
                if region == 2 { idx_y = clamp_lower(idx_y, 0); }

                // bottom
                if region == 6 { idx_y = clamp_upper(idx_y, acc.img.height); }
                if region == 7 { idx_y = clamp_upper(idx_y, acc.img.height); }
                if region == 8 { idx_y = clamp_upper(idx_y, acc.img.height); }

                // all in
                if region == 10 {
                    idx_x = clamp_lower(idx_x, 0);
                    idx_x = clamp_upper(idx_x, acc.img.width);
                    idx_y = clamp_upper(idx_y, acc.img.height);
                    idx_y = clamp_lower(idx_y, 0);
                }

                sum += acc.img.data(idx_y * acc.img.width + idx_x) * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        }
    }

    sum
}

fn apply_stencil_sep(ksize : int, stencil : [float * 5], x : int, y : int,
                     acc : Acc, row : bool, region : int
                    ) -> float {
    let mut sum = 0.0f;
    let half_range = ksize / 2;
    for i in iterate(-half_range, half_range+1) {
        let stencil_val = stencil(i + half_range);
        let mut idx_x = if row { acc.o_x + x + i } else { acc.o_x + x };
        let mut idx_y = if row { acc.o_y + y } else { acc.o_y + y + i };
        if row {
            // 0 --- 1 --- 2

            // left
            if region == 0 { idx_x = clamp_lower(idx_x, 0); }
            // right
            if region == 2 { idx_x = clamp_upper(idx_x, acc.img.width); }

            // all in
            if region == 10 {
                idx_x = clamp_lower(idx_x, 0);
                idx_x = clamp_upper(idx_x, acc.img.width);
            }
        } else {
            // 0
            // 1
            // 2

            // top
            if region == 0 { idx_y = clamp_lower(idx_y, 0); }
            // bottom
            if region == 2 { idx_y = clamp_upper(idx_y, acc.img.height); }

            // all in
            if region == 10 {
                idx_y = clamp_lower(idx_y, 0);
                idx_y = clamp_upper(idx_y, acc.img.height);
            }
        }
        sum += acc.img.data(idx_y * acc.img.width + idx_x) * stencil_val;
    }

    sum
}


fn main() -> int {
    let width  = 4096;
    let height = 4096;
    let ksize  = 5;
    let arr    = Img { data : ~[width*height:float], width : width, height : height };
    let out    = Img { data : ~[width*height:float], width : width, height : height };
    init_rand(arr.data, width, height);
    init_zero(out.data, width, height);

    let stencil_sep = [ 0.070766f, 0.244460f, 0.369546f, 0.244460f, 0.070766f ];

    let stencil = [
        [ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ],
        [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
        [ 0.026151f, 0.090339f, 0.136565f, 0.090339f, 0.026151f ],
        [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
        [ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ]];


    //// SS
    //for x, y, arr_acc, mut out_acc in @iteration(arr, out) {
    //    out_acc.img.data((out_acc.o_y + y)*out_acc.img.width + out_acc.o_x + x) = apply_stencil(ksize, stencil, x, y, arr_acc, 10);
    //}

    //// SS + BH
    //for x, y, arr_acc, mut out_acc, region in @iteration_bounds(ksize, arr, out) {
    //    out_acc.img.data((out_acc.o_y + y)*out_acc.img.width + out_acc.o_x + x) = apply_stencil(ksize, stencil, x, y, arr_acc, region);
    //}

    //// SS + SM
    //for x, y, arr_acc, mut out_acc, region in @iteration_advanced(ksize, arr, out) {
    //    out_acc.img.data((out_acc.o_y + y)*out_acc.img.width + out_acc.o_x + x) = apply_stencil(ksize, stencil, x, y, arr_acc, region);
    //}


    //// SEP + SS
    //for x, y, arr_acc, mut out_acc, is_row in @iteration_sep(arr, out) {
    //    out_acc.img.data((out_acc.o_y + y)*out_acc.img.width + out_acc.o_x + x) = apply_stencil_sep(ksize, stencil_sep, x, y, arr_acc, is_row, 10);
    //}

    // SEP + SS + BH
    for x, y, arr_acc, mut out_acc, is_row, region in @iteration_sep_bounds(ksize, arr, out) {
        out_acc.img.data((out_acc.o_y + y)*out_acc.img.width + out_acc.o_x + x) = apply_stencil_sep(ksize, stencil_sep, x, y, arr_acc, is_row, region);
    }

    //// SEP + SS + SM
    //for x, y, arr_acc, mut out_acc, is_row, region in @iteration_sep_advanced(ksize, arr, out) {
    //    out_acc.img.data((out_acc.o_y + y)*out_acc.img.width + out_acc.o_x + x) = apply_stencil_sep(ksize, stencil_sep, x, y, arr_acc, is_row, region);
    //}


    let mut passed = 0;

    for y in range(0, out.height) {
        for x in range(0, out.width) {
            let acc = Acc { img : arr, o_x : 0, o_y : 0 };
            let ref = @apply_stencil(ksize, stencil, x, y, acc, 10);
            let mut diff = ref - out.data(y*width + x);
            if diff < 0.0f  { diff = -diff; }
            if diff > 0.01f { passed = 42; }
        }
    }

    passed
}
