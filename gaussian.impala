type Mask = Mask5;
type MaskSep = Mask5Sep;

fn apply_stencil(mask : Mask, acc : Acc, x : int, y : int) -> float {
    let mut sum = 0.0f;
    let half_range_y = mask.size_y / 2;
    let half_range_x = mask.size_x / 2;

    for j in iterate(-half_range_y, half_range_y+1) {
        for i in iterate(-half_range_x, half_range_x+1) {
            let stencil_val = mask.data(j + half_range_y)(i + half_range_x);
            if stencil_val != 0.0f {
                let mut idx_x = acc.roi.o_x + acc.rox + x + i;
                let mut idx_y = acc.roi.o_y + acc.roy + y + j;

                // 0 --- 1 --- 2
                // 3 --- 4 --- 5
                // 6 --- 7 --- 8

                // left
                if acc.region == 0 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }
                if acc.region == 3 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }
                if acc.region == 6 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }

                // right
                if acc.region == 2 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }
                if acc.region == 5 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }
                if acc.region == 8 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }

                // top
                if acc.region == 0 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }
                if acc.region == 1 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }
                if acc.region == 2 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }

                // bottom
                if acc.region == 6 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }
                if acc.region == 7 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }
                if acc.region == 8 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }

                // all in
                if acc.region == 10 {
                    idx_x = clamp_lower(idx_x, acc.roi.o_x);
                    idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width);
                    idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height);
                    idx_y = clamp_lower(idx_y, acc.roi.o_y);
                }

                sum += acc.img.data(idx_y * acc.img.stride + idx_x) * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        }
    }

    sum
}

fn apply_stencil_sep(mask : MaskSep, acc : Acc, row : bool, x : int, y : int) -> float {
    let mut sum = 0.0f;
    let half_range = mask.size / 2;
    for i in iterate(-half_range, half_range+1) {
        let stencil_val = mask.data(i + half_range);
        let mut idx_x = if row { acc.roi.o_x + acc.rox + x + i } else { acc.roi.o_x + acc.rox + x };
        let mut idx_y = if row { acc.roi.o_y + acc.roy + y } else { acc.roi.o_y + acc.roy + y + i };
        if row {
            // 0 --- 1 --- 2

            // left
            if acc.region == 0 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }
            // right
            if acc.region == 2 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }

            // all in
            if acc.region == 10 {
                idx_x = clamp_lower(idx_x, acc.roi.o_x);
                idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width);
            }
        } else {
            // 0
            // 1
            // 2

            // top
            if acc.region == 0 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }
            // bottom
            if acc.region == 2 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }

            // all in
            if acc.region == 10 {
                idx_y = clamp_lower(idx_y, acc.roi.o_y);
                idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height);
            }
        }
        sum += acc.img.data(idx_y * acc.img.stride + idx_x) * stencil_val;
    }

    sum
}


fn main() -> int {
    let width  = 4096;
    let height = 4096;
    let arr    = Img { data : ~[width*height:float], width : width, height : height, stride : width };
    let out    = Img { data : ~[width*height:float], width : width, height : height, stride : width };
    init_rand(arr.data, arr.stride, out.height);
    init_zero(out.data, out.stride, out.height);

    let mask_sep = MaskSep {
        data : [ 0.070766f, 0.244460f, 0.369546f, 0.244460f, 0.070766f ],
        size : 5
    };

    let mask = Mask {
        data : [[ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ],
                [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
                [ 0.026151f, 0.090339f, 0.136565f, 0.090339f, 0.026151f ],
                [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
                [ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ]],
        size_x : 5, size_y : 5
    };


    //// SS
    //for x, y, mask, arr_acc, mut out_acc in @iteration(mask, arr, out) {
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = apply_stencil(mask, arr_acc, x, y);
    //}

    //// SS + BH
    //for x, y, mask, arr_acc, mut out_acc in @iteration_bounds(mask, arr, out) {
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = apply_stencil(mask, arr_acc, x, y);
    //}

    // SS + SM
    for x, y, mask, arr_acc, mut out_acc in @iteration_advanced(mask, arr, out) {
        out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = apply_stencil(mask, arr_acc, x, y);
    }


    //// SEP + SS
    //for x, y, mask, arr_acc, mut out_acc, is_row in @iteration_sep(mask_sep, arr, out) {
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = apply_stencil_sep(mask, arr_acc, is_row, x, y);
    //}

    //// SEP + SS + BH
    //for x, y, mask, arr_acc, mut out_acc, is_row in @iteration_sep_bounds(mask_sep, arr, out) {
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = apply_stencil_sep(mask, arr_acc, is_row, x, y);
    //}

    //// SEP + SS + SM
    //for x, y, mask, arr_acc, mut out_acc, is_row in @iteration_sep_advanced(mask_sep, arr, out) {
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = apply_stencil_sep(mask, arr_acc, is_row, x, y);
    //}


    fn reference() -> int {
        let mut passed = 0;
        let arr_acc = get_acc(arr, 10);
        for y in $iterate(0, out.height) {
            for x in $iterate(0, out.width) {
                let ref = @apply_stencil(mask, arr_acc, x, y);
                let mut diff = ref - out.data(y*out.stride + x);
                if diff < 0.0f  { diff = -diff; }
                if diff > 0.01f { passed = 42; }
            }
        }
        passed
    }
    @reference()
}
