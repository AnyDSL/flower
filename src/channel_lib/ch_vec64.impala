fn @channel_to_Mem2D_read(img: Img, pFactor: int) -> Mem2D {
    if(pFactor == 64) {
        channel_to_Mem2D_read_vec64(img)
    } else {
        undef[Mem2D]()
    }
}

fn @channel_to_Mem2D_write(img: Img, pFactor: int) -> Mem2D {
    if(pFactor == 64) {
        channel_to_Mem2D_write_vec64(img)
    } else {
        undef[Mem2D]()
    }
}

fn @channel_to_Mem2D_write_vec64(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t, .. 64 ];
    let pFactor = 64;
    fn @update(idx: int) -> () { write_channel64(img.fifo, value); }
    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @write(idx: int, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 64, update, read, write)
}

fn @channel_to_Mem2D_read_vec64(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t, .. 64 ];
    let pFactor = 64;
    fn @update(idx: int) -> () { value = read_channel64(img.fifo); }
    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @write(idx: int, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 64, update, read, write)
}
