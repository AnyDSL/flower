fn @channel_to_Mem2D_read[T](img: Img[T], pFactor: i32) -> Mem2D[T] {
    if(pFactor == 16) {
        channel_to_Mem2D_read_vec16[T](img)
    } else {
        undef[Mem2D[T]]()
    }
}

fn @channel_to_Mem2D_write[T](img: Img[T], pFactor: i32) -> Mem2D[T] {
    if(pFactor == 16) {
        channel_to_Mem2D_write_vec16[T](img)
    } else {
        undef[Mem2D[T]]()
    }
}

fn @channel_to_Mem2D_write_vec16[T](img: Img[T]) -> Mem2D[T] {
    //let mut value = [ 0 as pixel_t, .. 16 ];
    let mut value = bitcast[[T * 16]]([0; 16]);
    let pFactor = 16;
    fn @update(idx: i32) -> () { write_channel16[T](img.fifo, value); }
    fn @read(idx: i32) -> T { value(idx) }
    fn @write(idx: i32, din: T) -> () { value(idx) = din; }
    create_Mem2D_from_img[T](img, 16, update, read, write)
}

fn @channel_to_Mem2D_read_vec16[T](img: Img[T]) -> Mem2D[T] {
    //let mut value = [ 0 as pixel_t, .. 16 ];
    let mut value = bitcast[[T * 16]]([0; 16]);
    let pFactor = 16;
    fn @update(idx: i32) -> () { value = read_channel16[T](img.fifo); }
    fn @read(idx: i32) -> T { value(idx) }
    fn @write(idx: i32, din: T) -> () { value(idx) = din; }
    create_Mem2D_from_img[T](img, 16, update, read, write)
}
