// ---------------------------------------------------------------------------
// Everything related with Img in stencil_lib
// ---------------------------------------------------------------------------
// pipe support
type pipe = channel;

// FPGA dataflow construction with virtual images
struct Img {
    buf     : Buffer,
    fifo    : &mut pipe,
    virtual : bool,
    width   : i32,
    height  : i32,
    stride  : i32,
}

static mut dummy :pipe;
fn @new_img(width: i32, height: i32, stride: i32, buf: Buffer) = Img {
    buf = buf, fifo = &mut dummy, virtual = false, width = width, height = height, stride = stride
};

fn @alloc_img[T](img: Img, alloc: fn(i64) -> Buffer) = new_img(img.width, img.height, img.stride, alloc((img.stride * img.height) as i64 * sizeof[T]()));

fn @create_host_img[T](width: i32, height: i32) -> Img {
    let stride = round_up(width, get_vector_length());
    let buf = alloc_cpu((stride * height) as i64 * sizeof[T]());
    new_img(width, height, stride, buf)
}

fn @new_virtual_img(width: i32, height: i32, stride: i32, fifo: &mut pipe) -> Img {
    let buf = alloc_cpu(0 as i64);
    Img { buf = buf, fifo = fifo, virtual = true, width = width, height = height, stride = stride }
}

fn @create_virtual_img(width: i32, height: i32, fifo: &mut pipe) -> Img {
    let stride = round_up(width, get_vector_length());
    new_virtual_img(width, height, stride, fifo)
}

fn @get_acc_virtual[T](img: Img, set_pixel: fn(i32, T) -> (), get_pixel: fn(i32) -> T) = Acc[T] {
        read  = @|x, y|    { get_pixel(x) },
        write = @|x, y, v| { set_pixel(x, v) }
    };

fn @get_acc[T](img: Img, set_pixel: fn(i32, T) -> (), get_pixel: fn(i32) -> T) -> Acc[T] {
    if img.virtual == false {
        let real_img = new_img(img.width, img.height, img.stride, img.buf);
        get_acc_offset[T](real_img, set_pixel, get_pixel, 0, 0)
    } else {
        get_acc_virtual[T](img, set_pixel, get_pixel)
    }
}

fn @get_acc_bh[T](img: Img, set_pixel: fn(i32, T) -> (), get_pixel: fn(i32) -> T, region: Region, bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]) -> Acc[T] {
    if img.virtual == false {
        let real_img = new_img(img.width, img.height, img.stride, img.buf);
        get_acc_bh_offset[T](real_img, set_pixel, get_pixel, 0, 0, region, bh_lower, bh_upper)
    } else {
        get_acc_virtual[T](img, set_pixel, get_pixel)
    }
}

// region of interest is not supported yet
// &   [pixel_t] on CPU/AVX
// &[1][pixel_t] on CUDA/NVVM & OpenCL/AMDGPU
fn @get_acc_bh_offset[T](img: Img, set_pixel: fn(i32, T) -> (), get_pixel: fn(i32) -> T, rox: i32, roy: i32, region: Region, bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]) = Acc[T] {
        read  = @|x, y|    read_pixel(x + rox, y + roy, region, RoI { o_x = 0, o_y = 0, width = img.width, height = img.height }, @|x, y| { get_pixel(y * img.stride + x) }, bh_lower, bh_upper),
        write = @|x, y, v| set_pixel((y + roy) * img.stride + x + rox, v)
};

fn @get_acc_offset[T](img: Img, set_pixel: fn(i32, T) -> (), get_pixel: fn(i32) -> T, rox: i32, roy: i32) = Acc[T] {
        read  = @|x, y|    get_pixel((y + roy) * img.stride + x + rox),
        write = @|x, y, v| set_pixel((y + roy) * img.stride + x + rox, v)
};

// ---------------------------- memory access --------------------------------------
fn @create_Mem2D_read(width: i32, height: i32, pFactor: i32, update: fn(i32) -> (), read: fn(i32) -> pixel_t) -> Mem2D {
    let stride = round_up(width, pFactor);
    Mem2D{ read = read, write = @|x, val|{}, height = height, width = width, stride = stride, pFactor = pFactor, update = update}
}

fn @create_Mem2D_write(width: i32, height: i32, pFactor: i32, update: fn(i32) -> (), write : fn(i32, pixel_t) -> ()) -> Mem2D {
    let stride = round_up(width, pFactor);
    Mem2D{ read = @|x|{ 0 as pixel_t}, write = write, height = height, width = width, stride = stride, pFactor = pFactor, update = update}
}

fn @create_Mem2D_from_img(img: Img, pFactor: i32, update: fn(i32) -> (), read: fn(i32) -> pixel_t, write: fn(i32, pixel_t) -> ()) -> Mem2D {
    Mem2D{ read = read, write = write, height = img.height, width = img.width, stride = img.stride, pFactor = pFactor, update = update}
}


fn @Img_to_Mem2D_read(img: Img, pFactor: i32) -> Mem2D {
    //let pFactor = get_vector_length();
    if img.virtual == false {
        let real_img = new_img(img.width, img.height, img.stride, img.buf);
        global_Img_to_Mem2D_read(real_img, pFactor)
    } else {
        channel_to_Mem2D_read(img, pFactor)
    }
}

fn @Img_to_Mem2D_write(img: Img, pFactor: i32) -> Mem2D {
    //let pFactor = get_vector_length();
    if img.virtual == false {
        let real_img = new_img(img.width, img.height, img.stride, img.buf);
        global_Img_to_Mem2D_write(real_img, pFactor)
    } else {
        channel_to_Mem2D_write(img, pFactor)
    }
}


fn @global_Img_to_Mem2D_read(img: Img, pFactor: i32) -> Mem2D {
    match pFactor {
         1  => get_global_stream_vec1 (img),
         2  => get_global_stream_vec2 (img),
         4  => get_global_stream_vec4 (img),
         8  => get_global_stream_vec8 (img),
        16  => get_global_stream_vec16(img),
        32  => get_global_stream_vec32(img),
        64  => get_global_stream_vec64(img),
        128 => get_global_stream_vec128(img),
         _ => undef[Mem2D]()
    }
}

fn @global_Img_to_Mem2D_write(img: Img, pFactor: i32) -> Mem2D {
    match pFactor {
         1 => global_Img_to_Mem2D_write_vec1 (img),
         2 => global_Img_to_Mem2D_write_vec2 (img),
         4 => global_Img_to_Mem2D_write_vec4 (img),
         8 => global_Img_to_Mem2D_write_vec8 (img),
        16 => global_Img_to_Mem2D_write_vec16(img),
        32 => global_Img_to_Mem2D_write_vec32(img),
        64 => global_Img_to_Mem2D_write_vec64(img),
        128 => global_Img_to_Mem2D_write_vec128(img),
         _ => undef[Mem2D]()
    }
}

fn @get_global_stream_vec1(img: Img) -> Mem2D {
    let mut value = [0 as pixel_t];
    let global_read_fn = get_global_read_vec1(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 1, update, read, write)
}

fn @get_global_stream_vec2(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 2 ];
    let global_read_fn = get_global_read_vec2(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 2, update, read, write)
}

fn @get_global_stream_vec4(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 4 ];
    let global_read_fn = get_global_read_vec4(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 4, update, read, write)
}

fn @get_global_stream_vec8(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 8 ];
    let global_read_fn = get_global_read_vec8(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 8, update, read, write)
}

fn @get_global_stream_vec16(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 16 ];
    let global_read_fn = get_global_read_vec16(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 16, update, read, write)
}

fn @get_global_stream_vec32(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 32 ];
    let global_read_fn = get_global_read_vec32(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 32, update, read, write)
}

fn @get_global_stream_vec64(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 64 ];
    let global_read_fn = get_global_read_vec64(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 64, update, read, write)
}

fn @get_global_stream_vec128(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 128 ];
    let global_read_fn = get_global_read_vec128(img);
    fn @update(idx: i32) -> () { value = global_read_fn(idx); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 128, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec1(img: Img) -> Mem2D {
    let mut value = [0 as pixel_t];
    let global_write_fn = get_global_write_vec1(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 1, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec2(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 2 ];
    let global_write_fn = get_global_write_vec2(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 2, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec4(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 4 ];
    let global_write_fn = get_global_write_vec4(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 4, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec8(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 8 ];
    let global_write_fn = get_global_write_vec8(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 8, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec16(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 16 ];
    let global_write_fn = get_global_write_vec16(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 16, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec32(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 32 ];
    let global_write_fn = get_global_write_vec32(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 32, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec64(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 64 ];
    let global_write_fn = get_global_write_vec64(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 64, update, read, write)
}

fn @global_Img_to_Mem2D_write_vec128(img: Img) -> Mem2D {
    let mut value = [ 0 as pixel_t; 128 ];
    let global_write_fn = get_global_write_vec128(img);
    fn @update(idx: i32) -> () { global_write_fn(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    create_Mem2D_from_img(img, 128, update, read, write)
}
