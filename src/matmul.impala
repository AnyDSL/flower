#[export]
fn main(i: i32) -> i32 {
    let l = 4;
    let m = 8;
    let n = 16;
    let A_buf = alloc_cpu((l * m) as i64 * sizeof[f32]()); // mxl
    let B_buf = alloc_cpu((m * n) as i64 * sizeof[f32]()); // nxm
    let C_buf = alloc_cpu((l * n) as i64 * sizeof[f32]()); // nxl
    let R_buf = alloc_cpu((l * n) as i64 * sizeof[f32]()); // nxl
    let A = get_mat(A_buf, l, m); // mxl
    let B = get_mat(B_buf, m, n); // nxm
    let C = get_mat(C_buf, l, n); // nxl
    let R = get_mat(R_buf, l, n); // nxl
    init_rand(bitcast[&mut[f32]](A_buf.data), A.cols(), A.rows());
    init_rand(bitcast[&mut[f32]](B_buf.data), B.cols(), B.rows());

    let nops = 2 as i64 * l as i64 * m as i64 * n as i64;
    fn print_gflops(time: i64) -> () {
        print_string("Timing: ");
        print_f64(time as f64 / 1000:f64);
        print_string(" ms\n");
        let gflops = (1.0e-9 * nops as f64) / (time as f64 * 1.0e-6);
        print_f64(gflops);
        print_string(" GFLOPS\n")
    }

    fn bench_fun(fun: fn() -> ()) = @|| {
        let start = get_micro_time();
        fun();
        let end = get_micro_time();
        print_gflops(end - start);
    };

    for bench_fun() {
        matmul_golden(R, A, B);
    }

    for bench_fun() {
        matmul_hand_tiled(C, A, B);
    }

    for bench_fun() {
        matmul_auto_tiled(C, A, B);
    }


    let mut passed = 0;
    for y in range(0, C.rows()) {
        for x in range(0, C.cols()) {
            if C.read(x, y) != R.read(x, y) {
                passed++;
            }
        }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
        display_mat(C);
    } else {
        print_string("Test FAILED!\n");
    }

    release(A_buf);
    release(B_buf);
    release(C_buf);
    release(R_buf);

    passed
}
