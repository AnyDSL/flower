type BoundaryFn   = fn(i32, i32, i32) -> BoundaryMode;
type StencilFn    = fn(Intrinsics, i32, i32, Acc, Acc, Mask) -> ();
type StencilSepFn = fn(Intrinsics, i32, i32, Acc, Acc, MaskSep, bool) -> ();
type Region       = (Boundary, Boundary);

struct RoI {
    o_x : i32,
    o_y : i32,
    width : i32,
    height : i32
}

struct Acc {
    read  : fn(i32, i32) -> pixel_t,
    write : fn(i32, i32, pixel_t) -> (),
}

struct Mask {
    data : fn(i32, i32) -> pixel_t,
    sum  : pixel_t,
    size_x : i32,
    size_y : i32,
}

struct MaskSep {
    data : fn(i32) -> pixel_t,
    sum  : pixel_t,
    size : i32,
}

enum Boundary {
    Lower, Center, Upper, Unknown
}

enum BoundaryMode {
    Index(i32),
    Const(pixel_t)
}

fn @apply_stencil(x: i32, y: i32, acc: Acc, mask: Mask) -> pixel_t {
    let mut sum = 0 as pixel_t;
    let half_range_y = mask.size_y / 2;
    let half_range_x = mask.size_x / 2;

    for j in unroll(-half_range_y, half_range_y+1) {
        for i in unroll(-half_range_x, half_range_x+1) {
            let stencil_val = mask.data(j + half_range_y, i + half_range_x);
            if stencil_val != 0 as pixel_t {
                sum += acc.read(x + i, y + j) * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        }
    }

    if (mask.sum != 1 as pixel_t) {
        sum /= mask.sum;
    }

    sum
}

fn @apply_stencil_sep(x: i32, y: i32, acc: Acc, mask: MaskSep, row: bool) -> pixel_t {
    let mut sum = 0 as pixel_t;
    let half_range = mask.size / 2;

    for i in unroll(-half_range, half_range+1) {
        let stencil_val = mask.data(i + half_range);
        if stencil_val != 0 as pixel_t {
            if row {
                sum += acc.read(x + i, y) * stencil_val;
            } else {
                sum += acc.read(x, y + i) * stencil_val;
            }
        } else {
            // additional logic for empty stencil value
        }
    }

    if (mask.sum != 1 as pixel_t) {
        sum /= mask.sum;
    }

    sum
}

// boundary handling functions
fn @get_bounds(lower: i32, upper: i32, bh_pixels: i32, boundary: Boundary) -> (i32, i32) {
    match boundary {
        Boundary::Lower  => (lower, bh_pixels),
        Boundary::Center => (bh_pixels, upper - bh_pixels),
        Boundary::Upper  => (upper - bh_pixels, upper),
        _                => undef[(i32,i32)]()
    }
}
fn @get_boundary(boundary: i32) -> Boundary {
    match boundary {
        0 => Boundary::Lower,
        1 => Boundary::Center,
        2 => Boundary::Upper,
        _ => undef[Boundary]()
    }
}
fn @iterate_1dregion(body: fn((i32, i32), Boundary) -> ()) = @|lower: i32, upper: i32, tile_size: i32| {
    if tile_size == 0 {
        let boundary:Boundary = Boundary::Center;
        @body((lower, upper), boundary)
    } else {
        for region in unroll(0, 3) {
            let boundary = get_boundary(region);
            let bounds   = get_bounds(lower, upper, tile_size, boundary);
            @body(bounds, boundary)
        }
    }
};

fn @iterate_2dregion(body: fn(((i32, i32), (i32, i32)), Region) -> ()) =
    @|(lower_row: i32, lower_col: i32), (upper_row: i32, upper_col: i32), (tile_size_row: i32, tile_size_col: i32)| {
    for bounds_row, boundary_row in iterate_1dregion(lower_row, upper_row, tile_size_row) {
        for bounds_col, boundary_col in iterate_1dregion(lower_col, upper_col, tile_size_col) {
            @body((bounds_row, bounds_col), (boundary_row, boundary_col))
        }
    }
};


fn @nobh_center (idx: i32, _lower: i32, _upper: i32) = BoundaryMode::Index(idx);
fn @clamp_lower (idx: i32, lower: i32, _upper: i32)  = BoundaryMode::Index(if idx < lower { lower } else { idx });
fn @clamp_upper (idx: i32, _lower: i32, upper: i32)  = BoundaryMode::Index(if idx >= upper { upper - 1 } else { idx });
fn @mirror_lower(idx: i32, lower: i32, _upper: i32)  = BoundaryMode::Index(if idx < lower { lower + (lower - idx-1) } else { idx });
fn @mirror_upper(idx: i32, _lower: i32, upper: i32)  = BoundaryMode::Index(if idx >= upper { upper - (idx+1 - upper) } else { idx });
fn @repeat_lower(idx: i32, lower: i32, upper: i32)   = BoundaryMode::Index(if idx < lower { idx + (lower + upper) } else { idx });
fn @repeat_upper(idx: i32, lower: i32, upper: i32)   = BoundaryMode::Index(if idx >= upper { idx - (lower + upper) } else { idx });
fn @const_lower (idx: i32, lower: i32, _upper: i32, cval: pixel_t) = if idx < lower { BoundaryMode::Const(cval) } else { BoundaryMode::Index(idx) };
fn @const_upper (idx: i32, _lower: i32, upper: i32, cval: pixel_t) = if idx >= upper { BoundaryMode::Const(cval) } else { BoundaryMode::Index(idx) };
fn @wrap_const_fun(fun: fn(i32, i32, i32, pixel_t) -> BoundaryMode, cval: pixel_t) -> BoundaryFn {
    @|idx, lower, upper| fun(idx, lower, upper, cval)
}

fn @map_boundary_mode(mode: BoundaryMode, bh_fun: fn(i32) -> BoundaryMode) -> BoundaryMode {
    match mode {
        BoundaryMode::Index(idx) => bh_fun(idx),
        BoundaryMode::Const(_val) => mode
    }
}

fn @read_pixel(x: i32, y: i32, region: Region, roi: RoI, read: fn(i32, i32) -> pixel_t, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> pixel_t {
    let lower_x = roi.o_x;
    let lower_y = roi.o_y;
    let upper_x = roi.o_x + roi.width;
    let upper_y = roi.o_y + roi.height;

    let (mode_x, mode_y) = match region {
        (row, col) => {
            let mode_x = match row {
                Boundary::Lower   => bh_lower(roi.o_x + x, lower_x, upper_x),
                Boundary::Center  => BoundaryMode::Index(roi.o_x + x),
                Boundary::Upper   => bh_upper(roi.o_x + x, lower_x, upper_x),
                Boundary::Unknown => map_boundary_mode(bh_lower(roi.o_x + x, lower_x, upper_x), @|idx| bh_upper(idx, lower_x, upper_x))
            };
            let mode_y = match col {
                Boundary::Lower   => bh_lower(roi.o_y + y, lower_y, upper_y),
                Boundary::Center  => BoundaryMode::Index(roi.o_y + y),
                Boundary::Upper   => bh_upper(roi.o_y + y, lower_y, upper_y),
                Boundary::Unknown => map_boundary_mode(bh_lower(roi.o_y + y, lower_y, upper_y), @|idx| bh_upper(idx, lower_y, upper_y))
            };
            (mode_x, mode_y)
        }
    };

    match (mode_x, mode_y) {
        (BoundaryMode::Index(x), BoundaryMode::Index(y)) => read(x, y),
        (BoundaryMode::Const(c), _) => c,
        (_, BoundaryMode::Const(c)) => c,
        //_ => undef[pixel_t]()
    }
}

// &   [pixel_t] on CPU/AVX
// &[3][pixel_t] on CUDA/NVVM & OpenCL/AMDGPU
fn @get_acc_bh_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, height: i32, region: Region, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> Acc {
    get_acc_bh_offset_memory(set_pixel, get_pixel, width, height, 0, 0, region, bh_lower, bh_upper)
}
fn @get_acc_bh_offset_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, height: i32, rox: i32, roy: i32, region: Region, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> Acc {
    Acc {
        read  = @|x, y|    read_pixel(x + rox, y + roy, region, RoI { o_x = 0, o_y = 0, width = width, height = height }, @|x, y| { get_pixel(y * width + x) }, bh_lower, bh_upper),
        write = @|x, y, v| set_pixel((y + roy) * width + x + rox, v)
    }
}
fn @get_acc_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, height: i32) -> Acc {
    get_acc_offset_memory(set_pixel, get_pixel, width, height, 0, 0)
}
fn @get_acc_offset_memory(set_pixel: fn(i32, pixel_t) -> (), get_pixel: fn(i32) -> pixel_t, width: i32, _height: i32, rox: i32, roy: i32) -> Acc {
    Acc {
        read  = @|x, y|    get_pixel((y + roy) * width + x + rox),
        write = @|x, y, v| set_pixel((y + roy) * width + x + rox, v)
    }
}

fn @sum_mask(size: i32, data: fn(i32) -> pixel_t) -> pixel_t {
    fn @sum_helper(i: i32, s: pixel_t) -> pixel_t {
        if i == size { s } else { sum_helper(i + 1, s + data(i)) }
    }
    let sum = sum_helper(0, 0 as pixel_t);
    if sum == 0 as pixel_t {
        1 as pixel_t
    } else {
        sum
    }
}

fn @get_mask3(data: [[pixel_t * 3] * 3]) -> Mask {
    let data_sum = @|x: pixel_t| -> pixel_t { data(x % 3)(x / 3) };
    Mask {
        data = @|x, y| -> pixel_t { data(y)(x) },
        sum  = sum_mask(9, data_sum),
        size_x = 3, size_y = 3
    }
}
fn @get_mask5(data: [[pixel_t * 5] * 5]) -> Mask {
    let data_sum = @|x: pixel_t| -> pixel_t { data(x % 5)(x / 5) };
    Mask {
        data = @|x, y| -> pixel_t { data(y)(x) },
        sum  = sum_mask(25, data_sum),
        size_x = 5, size_y = 5
    }
}

fn @get_mask9(data: [[pixel_t * 9] * 9]) -> Mask {
    let size = 9;
    let data_sum = @|x: pixel_t| -> pixel_t { data(x % size)(x / size) };
    Mask {
        data = @|x, y| -> pixel_t { data(y)(x) },
        sum  = sum_mask(size * size , data_sum),
        size_x = size, size_y = size
    }
}

fn @get_mask13(data: [[pixel_t * 13] * 13]) -> Mask {
    let size = 13;
    let data_sum = @|x: pixel_t| -> pixel_t { data(x % size)(x / size) };
    Mask {
        data = @|x, y| -> pixel_t { data(y)(x) },
        sum  = sum_mask(size * size , data_sum),
        size_x = size, size_y = size
    }
}

fn @get_mask_sep3(data: [pixel_t * 3]) -> MaskSep {
    let data = @|x: pixel_t| -> pixel_t { data(x) };
    MaskSep {
        data = data,
        sum  = sum_mask(3, data),
        size = 3
    }
}
fn @get_mask_sep5(data: [pixel_t * 5]) -> MaskSep {
    let data = @|x: pixel_t| -> pixel_t { data(x) };
    MaskSep {
        data = data,
        sum  = sum_mask(5, data),
        size = 5
    }
}

fn @display_image(arr : Acc, roi_x : i32, roi_y : i32) -> () {
    let width  = 10;
    let height = 10;
    let upper_x = roi_x + width;
    let upper_y = roi_y + height;

    print_string("@(x = ");
    print_i32(roi_x);
    print_string(",\t");
    print_string("y = ");
    print_i32(roi_y);
    print_string(")\n");
    for y in range(roi_y, upper_y) {
        for x in range(roi_x, upper_x) {
            let pixel = arr.read(x, y);
            print_pixel(pixel);
            print_string("\t\t");
        }
        print_string("\n");
    }
}

fn @get_RoI(offset_x: i32, offset_y: i32, width: i32, height: i32) -> RoI {
    RoI {
        o_x    = offset_x,
        o_y    = offset_y,
        width  = width,
        height = height
    }
}

fn @check(in_acc: Acc, out_acc: Acc, ref_acc: Acc, prop: RoI) -> i32 {
    let mut err_x = 0;
    let mut err_y = 0;
    let mut passed = 0;
    let _offset_y = prop.o_x * 2;
    let _offset_x = prop.o_y * 2;
    for y in range(0, prop.height) {
        for x in range(0, prop.width) {
            if y > prop.o_y - 1 && y < prop.o_y + prop.height &&
               x > prop.o_x - 1 && x < prop.o_x + prop.width {
                let ref = ref_acc.read(x, y);
                let res = out_acc.read(x, y);
                if !is_same_pixel(ref, res) && passed != 42 {
                    err_x = x; err_y = y;
                    passed = 42;
                }
            }
        }
    }

    let roi_x = 0; //arr.width - 10;
    let roi_y = 0; //arr.height - 10;
    print_string("input image:\n");
    display_image(in_acc, roi_x, roi_y);
    print_string("output image:\n");
    display_image(out_acc, roi_x, roi_y);

    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("ref image:\n");
        display_image(ref_acc, roi_x, roi_y);
        print_string("Test FAILED @ (");
        print_i32(err_x); print_string(", "); print_i32(err_y); print_string(")!\n");
        print_pixel(ref_acc.read(err_x, err_y)); print_string( " (ref) vs ");
        print_pixel(out_acc.read(err_x, err_y)); print_string( " (res)\n");
    }
    passed
}
