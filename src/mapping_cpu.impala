fn @get_device_copy[T](img: Img[T]) -> Img[T] { img }
fn @release_device_copy[T](_img: Img[T]) = @|| {};

fn @set_pixel_fn[T](img: Img[T]) = @|idx: i32, val: T| bitcast[&mut[T]](img.buf.data)(idx) = val;
fn @get_pixel_fn[T](img: Img[T]) = @|idx: i32| bitcast[&[T]](img.buf.data)(idx);
fn @set_pixel_memory_fn[T](buf: Buffer) = @|idx: i32, val:T| bitcast[&mut[T]](buf.data)(idx) = val;
fn @get_pixel_memory_fn[T](buf: Buffer) = @|idx: i32| bitcast[&[T]](buf.data)(idx);

fn @iteration_point[T](body: fn(Intrinsics, i32, i32, Acc[T], T) -> ()) = @|math: Intrinsics, out: Img[T], arr: Img[T]| {
    let out_acc = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
    let arr_acc = get_acc[T](arr, set_pixel_fn[T](arr), get_pixel_fn[T](arr));

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                let arr_pix = arr_acc.read(x, y);
                @body(math, x, y, out_acc, arr_pix);
            }
        }
    }
};

fn @iteration_point2[T]( body: fn(Intrinsics, i32, i32, Acc[T], T, T) -> ()) = @|math: Intrinsics, out: Img[T], arr0: Img[T], arr1: Img[T]| {
    let out_acc = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
    let arr0_acc = get_acc[T](arr0, set_pixel_fn[T](arr0), get_pixel_fn[T](arr0));
    let arr1_acc = get_acc[T](arr1, set_pixel_fn[T](arr1), get_pixel_fn[T](arr1));

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                let arr0_pix = arr0_acc.read(x, y);
                let arr1_pix = arr1_acc.read(x, y);
                @body(math, x, y, out_acc, arr0_pix, arr1_pix);
            }
        }
    }
};

fn @iteration_point3[T](body: fn(Intrinsics, i32, i32, Acc[T], T, T, T) -> ()) = @|math: Intrinsics, out: Img[T], arr0: Img[T], arr1: Img[T], arr2: Img[T]| {
    let out_acc  = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
    let arr0_acc = get_acc[T](arr0, set_pixel_fn[T](arr0), get_pixel_fn[T](arr0));
    let arr1_acc = get_acc[T](arr1, set_pixel_fn[T](arr1), get_pixel_fn[T](arr1));
    let arr2_acc = get_acc[T](arr2, set_pixel_fn[T](arr2), get_pixel_fn[T](arr2));

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                let arr0_pix = arr0_acc.read(x, y);
                let arr1_pix = arr1_acc.read(x, y);
                let arr2_pix = arr2_acc.read(x, y);
                @body(math, x, y, out_acc, arr0_pix, arr1_pix, arr2_pix);
            }
        }
    }
};

fn @iteration_point5[T](body: fn(Intrinsics, i32, i32, Acc[T], T, T, T, T, T) -> ()) = |math: Intrinsics, out: Img[T], arr0: Img[T], arr1: Img[T], arr2: Img[T], arr3: Img[T] ,arr4:Img[T]| {
    let out_acc = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
    let arr0_acc = get_acc[T](arr0, set_pixel_fn[T](arr0), get_pixel_fn[T](arr0));
    let arr1_acc = get_acc[T](arr1, set_pixel_fn[T](arr1), get_pixel_fn[T](arr1));
    let arr2_acc = get_acc[T](arr2, set_pixel_fn[T](arr2), get_pixel_fn[T](arr2));
    let arr3_acc = get_acc[T](arr3, set_pixel_fn[T](arr3), get_pixel_fn[T](arr3));
    let arr4_acc = get_acc[T](arr4, set_pixel_fn[T](arr4), get_pixel_fn[T](arr4));

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                let arr0_pix = arr0_acc.read(x, y);
                let arr1_pix = arr1_acc.read(x, y);
                let arr2_pix = arr2_acc.read(x, y);
                let arr3_pix = arr3_acc.read(x, y);
                let arr4_pix = arr4_acc.read(x, y);
                @body(math, x, y, out_acc, arr0_pix, arr1_pix, arr2_pix, arr3_pix, arr4_pix);
            }
        }
    }
};

fn @iteration[T](body: StencilFn[T]) = @|math: Intrinsics, out: Img[T], arr: Img[T], mask: Mask[T], bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]| {
    let out_acc = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
    let arr_acc = get_acc_bh[T](arr, set_pixel_fn[T](arr), get_pixel_fn[T](arr), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                @body(math, x, y, out_acc, arr_acc, mask);
            }
        }
    }
};


fn @iteration_bounds[T](body: StencilFn[T]) = @|math: Intrinsics, out: Img[T], arr: Img[T], mask: Mask[T], bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]| {
    // compute the number of vector strides for boundary handling
    let bhy = mask.size_y / 2;
    let bhx = round_up(mask.size_x / 2, get_vector_length());

    for benchmark_cpu() {
        for bounds, region in iterate_2dregion((0, 0), (out.width, out.height), (bhx, bhy)) {
            let ((bounds_row_lower, bounds_row_upper), (bounds_col_lower, bounds_col_upper)) = bounds;
            let arr_acc = get_acc_bh[T](arr, set_pixel_fn[T](arr), get_pixel_fn[T](arr), region, bh_lower, bh_upper);
            let out_acc = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
            //let outer_loop_fun = if region == Boundary::Center { outer_loop } else { range };
            // gets slower when computed in parallel

            for y in range(bounds_col_lower, bounds_col_upper) {
                for x in inner_loop(bounds_row_lower, bounds_row_upper) {
                    @body(math, x, y, out_acc, arr_acc, mask);
                }
            }
        }
    }
};

fn @tiled_loop(xl: i32, xu: i32, yl: i32, yu: i32, body: fn(i32, i32) -> ()) -> () {
    fn @get_step(lvl: i32) -> i32 { // size -> 2048 -> 1
        if lvl == 0 { 2048 } else { 1 }
    }
    let x_upper = xu;
    let x_lower = xl;

    fn @(?cur_lvl) tile(cur_lvl: i32, xl: i32, xu: i32, yl: i32, yu: i32) -> () {
        let step = get_step(cur_lvl);
        pe_info[i32]("step size", step);

        if step == 1 {
            for y in range(yl, yu) {
                for x in range(xl, min(xu, x_upper)) {
                    @body(x, y);
                }
            }
        } else {
            let step = if xl == x_lower { step - xl } else { step };
            for x in range_step(xl, xu, step) {
                tile(cur_lvl + 1, x, x + step, yl, yu);
            }
        }
    }

    tile(0, xl, xu, yl, yu)
}

fn @iteration_advanced[T](body: StencilFn[T]) = @|math: Intrinsics, out: Img[T], arr: Img[T], mask: Mask[T], bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]| {
    // compute the number of vector strides for boundary handling
    let bhy = mask.size_y / 2;
    let bhx = round_up(mask.size_x / 2, get_vector_length());

    for benchmark_cpu() {
        for bounds, region in iterate_2dregion((0, 0), (out.width, out.height), (bhx, bhy)) {
            let ((bounds_row_lower, bounds_row_upper), (bounds_col_lower, bounds_col_upper)) = bounds;
            let arr_acc = get_acc_bh[T](arr, set_pixel_fn[T](arr), get_pixel_fn[T](arr), region, bh_lower, bh_upper);
            let out_acc = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
            //let outer_loop_fun = if region == Boundary::Center { outer_loop } else { range };
            // gets slower when computed in parallel

            match region {
                (Boundary::Center, Boundary::Center) => tiled_loop(bounds_row_lower, bounds_row_upper, bounds_col_lower, bounds_col_upper, @|x, y| @body(math, x, y, out_acc, arr_acc, mask)),
                _ =>
                    for y in range(bounds_col_lower, bounds_col_upper) {
                        for x in inner_loop(bounds_row_lower, bounds_row_upper) {
                            @body(math, x, y, out_acc, arr_acc, mask);
                        }
                    }
            }
        }
    }
};

fn @iteration_sep[T]( body: StencilSepFn[T]) = @|math: Intrinsics, out: Img[T], arr: Img[T], mask_row: MaskSep[T], mask_col: MaskSep[T], bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]|{
    // allocate temporary array
    let tmp       = alloc_img[T](out, alloc_cpu);
    let out_acc   = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
    let tmp_acc_w = get_acc[T](tmp, set_pixel_fn[T](tmp), get_pixel_fn[T](tmp));
    let tmp_acc_r = get_acc_bh[T](tmp, set_pixel_fn[T](tmp), get_pixel_fn[T](tmp), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);
    let arr_acc   = get_acc_bh[T](arr, set_pixel_fn[T](arr), get_pixel_fn[T](arr), (Boundary::Unknown, Boundary::Unknown), bh_lower, bh_upper);

    for benchmark_cpu() {
        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                let is_row = false;
                @body(math, x, y, tmp_acc_w, arr_acc, mask_col, is_row);
            }
        }

        for y in outer_loop(0, out.height) {
            for x in inner_loop(0, out.width) {
                let is_row = true;
                @body(math, x, y, out_acc, tmp_acc_r, mask_row, is_row);
            }
        }
    }

    release(tmp.buf);
};

fn @iteration_sep_bounds[T]( body: StencilSepFn[T]) = @|math: Intrinsics, out: Img[T], arr: Img[T], mask_row: MaskSep[T], mask_col: MaskSep[T], bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]|{
    // allocate temporary array
    let tmp = alloc_img[T](out, alloc_cpu);

    // compute the number of vector strides for boundary handling
    let bhy = mask_col.size / 2;
    let bhx = round_up(mask_row.size / 2, get_vector_length());

    for benchmark_cpu() {
        for bounds, boundary_col in iterate_1dregion(0, out.height, bhy) {
            let region = (Boundary::Center, boundary_col);
            let arr_acc = get_acc_bh[T](arr, set_pixel_fn[T](arr), get_pixel_fn[T](arr), region, bh_lower, bh_upper);
            let tmp_acc = get_acc[T](tmp, set_pixel_fn[T](tmp), get_pixel_fn[T](tmp));
            let outer_loop_fun = match boundary_col { Boundary::Center => outer_loop, _ => range };
            for y in outer_loop_fun(bounds.0, bounds.1) {
                for x in inner_loop(0, out.width) {
                    let is_row = false;
                    @body(math, x, y, tmp_acc, arr_acc, mask_col, is_row);
                }
            }
        }

        for bounds, boundary_row in iterate_1dregion(0, out.width, bhx) {
            let region = (boundary_row, Boundary::Center);
            let tmp_acc = get_acc_bh[T](tmp, set_pixel_fn[T](tmp), get_pixel_fn[T](tmp), region, bh_lower, bh_upper);
            let out_acc = get_acc[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out));
            let outer_loop_fun = match boundary_row { Boundary::Center => outer_loop, _ => range };
            for y in outer_loop_fun(0, out.height) {
                for x in inner_loop(bounds.0, bounds.1) {
                    let is_row = true;
                    @body(math, x, y, out_acc, tmp_acc, mask_row, is_row);
                }
            }
        }
    }

    release(tmp.buf);
};

fn @iteration_sep_advanced[T]( body: StencilSepFn[T]) = @|math: Intrinsics, out: Img[T], arr: Img[T], mask_row: MaskSep[T], mask_col: MaskSep[T], bh_lower: BoundaryFn[T], bh_upper: BoundaryFn[T]| {
    // compute the number of vector strides for boundary handling
    let coarsening_factor = 1;
    let bhy = round_up(mask_col.size / 2, coarsening_factor);
    let bhx = round_up(mask_row.size / 2, get_vector_length());

    for benchmark_cpu() {
        for bounds_col, boundary_col in iterate_1dregion(0, out.height, bhy) {
            let region_col = (Boundary::Center, boundary_col);
            let (outer_col, inner_col) = match boundary_col { Boundary::Center => (outer_loop_step, inner_loop), _ => (range_step, range) };
            for y in outer_col(bounds_col.0, bounds_col.1, coarsening_factor) {
                // allocate temporary array per thread
                let tmp = alloc_cpu((out.width * coarsening_factor) as i64 * sizeof[T]());

                for x in inner_col(0, out.width) {
                    let is_row = false;

                    // index space: cache line
                    let arr_acc = get_acc_bh_offset[T](arr, set_pixel_fn[T](arr), get_pixel_fn[T](arr), 0, y, region_col, bh_lower, bh_upper);
                    let tmp_acc = get_acc_memory[T](set_pixel_memory_fn[T](tmp), get_pixel_memory_fn[T](tmp), out.width, coarsening_factor);
                    for i in unroll(0, coarsening_factor) {
                        @body(math, x, i, tmp_acc, arr_acc, mask_col, is_row);
                    }
                }
                for bounds_row, boundary_row in iterate_1dregion(0, out.width, bhx) {
                    let region_row = (boundary_row, Boundary::Center);
                    let inner_row  = match boundary_row { Boundary::Center => inner_loop, _ => range };
                    for x in inner_row(bounds_row.0, bounds_row.1) {
                        let is_row = true;

                        // index space: cache line
                        let tmp_acc = get_acc_bh_memory[T](set_pixel_memory_fn[T](tmp), get_pixel_memory_fn[T](tmp), out.width, coarsening_factor, region_row, bh_lower, bh_upper);
                        let out_acc = get_acc_offset[T](out, set_pixel_fn[T](out), get_pixel_fn[T](out), 0, y);
                        for i in unroll(0, coarsening_factor) {
                            @body(math, x, i, out_acc, tmp_acc, mask_row, is_row);
                        }
                    }
                }
                release(tmp);
            }
        }
    }
};
