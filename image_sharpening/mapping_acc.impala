fn iteration1f1i(out: Img, arr: Imgi16,
                 body: fn(int, int, Acc, Acci16) -> ()
                ) -> () {
    let unroll = 1;
    let grid   = (out.width, out.height/unroll, 1);
    let block  = (32, 4, 1);

    let out = Img    { data : mmap_f32(out.data, acc_dev(), acc_mem(), 0, 0), width : out.width, height : out.height, stride : out.stride };
    let arr = Imgi16 { data : mmap_i16(arr.data, acc_dev(), acc_mem(), 0, 0), width : arr.width, height : arr.height, stride : arr.stride };

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let out_acc = get_acc    (out, 10);
            let arr_acc = get_acc_i16(arr, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), out_acc, arr_acc);
            }
        });
    }

    munmap_f32(out.data);
    munmap_i16(arr.data);
}
fn iteration2i(out: Imgi16, arr: Imgi16,
               body: fn(int, int, Acci16, Acci16) -> ()
              ) -> () {
    let unroll = 1;
    let grid   = (out.width, out.height/unroll, 1);
    let block  = (32, 4, 1);

    let out = Imgi16 { data : mmap_i16(out.data, acc_dev(), acc_mem(), 0, 0), width : out.width, height : out.height, stride : out.stride };
    let arr = Imgi16 { data : mmap_i16(arr.data, acc_dev(), acc_mem(), 0, 0), width : arr.width, height : arr.height, stride : arr.stride };

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let out_acc = get_acc_i16(out, 10);
            let arr_acc = get_acc_i16(arr, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), out_acc, arr_acc);
            }
        });
    }

    munmap_i16(out.data);
    munmap_i16(arr.data);
}
fn iteration2i1m(out: Imgi16, img: Imgi16, map: Img,
                 body: fn(int, int, Acci16, Acci16, Acc) -> ()
                ) -> () {
    let unroll = 1;
    let grid   = (out.width, out.height/unroll, 1);
    let block  = (32, 4, 1);

    let out = Imgi16 { data : mmap_i16(out.data, acc_dev(), acc_mem(), 0, 0), width : out.width, height : out.height, stride : out.stride };
    let img = Imgi16 { data : mmap_i16(img.data, acc_dev(), acc_mem(), 0, 0), width : img.width, height : img.height, stride : img.stride };
    let map = Img    { data : mmap_f32(map.data, acc_dev(), acc_mem(), 0, 0), width : map.width, height : map.height, stride : map.stride };

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let out_acc = get_acc_i16(out, 10);
            let img_acc = get_acc_i16(img, 10);
            let map_acc = get_acc    (map, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), out_acc, img_acc, map_acc);
            }
        });
    }

    munmap_i16(out.data);
    munmap_i16(img.data);
    munmap_f32(map.data);
}
fn iteration3i(out: Imgi16, img: Imgi16, tmp: Imgi16,
               body: fn(int, int, Acci16, Acci16, Acci16) -> ()
              ) -> () {
    let unroll = 1;
    let grid   = (out.width, out.height/unroll, 1);
    let block  = (32, 4, 1);

    let out = Imgi16 { data : mmap_i16(out.data, acc_dev(), acc_mem(), 0, 0), width : out.width, height : out.height, stride : out.stride };
    let img = Imgi16 { data : mmap_i16(img.data, acc_dev(), acc_mem(), 0, 0), width : img.width, height : img.height, stride : img.stride };
    let tmp = Imgi16 { data : mmap_i16(tmp.data, acc_dev(), acc_mem(), 0, 0), width : tmp.width, height : tmp.height, stride : tmp.stride };

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let out_acc = get_acc_i16(out, 10);
            let img_acc = get_acc_i16(img, 10);
            let tmp_acc = get_acc_i16(tmp, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), out_acc, img_acc, tmp_acc);
            }
        });
    }

    munmap_i16(out.data);
    munmap_i16(img.data);
    munmap_i16(tmp.data);
}
fn reduce(img: Imgi16, body: fn(int, int, Imgi16) -> int) -> int {
    // temporary memory for reduction
    let tmp_mem =  ~[img.width:int];
    let mut tmp = mmap_i32(tmp_mem, acc_dev(), acc_mem(), 0, 0);

    let img = Imgi16 { data : mmap_i16(img.data, acc_dev(), acc_mem(), 0, 0), width : img.width, height : img.height, stride : img.stride };

    // reduce all lines to temporary memory
    let grid1  = (img.width, 1, 1);
    let block1 = (128, 1, 1);
    for benchmark_acc() {
        acc(acc_dev(), grid1, block1, || @{
            let img_acc = get_acc_i16(img, 4);
            let mut sum = 0;
            for y in $range(0, img.height) @{
                sum += body(acc_gidx(), y, img);
            }
            tmp(acc_gidx()) = sum;
        });
    }

    // reduce temporary memory
    let grid2  = (img.width, 1, 1);
    let block2 = (128, 1, 1);
    for benchmark_acc() {
        acc(acc_dev(), grid2, block2, || @{
            let mut sum = 0;
            for x in $range(0, img.width) @{
                sum += tmp(x);
            }
            tmp(0) = sum;
        });
    }

    munmap_i32(tmp);
    munmap_i16(img.data);

    // return sum stored in first element
    let sum = tmp_mem(0);
    sum
}
fn hist(img: Img, body: fn(int, int, Img) -> int) -> &[int] {
    let mut bins = ~[256: int];
    for i in $range(0, 256) { bins(i) = 0; }

    // create histogram in shared memory first and store then to global memory
    let mut gpu_bins = mmap_i32(bins, acc_dev(), acc_mem(), 0, 0);

    let grid   = (img.width, 1, 1);
    let block  = (256, 1, 1);
    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let mut sm_bins = mmap_i32(bins, acc_dev(), acc_spm(), 256, 1);
            for y in $range(0, img.height) @{
                let bin = body(acc_gidx(), y, img);
                atomic_add_local(&sm_bins(bin), 1);
            }
            atomic_add_global(&gpu_bins(acc_tidx()), sm_bins(acc_tidx()));
        });
    }

    munmap_i32(gpu_bins);

    bins
}
fn inclusive_scan(img: &[int], size: int, body: fn(int, &[int]) -> int) -> &[int] {
    let arr = ~[size: int];
    let mut gpu_arr = mmap_i32(arr, acc_dev(), acc_mem(), 0, 0);

    // perform scan per block in shared memory first
    let block_size = 256;
    let num_blocks = size / (2 * block_size);
    let tmp = ~[num_blocks: int];
    let mut gpu_tmp = mmap_i32(tmp, acc_dev(), acc_mem(), 0, 0);

    fn for_shift_down(a: int, b: int, yield: fn(int, fn())) -> () {
        if a > b {
            yield(a);
            for_shift_down(a>>1, b, yield, return)
        }
    }
    fn for_shift_up(a: int, b: int, yield: fn(int, fn())) -> () {
        if a < b {
            yield(a);
            for_shift_up(a<<1, b, yield, return)
        }
    }

    let grid   = (size / 2, 1, 1);
    let block  = (block_size, 1, 1);
    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let gid = acc_gidx();
            let tid = acc_tidx();
            let sm_size = 2 * block_size;
            let mut sm_arr = mmap_i32(arr, acc_dev(), acc_spm(), sm_size, 1);

            // load input into shared memory
            sm_arr(2 * tid)     = gpu_arr(2 * gid);
            sm_arr(2 * tid + 1) = gpu_arr(2 * gid + 1);

            let mut offset = 1;
            for d in for_shift_down(sm_size >> 1, 0) { // build sum in place up the tree
                acc_barrier();
                if tid < d @{
                    let ai = offset * (2 * tid + 1) - 1;
                    let bi = offset * (2 * tid + 2) - 1;
                    sm_arr(bi) += sm_arr(ai);
                }
                offset *= 2;
            }

            // clear the last element: exclusive scan only
            // if tid == 0 { sm_arr(sm_size - 1) = 0; }

            // traverse down tree & build scan
            for d in for_shift_up(1, sm_size) {
                offset >>= 1;
                acc_barrier();
                if tid < d @{
                    let ai = offset * (2 * tid + 1) - 1;
                    let bi = offset * (2 * tid + 2) - 1;
                    let tmp = sm_arr(ai);
                    sm_arr(ai) = sm_arr(bi);
                    sm_arr(bi) += tmp;
                }
            }

            acc_barrier();

            // write results to device memory
            if tid == 0 @{
                gpu_tmp(acc_bidx()) = sm_arr(sm_size - 1);
            }
            gpu_arr(2 * gid)     = sm_arr(2 * tid);
            gpu_arr(2 * gid + 1) = sm_arr(2 * tid + 1);
        });
    }

    if num_blocks > 1 {
        // perform scan on block scan results
        let grid1 = (num_blocks, 1, 1);
        let block1 = (num_blocks, 1, 1);
        for benchmark_acc() {
            acc(acc_dev(), grid1, block1, || @{
                let tid = acc_tidx();
                let sm_size = num_blocks;
                let mut sm_arr = mmap_i32(arr, acc_dev(), acc_spm(), sm_size, 1);

                // load input into shared memory
                sm_arr(tid) = gpu_tmp(tid);

                acc_barrier();

                if tid == 0 @{
                    let mut sum = sm_arr(0);
                    for d in range(1, sm_size) {
                        sum += sm_arr(d);
                        sm_arr(d) = sum;
                    }
                }

                acc_barrier();

                // write results to device memory
                gpu_tmp(tid) = sm_arr(tid);
            });
        }

        // add block scan results to array
        let grid2  = ((num_blocks-1) * block_size, 1, 1);
        let block2 = (block_size, 1, 1);
        for benchmark_acc() {
            acc(acc_dev(), grid2, block2, || @{
                let tid = acc_tidx();
                let gid = acc_gidx() + block_size; // first block hold already the correct scan results
                let mut add = mmap_i32(arr, acc_dev(), acc_spm(), 1, 1);

                if tid == 0 @{
                    add(0) = gpu_tmp(acc_bidx());
                }

                acc_barrier();

                // write results to device memory
                gpu_arr(gid) += add(0);
            });
        }
    }

    munmap_i32(gpu_arr);
    munmap_i32(gpu_tmp);

    arr
}
fn find_position(img: &[int], size: int, body: fn(int, &[int]) -> int) -> int {
    let mut elem = ~[1: int];
    elem(0) = size;

    // create global array for the element
    let mut gpu_elem = mmap_i32(elem, acc_dev(), acc_mem(), 0, 0);

    let grid   = (size, 1, 1);
    let block  = (256, 1, 1);
    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            if body(acc_gidx(), img) != 0 @{
                atomic_min_global(&gpu_elem(0), acc_gidx());
            }
        });
    }

    munmap_i32(gpu_elem);

    elem(0)
}
