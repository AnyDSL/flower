type Mask = Mask5;
type MaskSep = Mask5Sep;

struct Imgi16 {
    data : &[i16],
    width : int,
    height : int,
    stride : int,
}
struct Acci16 {
    img : Imgi16,
    roi : RoI,
    rox : int,
    roy : int,
    region : int,
}

fn get_acc_i16(img: Imgi16, region : int) -> Acci16 {
    Acci16 { img : img, roi : RoI { o_x : 0, o_y : 0, width : img.width, height : img.height }, rox : 0, roy : 0, region : region }
}
fn get_pixel_i16(acc: Acci16, x: int, y: int,
                 bh_lower: fn(int, int, int, fn(i16)) -> int,
                 bh_upper: fn(int, int, int, fn(i16)) -> int
                ) -> i16 {
    let mut idx_x = acc.roi.o_x + acc.rox + x;
    let mut idx_y = acc.roi.o_y + acc.roy + y;

    let lower_x = acc.roi.o_x;
    let lower_y = acc.roi.o_y;
    let upper_x = acc.roi.o_x + acc.roi.width;
    let upper_y = acc.roi.o_y + acc.roi.height;

    // 0 --- 1 --- 2
    // 3 --- 4 --- 5
    // 6 --- 7 --- 8

    // left
    if acc.region == 0 { idx_x = bh_lower(idx_x, lower_x, upper_x, return); }
    if acc.region == 3 { idx_x = bh_lower(idx_x, lower_x, upper_x, return); }
    if acc.region == 6 { idx_x = bh_lower(idx_x, lower_x, upper_x, return); }

    // right
    if acc.region == 2 { idx_x = bh_upper(idx_x, lower_x, upper_x, return); }
    if acc.region == 5 { idx_x = bh_upper(idx_x, lower_x, upper_x, return); }
    if acc.region == 8 { idx_x = bh_upper(idx_x, lower_x, upper_x, return); }

    // top
    if acc.region == 0 { idx_y = bh_lower(idx_y, lower_y, upper_y, return); }
    if acc.region == 1 { idx_y = bh_lower(idx_y, lower_y, upper_y, return); }
    if acc.region == 2 { idx_y = bh_lower(idx_y, lower_y, upper_y, return); }

    // bottom
    if acc.region == 6 { idx_y = bh_upper(idx_y, lower_y, upper_y, return); }
    if acc.region == 7 { idx_y = bh_upper(idx_y, lower_y, upper_y, return); }
    if acc.region == 8 { idx_y = bh_upper(idx_y, lower_y, upper_y, return); }

    // all in
    if acc.region == 10 {
        idx_x = bh_lower(idx_x, lower_x, upper_x, return);
        idx_x = bh_upper(idx_x, lower_x, upper_x, return);
        idx_y = bh_lower(idx_y, lower_y, upper_y, return);
        idx_y = bh_upper(idx_y, lower_y, upper_y, return);
    }

    acc.img.data(idx_y*acc.img.stride + idx_x)
}
fn set_pixel(mut acc: Acci16, x: int, y: int, val: i16) -> () {
    acc.img.data((acc.roi.o_y + acc.roy + y)*acc.img.stride + acc.roi.o_x + acc.rox + x) = val
}
fn get_pixel_f32(acc: Acc, x: int, y: int) -> f32 {
    acc.img.data((acc.roi.o_y + acc.roy + y)*acc.img.stride + acc.roi.o_x + acc.rox + x)
}
fn set_pixel_f32(mut acc: Acc, x: int, y: int, val: f32) -> () {
    acc.img.data((acc.roi.o_y + acc.roy + y)*acc.img.stride + acc.roi.o_x + acc.rox + x) = val
}
fn nobh_center_i16 (idx: int, lower: int, upper: int, out: fn(i16)) -> int { idx }
fn clamp_lower_i16 (idx: int, lower: int, upper: int, out: fn(i16)) -> int {
    if idx < lower { lower } else { idx }
}
fn clamp_upper_i16 (idx: int, lower: int, upper: int, out: fn(i16)) -> int {
    if idx >= upper { upper - 1 } else { idx }
}
fn mirror_lower_i16(idx: int, lower: int, upper: int, out: fn(i16)) -> int {
    if idx < lower { lower + (lower - idx-1) } else { idx }
}
fn mirror_upper_i16(idx: int, lower: int, upper: int, out: fn(i16)) -> int {
    if idx >= upper { upper - (idx+1 - upper) } else { idx }
}

// conditional swap using pointers
fn swap_if(mut a: &i16, mut b: &i16) -> () {
    if *a < *b {
        let tmp = a;
        a = b;
        b = tmp;
    }
}

fn qcod(x: int, y: int, map: Acc, img: Acci16) -> () {
    let mut r0  = get_pixel_i16(img, x-2, y-2, mirror_lower_i16, mirror_upper_i16);
    let mut r1  = get_pixel_i16(img, x-1, y-2, mirror_lower_i16, mirror_upper_i16);
    let mut r2  = get_pixel_i16(img, x  , y-2, mirror_lower_i16, mirror_upper_i16);
    let mut r3  = get_pixel_i16(img, x+1, y-2, mirror_lower_i16, mirror_upper_i16);
    let mut r4  = get_pixel_i16(img, x+2, y-2, mirror_lower_i16, mirror_upper_i16);
    let mut r5  = get_pixel_i16(img, x-2, y-1, mirror_lower_i16, mirror_upper_i16);
    let mut r6  = get_pixel_i16(img, x-1, y-1, mirror_lower_i16, mirror_upper_i16);
    let mut r7  = get_pixel_i16(img, x  , y-1, mirror_lower_i16, mirror_upper_i16);
    let mut r8  = get_pixel_i16(img, x+1, y-1, mirror_lower_i16, mirror_upper_i16);
    let mut r9  = get_pixel_i16(img, x+2, y-1, mirror_lower_i16, mirror_upper_i16);
    let mut r10 = get_pixel_i16(img, x-2, y  , mirror_lower_i16, mirror_upper_i16);
    let mut r11 = get_pixel_i16(img, x-1, y  , mirror_lower_i16, mirror_upper_i16);
    let mut r12 = get_pixel_i16(img, x  , y  , mirror_lower_i16, mirror_upper_i16);
    let mut r13 = get_pixel_i16(img, x+1, y  , mirror_lower_i16, mirror_upper_i16);
    let mut r14 = get_pixel_i16(img, x+2, y  , mirror_lower_i16, mirror_upper_i16);
    let mut r15 = get_pixel_i16(img, x-2, y+1, mirror_lower_i16, mirror_upper_i16);
    let mut r16 = get_pixel_i16(img, x-1, y+1, mirror_lower_i16, mirror_upper_i16);
    let mut r17 = get_pixel_i16(img, x  , y+1, mirror_lower_i16, mirror_upper_i16);
    let mut r18 = get_pixel_i16(img, x+1, y+1, mirror_lower_i16, mirror_upper_i16);
    let mut r19 = get_pixel_i16(img, x+2, y+1, mirror_lower_i16, mirror_upper_i16);
    let mut r20 = get_pixel_i16(img, x-2, y+2, mirror_lower_i16, mirror_upper_i16);
    let mut r21 = get_pixel_i16(img, x-1, y+2, mirror_lower_i16, mirror_upper_i16);
    let mut r22 = get_pixel_i16(img, x  , y+2, mirror_lower_i16, mirror_upper_i16);
    let mut r23 = get_pixel_i16(img, x+1, y+2, mirror_lower_i16, mirror_upper_i16);
    let mut r24 = get_pixel_i16(img, x+2, y+2, mirror_lower_i16, mirror_upper_i16);

    // sorting network using "Best" algorithm according to
    // http://pages.ripco.net/~jgamble/nw.html
    swap_if(&r1,  &r2);
    swap_if(&r0,  &r2);
    swap_if(&r0,  &r1);
    swap_if(&r4,  &r5);
    swap_if(&r3,  &r5);
    swap_if(&r3,  &r4);
    swap_if(&r0,  &r3);
    swap_if(&r1,  &r4);
    swap_if(&r2,  &r5);
    swap_if(&r2,  &r4);
    swap_if(&r1,  &r3);
    swap_if(&r2,  &r3);
    swap_if(&r7,  &r8);
    swap_if(&r6,  &r8);
    swap_if(&r6,  &r7);
    swap_if(&r10, &r11);
    swap_if(&r9,  &r11);
    swap_if(&r9,  &r10);
    swap_if(&r6,  &r9);
    swap_if(&r7,  &r10);
    swap_if(&r8,  &r11);
    swap_if(&r8,  &r10);
    swap_if(&r7,  &r9);
    swap_if(&r8,  &r9);
    swap_if(&r0,  &r6);
    swap_if(&r1,  &r7);
    swap_if(&r2,  &r8);
    swap_if(&r2,  &r7);
    swap_if(&r1,  &r6);
    swap_if(&r2,  &r6);
    swap_if(&r3,  &r9);
    swap_if(&r4,  &r10);
    swap_if(&r5,  &r11);
    swap_if(&r5,  &r10);
    swap_if(&r4,  &r9);
    swap_if(&r5,  &r9);
    swap_if(&r3,  &r6);
    swap_if(&r4,  &r7);
    swap_if(&r5,  &r8);
    swap_if(&r5,  &r7);
    swap_if(&r4,  &r6);
    swap_if(&r5,  &r6);
    swap_if(&r13, &r14);
    swap_if(&r12, &r14);
    swap_if(&r12, &r13);
    swap_if(&r16, &r17);
    swap_if(&r15, &r17);
    swap_if(&r15, &r16);
    swap_if(&r12, &r15);
    swap_if(&r13, &r16);
    swap_if(&r14, &r17);
    swap_if(&r14, &r16);
    swap_if(&r13, &r15);
    swap_if(&r14, &r15);
    swap_if(&r19, &r20);
    swap_if(&r18, &r20);
    swap_if(&r18, &r19);
    swap_if(&r21, &r22);
    swap_if(&r23, &r24);
    swap_if(&r21, &r23);
    swap_if(&r22, &r24);
    swap_if(&r22, &r23);
    swap_if(&r18, &r22);
    swap_if(&r18, &r21);
    swap_if(&r19, &r23);
    swap_if(&r20, &r24);
    swap_if(&r20, &r23);
    swap_if(&r19, &r21);
    swap_if(&r20, &r22);
    swap_if(&r20, &r21);
    swap_if(&r12, &r19);
    swap_if(&r12, &r18);
    swap_if(&r13, &r20);
    swap_if(&r14, &r21);
    swap_if(&r14, &r20);
    swap_if(&r13, &r18);
    swap_if(&r14, &r19);
    swap_if(&r14, &r18);
    swap_if(&r15, &r22);
    swap_if(&r16, &r23);
    swap_if(&r17, &r24);
    swap_if(&r17, &r23);
    swap_if(&r16, &r22);
    swap_if(&r17, &r22);
    swap_if(&r15, &r19);
    swap_if(&r15, &r18);
    swap_if(&r16, &r20);
    swap_if(&r17, &r21);
    swap_if(&r17, &r20);
    swap_if(&r16, &r18);
    swap_if(&r17, &r19);
    swap_if(&r17, &r18);
    swap_if(&r0,  &r13);
    swap_if(&r0,  &r12);
    swap_if(&r1,  &r14);
    swap_if(&r2,  &r15);
    swap_if(&r2,  &r14);
    swap_if(&r1,  &r12);
    swap_if(&r2,  &r13);
    swap_if(&r2,  &r12);
    swap_if(&r3,  &r16);
    swap_if(&r4,  &r17);
    swap_if(&r5,  &r18);
    swap_if(&r5,  &r17);
    swap_if(&r4,  &r16);
    swap_if(&r5,  &r16);
    swap_if(&r3,  &r13);
    swap_if(&r3,  &r12);
    swap_if(&r4,  &r14);
    swap_if(&r5,  &r15);
    swap_if(&r5,  &r14);
    swap_if(&r4,  &r12);
    swap_if(&r5,  &r13);
    swap_if(&r5,  &r12);
    swap_if(&r6,  &r19);
    swap_if(&r7,  &r20);
    swap_if(&r8,  &r21);
    swap_if(&r8,  &r20);
    swap_if(&r7,  &r19);
    swap_if(&r8,  &r19);
    swap_if(&r9,  &r22);
    swap_if(&r10, &r23);
    swap_if(&r11, &r24);
    swap_if(&r11, &r23);
    swap_if(&r10, &r22);
    swap_if(&r11, &r22);
    swap_if(&r9,  &r19);
    swap_if(&r10, &r20);
    swap_if(&r11, &r21);
    swap_if(&r11, &r20);
    swap_if(&r10, &r19);
    swap_if(&r11, &r19);
    swap_if(&r6,  &r13);
    swap_if(&r6,  &r12);
    swap_if(&r7,  &r14);
    swap_if(&r8,  &r15);
    swap_if(&r8,  &r14);
    swap_if(&r7,  &r12);
    swap_if(&r8,  &r13);
    swap_if(&r8,  &r12);
    swap_if(&r9,  &r16);
    swap_if(&r10, &r17);
    swap_if(&r11, &r18);
    swap_if(&r11, &r17);
    swap_if(&r10, &r16);
    swap_if(&r11, &r16);
    swap_if(&r9,  &r13);
    swap_if(&r9,  &r12);
    swap_if(&r10, &r14);
    swap_if(&r11, &r15);
    swap_if(&r11, &r14);
    swap_if(&r10, &r12);
    swap_if(&r11, &r13);
    swap_if(&r11, &r12);

    let Q1 = (r5 + r6) as f32 / 2.0f;
    let Q3 = (r18 + r19) as f32 / 2.0f;

    set_pixel_f32(map, x, y, (Q3 - Q1) / (Q3 + Q1));
}

fn sobel(x: int, y: int, tmp: Acci16, img: Acci16) -> () {
    let mask_x  = [[-1,  0, +1],
                   [-2,  0, +2],
                   [-1,  0, +1]];
    let mask_y  = [[+1, +2, +1],
                   [ 0,  0,  0],
                   [-1, -2, -1]];
    let ksizeh  = 1;
    let mut g_x = 0;
    let mut g_y = 0;
    for ym in range(-ksizeh, ksizeh+1) {
        for xm in range(-ksizeh, ksizeh+1) {
            let val_x = mask_x(xm + ksizeh)(ym + ksizeh);
            let val_y = mask_y(xm + ksizeh)(ym + ksizeh);
            if val_x != 0 {
                g_x += get_pixel_i16(img, x + xm, y + ym, mirror_lower_i16, mirror_upper_i16) as int * val_x;
            }
            if val_y != 0 {
                g_y += get_pixel_i16(img, x + xm, y + ym, mirror_lower_i16, mirror_upper_i16) as int * val_y;
            }
        }
    }

    //let g = fabsf((g_x + g_y) as float) / 4.0f as i16;
    //let g = sqrtf((g_x * g_x + g_y * g_y) as float) / 5.66f as i16;
    let g = sqrtf((g_x * g_x + g_y * g_y) as float) as i16;

    // thresholding - we want no gradient image in this case
    let val = if g > 150i16 { 1i16 } else { 0i16 };

    set_pixel(tmp, x, y, val);
}

fn filter(x: int, y: int, tmp: Acci16, img: Acci16, map: Acc, threshold: f32, ksize: int) -> () {
    let val = get_pixel_f32(map, x, y);
    let ksizeh = ksize / 2;
    if val > threshold {
        for i in @range(0, 1) {
        let mut sum = 0i16;
        for ym in range(-ksizeh, ksizeh+1) {
            for xm in range(-ksizeh, ksizeh+1) {
                sum += get_pixel_i16(img, x + xm, y + ym, mirror_lower_i16, mirror_upper_i16);
            }
        }
        set_pixel(tmp, x, y, (sum as float / ((ksize * ksize) as float)) as i16);
        }
    } else {
        for i in @range(0, 1) {
        set_pixel(tmp, x, y, get_pixel_i16(img, x, y, nobh_center_i16, nobh_center_i16));
        }
    }
}

fn sharpen(x: int, y: int, out: Acci16, img: Acci16, blur: Acci16) -> () {
    let val_img  = get_pixel_i16(img,  x, y, nobh_center_i16, nobh_center_i16);
    let val_blur = get_pixel_i16(blur, x, y, nobh_center_i16, nobh_center_i16);
    set_pixel(out, x, y, val_img + (val_img - val_blur));
}


extern
fn thorin_sharpening(input: &[i16], output: &[i16], width: int, height: int) -> () {
    let img     = Imgi16 { data : input,                  width : width, height : height, stride : width };
    let out     = Imgi16 { data : output,                 width : width, height : height, stride : width };
    let tmp     = Imgi16 { data : ~[width * height: i16], width : width, height : height, stride : width };
    let map     = Img    { data : ~[width * height: f32], width : width, height : height, stride : width };
    let mask    = Mask   { data : [[1.0f, .. 5], .. 5], size_x : 5, size_y : 5 };

    fn sharpening() -> () {
        // first step: compute quartile coefficient of dispersion (QCOD)
        for x, y, map, img in iteration1f1i(map, img) {
            qcod(x, y, map, img);
        }

        // second step: TODO: apply Canny
        for x, y, tmp, img in iteration2i(tmp, img) {
            sobel(x, y, tmp, img);
        }

        // counting number of non-edge pixels
        let bw_count =
            for x, y, tmp in reduce(tmp) {
                if tmp.data(y * tmp.stride + x) == 0i16 { 1 } else { 0 }
            };
        thorin_print_gflops(bw_count as f32);


        // calculate histogram
        let hist =
            for x, y, map in hist(map) {
                (map.data(y * tmp.stride + x) * 255.0f) as i32
            };

        // cumulative sum of the QCOD values (prefix sum)
        let sum_count =
            for x, arr in inclusive_scan(hist, 256) {
                arr(x)
            };
        let bin =
            for x, arr in find_position(sum_count, 256) {
                if arr(x) > bw_count { 1 } else { 0 }
            };

        // apply filter
        let threshold = bin as float / 256.0f;
        for x, y, tmp, img, map in iteration2i1m(tmp, img, map) {
            let ksize = 5;
            filter(x, y, tmp, img, map, threshold, ksize);
        }

        // sharpen image
        for x, y, out, img, tmp in iteration3i(out, img, tmp) {
            sharpen(x, y, out, img, tmp);
        }
    }
    @sharpening();
}

