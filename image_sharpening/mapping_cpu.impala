fn iteration1f1i(out: Img, arr: Imgi16,
                 body : fn(int, int, Acc, Acci16) -> ()
                ) -> () {
    let out_acc = get_acc    (out, 10);
    let arr_acc = get_acc_i16(arr, 10);

    for benchmark() {
        for y in $outer_loop(0, out.height) {
            for x in $inner_loop(0, out.width) @{
                body(x, y, out_acc, arr_acc);
            }
        }
    }
}
fn iteration2i(out: Imgi16, arr: Imgi16,
               body : fn(int, int, Acci16, Acci16) -> ()
              ) -> () {
    let out_acc = get_acc_i16(out, 10);
    let arr_acc = get_acc_i16(arr, 10);

    for benchmark() {
        for y in $outer_loop(0, out.height) {
            for x in $inner_loop(0, out.width) @{
                body(x, y, out_acc, arr_acc);
            }
        }
    }
}
fn iteration2i1m(out: Imgi16, img: Imgi16, map: Img,
                 body : fn(int, int, Acci16, Acci16, Acc) -> ()
                ) -> () {
    let out_acc = get_acc_i16(out, 10);
    let img_acc = get_acc_i16(img, 10);
    let map_acc = get_acc    (map, 10);

    for benchmark() {
        for y in $outer_loop(0, out.height) {
            for x in $inner_loop(0, out.width) @{
                body(x, y, out_acc, img_acc, map_acc);
            }
        }
    }
}
fn iteration3i(out: Imgi16, img: Imgi16, tmp: Imgi16,
               body : fn(int, int, Acci16, Acci16, Acci16) -> ()
              ) -> () {
    let out_acc = get_acc_i16(out, 10);
    let img_acc = get_acc_i16(img, 10);
    let tmp_acc = get_acc_i16(tmp, 10);

    for benchmark() {
        for y in $outer_loop(0, out.height) {
            for x in $inner_loop(0, out.width) @{
                body(x, y, out_acc, img_acc, tmp_acc);
            }
        }
    }
}
fn reduce(tmp: Imgi16, body: fn(int, int, Imgi16) -> int) -> int {
    let mut sum = 0;
    for y in $range(0, tmp.height) {
        for x in $inner_loop(0, tmp.width) @{
            sum += body(x, y, tmp);
        }
    }
    sum
}
fn hist(img: Img, body: fn(int, int, Img) -> int) -> &[int] {
    let mut bins = ~[256: int];
    for i in $range(0, 256) { bins(i) = 0; }
    for y in $range(0, img.height) {
        for x in $range(0, img.width) @{
            let bin = body(x, y, img);
            bins(bin)++;
        }
    }
    bins
}
fn inclusive_scan(img: &[int], size: int, body: fn(int, &[int]) -> int) -> &[int] {
    let mut arr = ~[size: int];
    arr(0) = body(0, img);
    for i in $range(1, size) { arr(i) = arr(i-1) + body(i, img); }
    arr
}
fn find_position(img: &[int], size: int, body: fn(int, &[int]) -> int) -> int {
    for i in $range(0, size) { if body(i, img) != 0 { return(i) } }
    size
}
