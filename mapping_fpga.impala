static coarsening_policy = FetchAndCalc;// FetchAndCalc, FetchAndCalc_nobh, CalcAndPack, CalcAndPack_nobh;
fn @pragma_pipeline() -> () {
   if is_opencl() { print_pragma("#pragma ii 1"); };
   if is_hls() { print_pragma("#pragma HLS pipeline II=1"); };
}
// ---------------------------- types ------------------------------------------
// border handling
type Bounds = (int, int);
type get_bounds_fun_type = fn(Boundary) -> Bounds;
type pixel_read_type  = fn(int, int, Boundary, Bounds, fn(int) -> pixel_t) -> pixel_t;
type row_sel_fun_type = fn(int, brdr_assigns_type) -> ();
type crsn_type = fn(Intrinsics, Mem2D, Mem2D, int, Mask, int, BoundaryFn, BoundaryFn, StencilFn) -> coarsening_type;
type brdr_assigns_type = fn(int, Boundary, int, int) -> ();
// ---------------------------- structs ----------------------------------------
// memory access
struct Mem2D {
    read    : fn(int) -> pixel_t,
    write   : fn(int, pixel_t) -> (),
    update  : fn(int) -> (),
    height  : int,
    width   : int,
    stride  : int,
    pFactor : int
}

// hardware type for pipeline2d
struct Hardware {
    at_read   : fn(int) -> (),
    at_always : fn(int) -> (),
    at_write  : fn(int) -> (),
    at_update : fn(int) -> (),
    initial_delay : int,
    read_time : int,
    life_time : int
}

// register arrays
struct regs1d {
    read  : fn(int) -> pixel_t,
    write : fn(int, pixel_t) -> (),
    begin : int,
    end   : int
}
struct regs2d {
    read  : fn(int, int) -> pixel_t,
    write : fn(int, int, pixel_t) -> (),
    begin : (int, int),
    end   : (int, int)
}

// on-chip memory
//struct Win2D {
//    read   : fn(int, int) -> pixel_t,
//    update : fn(int, int) -> (),
//    size_x : int,
//    size_y : int
//}
struct Win2D {
    read   : fn(int, int) -> pixel_t,
    write  : fn(int, int, pixel_t) -> (),
    update : fn(int, int) -> (),
    height  : int,
    width   : int,
    stride  : int,
    pFactor : int
}

// border handling
struct RoI1d {
    o_x : i32,
    width : i32,
}
struct col_selection {
    get_read_fn : fn(int) -> fn(int, int) -> pixel_t,
    update      : fn(int) -> ()
}
struct coarsening_type {
    process : fn(int, int) -> ()
}


// ------------------------------ loops ----------------------------------------
fn @iterate1d_border(body: fn(Boundary) -> ()) -> () {
    for row in unroll(0, 3) {
        let boundary = get_boundary(row);
        @@body(boundary);
    }
}
fn @iterate1d_atborders(body: fn(Boundary) -> ()) -> () {
    @@body(Boundary::Lower);
    @@body(Boundary::Upper);
}

// --------------------- memory copy functions --------------------------------
fn @copy_img(src: Img, dst: Img) -> () {
    copy_real_img(src, dst);
}

fn @copy_real_img(src: Img, dst: Img) -> () {
    if src.virtual == false {
        copy(src.buf, dst.buf);
    }
}

fn @get_device_copy(img: Img) -> Img {
    if img.virtual == false {
        let acc = accelerator(device_id);
        let img_dev = alloc_img(img, acc.alloc);
        copy_real_img(img, img_dev);
        img_dev
    } else {
        img
    }
}

fn @get_host_copy(img_dev: Img, img: Img) -> () {
    if img_dev.virtual == false {
        copy_real_img(img_dev, img);
    } 
}

fn @release_device_copy(img: Img) -> () {
    if img.virtual == false {
        release(img.buf)
    }
}

fn @get_device_sync(img: Img) -> fn() -> () {
    if img.virtual == false {
      let acc = accelerator(device_id);
      acc.sync
    } else {
        ||()
    }
}

fn @get_device_sync2(img0: Img, img1: Img) -> fn() -> () {
    let sync_fn1 = get_device_sync(img0);
    let sync_fn2 = get_device_sync(img1);

    ||{ sync_fn1(); sync_fn2();}
}


// ---------------------------- streaming --------------------------------------
fn @new_shared_line(in_s: Mem2D, width: int) -> Mem2D {
    match in_s.pFactor {
         1 => new_shared_line_vec1 (in_s, width),
         2 => new_shared_line_vec2 (in_s, width),
         4 => new_shared_line_vec4 (in_s, width),
         8 => new_shared_line_vec8 (in_s, width),
        16 => new_shared_line_vec16(in_s, width),
        32 => new_shared_line_vec32(in_s, width),
         _ => undef[Mem2D]()
    }
}

// shared
fn @new_shared_line_vec1(in_s: Mem2D, width: int) -> Mem2D {
    let mut value = 0 as pixel_t;
    let lbuf = reserve_shared[pixel_t](width);

    fn @read(idx: int) -> pixel_t { value }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        lbuf(col) = in_s.read(0);
    }

    create_Mem2D_read(width, 1, 1, shift, read)
}

fn @new_shared_line_vec2(in_s: Mem2D, width: int) -> Mem2D {
    let mut value = [ 0 as pixel_t, .. 2 ];
    let lbuf = reserve_shared[[pixel_t * 2]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1)];
        lbuf(col) = dlbin;
    }

    create_Mem2D_read(width, 1, 2, shift, read)
}

fn @new_shared_line_vec4(in_s: Mem2D, width: int) -> Mem2D {
    let mut value = [ 0 as pixel_t, .. 4 ];
    let lbuf = reserve_shared[[pixel_t * 4]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1), in_s.read(2), in_s.read(3)];
        lbuf(col) = dlbin;
    }

    create_Mem2D_read(width, 1, 4, shift, read)
}

fn @new_shared_line_vec8(in_s: Mem2D, width: int) -> Mem2D {
    let mut value = [ 0 as pixel_t, .. 8 ];
    let lbuf = reserve_shared[[pixel_t * 8]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1), in_s.read(2), in_s.read(3),
                     in_s.read(4), in_s.read(5), in_s.read(6), in_s.read(7)];
        lbuf(col) = dlbin;
    }

    create_Mem2D_read(width, 1, 8, shift, read)
}

fn @new_shared_line_vec16(in_s: Mem2D, width: int) -> Mem2D {
    let mut value = [ 0 as pixel_t, .. 16 ];
    let lbuf = reserve_shared[[pixel_t * 16]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1), in_s.read(2), in_s.read(3),
                     in_s.read(4), in_s.read(5), in_s.read(6), in_s.read(7),
                     in_s.read(8), in_s.read(9), in_s.read(10), in_s.read(11),
                     in_s.read(12), in_s.read(13), in_s.read(14), in_s.read(15)];
        lbuf(col) = dlbin;
    }

    create_Mem2D_read(width, 1, 16, shift, read)
}

fn @new_shared_line_vec32(in_s: Mem2D, width: int) -> Mem2D {
    let mut value = [ 0 as pixel_t, .. 32 ];
    let lbuf = reserve_shared[[pixel_t * 32]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0),  in_s.read(1),  in_s.read(2),  in_s.read(3),
                     in_s.read(4),  in_s.read(5),  in_s.read(6),  in_s.read(7),
                     in_s.read(8),  in_s.read(9),  in_s.read(10), in_s.read(11),
                     in_s.read(12), in_s.read(13), in_s.read(14), in_s.read(15),
                     in_s.read(16), in_s.read(17), in_s.read(18), in_s.read(19),
                     in_s.read(20), in_s.read(21), in_s.read(22), in_s.read(23),
                     in_s.read(24), in_s.read(25), in_s.read(26), in_s.read(27),
                     in_s.read(28), in_s.read(29), in_s.read(30), in_s.read(31)];
        lbuf(col) = dlbin;
    }

    create_Mem2D_read(width, 1, 32, shift, read)
}

// -------------------------- Array of Registers -------------------------------
fn @new_databeat(width: int) -> regs1d {
    new_regs1d(0, width)
}

fn @new_regs1d(begin: int, end: int) -> regs1d {
    if end == begin {
        regs1d {
            write : @|_, _| (),
            read  : @|_| undef[pixel_t](),
            begin : begin,
            end   : end
        }
    } else if begin + 1 == end {
        //pe_info("found", begin);
        let mut value = 0 as pixel_t;
        regs1d {
            write : @|i, v| value = v,
            read  : @|i| value,
            begin : begin,
            end   : end
        }
    } else {
        //pe_info("begin", begin);
        //pe_info("end", end);
        let m = (end + begin) / 2;
        let left  = new_regs1d(begin, m);
        let right = new_regs1d(m, end);
        regs1d {
            write : @|i, v| if i >= m { right.write(i, v) } else { left.write(i, v) },
            read  : @|i|    if i >= m { right.read(i) } else { left.read(i) },
            begin : begin,
            end   : end
        }
    }
}

fn @new_regs2d(begin: (int, int), end: (int, int)) -> regs2d {
    let (begin_x, begin_y) = begin;
    let (end_x, end_y)     = end;
    if end_y == begin_y {
        regs2d {
            write : @|_, _, _| (),
            read  : @|_, _| undef[pixel_t](),
            begin : begin,
            end   : end
        }
    } else if begin_y + 1 == end_y {
        let row = new_regs1d(begin_x, end_x);
        regs2d {
            write : @|x, y, v| row.write(x, v),
            read  : @|x, y|    row.read(x),
            begin : begin,
            end   : end
        }
    } else {
        let m = (end_y + begin_y) / 2;
        let left  = new_regs2d((begin_x, begin_y), (end_x, m));
        let right = new_regs2d((begin_x, m),       (end_x, end_y));
        regs2d {
            write : @|x, y, v| if y >= m { right.write(x, y, v) } else { left.write(x, y, v) },
            read  : @|x, y|    if y >= m { right.read(x, y) } else { left.read(x, y) },
            begin : begin,
            end   : end
        }
    }
}


// ---------------------------------------------------------------------------
// ------------------------ Stencil Codes ------------------------------------
// ---------------------------------------------------------------------------
//  ---- Instances of On Chip Memory: Line Buffers and Sliding Window  --------
fn @new_line_buffer(in_s: Mem2D, width: int, height: int) -> Win2D {
    let stride = (width - 1) / in_s.pFactor + 1;
    if height == 0 {
        Win2D {
            read   : @|x, y| in_s.read(x),
            write  : @|_, _, _| (),
            update : @|_, _| (),
            height : height,
            width  : width,
            stride : stride,
            pFactor: in_s.pFactor
        }
    } else {
        let shared_s = new_shared_line(in_s, width);
        let sub_lbuf = new_line_buffer(shared_s, width, height - 1);
        Win2D {
            read   : @|x, y| {
                if y == height - 1 {
                    in_s.read(x)
                } else {
                    sub_lbuf.read(x, y)
                }
            },
            write  : @|_, _, _| (),
            update : @|col, row| {
                shared_s.update($col);
                sub_lbuf.update($col, 0)
            },
            height : height,
            width  : width,
            stride : stride,
            pFactor: in_s.pFactor
        }
    }
}

fn @new_sliding_win(lbufs: Win2D, stride: int, height: int) -> Win2D {
    let swin = new_regs2d((0, 0), (stride, height));
    let pFactor = lbufs.pFactor;

    fn @shift() -> () {
        // Shift sliding window
        for j in unroll(0, height) {
            for i in unroll(0, stride - pFactor) {
                swin.write(i, j, swin.read(i + pFactor, j));
            }
        }

        // Read new col
        for j in unroll(0, height) {
            for v in unroll(0, pFactor) {
                swin.write((v + stride - pFactor), j, lbufs.read(v, j));
            }
        }
    }
    Win2D {
        read   : swin.read,
        write  : @|_, _, _| (),
        update : @|col_ridx, row_ridx| { lbufs.update($col_ridx, 0);
                                         shift() },
        height : height,
        width  : stride,
        stride : stride,
        pFactor: pFactor
    }
}

// sliding window with row selection
// todo: reduce the parameter list
fn @new_sliding_win_bh(lbufs: Win2D, stride: int, height: int, radius_x: int, row_sel_fun: row_sel_fun_type, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> Win2D {
    let swin = new_regs2d((0, 0), (stride, height));
    let pFactor = lbufs.pFactor;

    fn @brdr_assigns(yw: int, boundary: Boundary, lower_high: int, upper_low: int) -> () {
        for xw in unroll(0, pFactor) {
            fn @read_fun(i: int) -> pixel_t { lbufs.read(xw, i) };
            let pix_bh = read_pixel_bh(yw, read_fun, boundary, lower_high, upper_low, bh_lower, bh_upper);
            swin.write(xw + stride - pFactor, yw, pix_bh)
        }
    }

    fn @shift(col_ridx: int, row_ridx: int) -> () {
        for j in unroll(0, height) {
            for i in unroll(0, stride - pFactor) {
                swin.write(i, j, swin.read(i + pFactor, j));
            }
        }
        row_sel_fun($row_ridx, brdr_assigns);
    }

    Win2D {
        read   : swin.read,
        write  : @|_, _, _| (),
        update : @|col_ridx, row_ridx| { lbufs.update($col_ridx, 0);
                                         shift($col_ridx, $row_ridx) },
        height : height,
        width  : 2 * radius_x + pFactor,
        stride : stride,
        pFactor: pFactor
    }
}


//  --------------------------  Border Handling  -------------------------------
fn @new_bounds(lower: i32, lower_bh_pixels: i32, upper_bh_pixels: i32, upper: i32) -> get_bounds_fun_type {
    @|boundary| {
        match boundary {
            Boundary::Lower  => (lower, lower_bh_pixels),
            Boundary::Center => (lower_bh_pixels, upper_bh_pixels),
            Boundary::Upper  => (upper_bh_pixels, upper),
            _                => undef()
        }
    }
}

fn @read_pixel_bh(xw: int, read: fn(int) -> pixel_t, boundary: Boundary, lower_high: int, upper_low: int, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> pixel_t {
        let mode_x = match boundary {
            Boundary::Lower   => bh_lower(xw, lower_high, 0),
            Boundary::Center  => BoundaryMode::Index(xw),
            Boundary::Upper   => bh_upper(xw, 0, upper_low),
            Boundary::Unknown => undef()
        };

        match mode_x {
            BoundaryMode::Index(idx) => read(idx),
            BoundaryMode::Const(c)   => c,
            _ => undef()
        }
}

fn @bh_type0(imx: int, boundary: Boundary, pFactor: int, roi: RoI1d, get_bounds_fun: get_bounds_fun_type, brdr_assigns: brdr_assigns_type) -> () {
    // roi @ image
    let lower_arr   = roi.o_x;
    let upper_arr   = roi.o_x + roi.width;
    // bounds @ win
    let (lower_w, upper_w) = get_bounds_fun(boundary);
    let radius = upper_w - lower_w;

    fn @for_the_bound(boundary: Boundary, lower_high: int, upper_low: int) -> () {
        for xw in unroll(lower_w, upper_w) {
            @@brdr_assigns(xw, boundary, lower_high, upper_low);
        };
    };

    @@for_the_bound(Boundary::Center, 0, 0);

    match boundary {
        Boundary::Lower => {
            for x in unroll_step(0, radius, pFactor) {
                let lower_high = upper_w - x;
                if imx == lower_arr + x / pFactor {
                    @@for_the_bound(boundary, lower_high, 0);
                }
            }
        },
        Boundary::Upper => {
            for x in unroll_step(0, radius, pFactor) {
                let upper_low = lower_w + x;
                if imx == upper_arr - 1 - x / pFactor {
                    @@for_the_bound(boundary, 0, upper_low);
                }
            }
        },
        _ => {}
    };
}


fn @get_type0_row_sel(pFactor: int, roi: RoI1d, get_bounds_fun: get_bounds_fun_type) -> row_sel_fun_type {
    @|idx, brdr_assigns| {
        for boundary in iterate1d_border() {
            let bh_type0_fun = bh_type0($idx, boundary, pFactor, roi, get_bounds_fun, brdr_assigns);
        }
    }
}

fn @new_type0_col_selection(swin: Win2D, pFactor: int, roi: RoI1d, get_bounds_fun: get_bounds_fun_type, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> col_selection {
    let (lower_low, lower_high) = get_bounds_fun(Boundary::Lower);
    let (upper_low, upper_high) = get_bounds_fun(Boundary::Upper);
    let lower_regs = new_regs2d((lower_low, 0), (lower_high, swin.height));
    let upper_regs = new_regs2d((upper_low, 0), (upper_high, swin.height));

    fn @read_fun(x: int, y: int) -> pixel_t {
             if x > upper_low - 1 && x < upper_high { upper_regs.read(x, y) }
        else if x > lower_low - 1 && x < lower_high { lower_regs.read(x, y) }
        else { swin.read(x, y) }
    }

    fn @write_fun(x: int, y: int, din: pixel_t) -> () {
        if      x > upper_low - 1 && x < upper_high { upper_regs.write(x, y, din) }
        else if x > lower_low - 1 && x < lower_high { lower_regs.write(x, y, din) }
        else {}
    }

    fn @brdr_assigns(xw: int, boundary: Boundary, lower_high: int, upper_low: int) -> () {
        for yw in unroll(0, swin.height) {
            fn @get_fun(i: int) -> pixel_t { swin.read(i, yw) };
            let pix_bh = read_pixel_bh(xw, get_fun, boundary, lower_high, upper_low, bh_lower, bh_upper);
            write_fun(xw, yw, pix_bh);
        }
    }

    fn @update(col_ridx: int) -> () {
        for boundary in iterate1d_atborders() {
            bh_type0($col_ridx, boundary, pFactor, roi, get_bounds_fun, brdr_assigns);
        }
    }

    col_selection {
        get_read_fn : @|v| { @|x, y| read_fun(x + v, y) },
        update      : update
    }
}

//  -------------------  Loop Coarsening  ----------------------
fn @FetchAndCalc(math: Intrinsics, pFactor: int, in_s: Mem2D, out_s: Mem2D, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> Hardware {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let win_lat = round_up(radius_x, pFactor) / pFactor;
    let swin_y = mask.size_y;
    let swin_x = radius_x + (1 + win_lat) * pFactor;
    let swin_x_opt = pFactor + 2 * radius_x;

    let crsn_width  = (in_s.width - 1) / pFactor + 1;
    let crsn_stride = (in_s.stride -1) / pFactor + 1;

    // border handling row selection
    let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: radius_y, width: in_s.height}, row_bounds_fun);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, crsn_stride, swin_y);
    let swin = new_sliding_win_bh(lbufs, swin_x, swin_y, radius_x, row_sel_fun, bh_lower, bh_upper);

    // border handling col selection
    let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x_opt);
    let col_sel_type0 = new_type0_col_selection(swin, pFactor, RoI1d { o_x: win_lat, width: 0 }, get_bounds_fun, bh_lower, bh_upper);

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.update($col_ridx, $row_ridx);
        col_sel_type0.update($col_ridx);

        for v in unroll(0, pFactor) {
            let win_acc = Acc { read : col_sel_type0.get_read_fn(v), write : @|x, y, v| {} };
            let out_acc = Acc { read : |x, y| 0 as pixel_t,          write : @|x, y, data| out_s.write(v, data) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //out_acc.write(0, 0, win_acc.read(radius_x, radius_y));
        }
    };

    let process_time  = crsn_width * in_s.height;
    let initial_delay = crsn_width * radius_y + win_lat;
    let life_time     = initial_delay + process_time;

    let mut col_ridx = 0;
    let mut row_ridx = 0; // border handling

    Hardware {
        at_read   : |ridx| { in_s.update($ridx); },
        at_always : |ridx| { process($col_ridx, $row_ridx); },
        at_write  : |ridx| { out_s.update($ridx - initial_delay); },
        at_update : |ridx| {
            col_ridx++;
            if col_ridx == crsn_width { col_ridx = 0; row_ridx++;}
        },
        initial_delay : initial_delay,
        read_time : process_time,
        life_time : life_time
    }
}

fn @CalcAndPack(math: Intrinsics, pFactor: int, in_s: Mem2D, out_s: Mem2D, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> Hardware {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let swin_y = mask.size_y;
    let swin_x = pFactor + 2 * radius_x;

    let crsn_width  = (in_s.width - 1) / pFactor + 1;
    let crsn_stride = (in_s.stride -1) / pFactor + 1;

    // Border_handling
    let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: radius_y, width: in_s.height }, row_bounds_fun);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, crsn_stride, swin_y);
    let swin = new_sliding_win_bh(lbufs, swin_x, swin_y, radius_x, row_sel_fun, bh_lower, bh_upper);

    // Constants for Packing
    let delay_width = (pFactor + ((pFactor - radius_x) % pFactor)) % pFactor;
    let pack_offset = pFactor - delay_width;
    let vec_delayed = new_databeat(delay_width);

    let col_sel_type0 = {
        if pack_offset == pFactor {
            let win_lat = round_up(radius_x, pFactor) / pFactor;
            let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x);
            new_type0_col_selection(swin, pFactor, RoI1d { o_x : win_lat, width : 0 }, get_bounds_fun, bh_lower, bh_upper)
        } else {
            let win_lat = radius_x / pFactor;
            let roi = RoI1d { o_x : win_lat, width : 1 };
            let upper_low  = pack_offset + radius_x;
            let upper_get_bounds_fun = new_bounds(0, 0, upper_low, upper_low + radius_x);
            let lower_get_bounds_fun = new_bounds(upper_low - radius_x, upper_low, swin_x, swin_x);
            let upper = new_type0_col_selection(swin, pFactor, roi, upper_get_bounds_fun, bh_lower, bh_upper);
            let lower = new_type0_col_selection(swin, pFactor, roi, lower_get_bounds_fun, bh_lower, bh_upper);
            col_selection {
                get_read_fn : @|v|   { if v < pack_offset { upper.get_read_fn(v) } else { lower.get_read_fn(v) } },
                update      : @|idx| { upper.update(idx); lower.update(idx); }
            }
        }
    };

    fn @pack(v: int) -> fn(int, int, pixel_t) -> () {
        @|x, y, data| {
            if  v < pack_offset {
                let pack_idx =  v + delay_width;
                out_s.write(pack_idx, data);
            } else {
                let pack_idx =  v - pack_offset;
                out_s.write(pack_idx, vec_delayed.read(pack_idx));
                vec_delayed.write(pack_idx, data);
            }
        }
    }

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.update($col_ridx, $row_ridx);
        col_sel_type0.update($col_ridx);

        for v in unroll(0, pFactor) {
            let win_acc = Acc { read : col_sel_type0.get_read_fn(v), write : @|x, y, v| {} };
            let out_acc = Acc { read : @|x, y| 0 as pixel_t, write : pack(v) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //vec_pix_out_acc.write(0, 0, in_acc.read(radius_x, radius_y));
        }
    }

    let win_lat = round_up(radius_x, pFactor) / pFactor;
    let process_time  = crsn_width * in_s.height;
    let initial_delay = crsn_width * radius_y + win_lat;
    let life_time     = initial_delay + process_time;

    let mut col_ridx = 0;
    let mut row_ridx = 0; // border handling

    Hardware {
        at_read   : |ridx| { in_s.update($ridx); },
        at_always : |ridx| { process($col_ridx, $row_ridx); },
        at_write  : |ridx| { out_s.update($ridx - initial_delay); },
        at_update : |ridx| {
            col_ridx++;
            if col_ridx == crsn_width { col_ridx = 0; row_ridx++; }
        },
        initial_delay : initial_delay,
        read_time : process_time,
        life_time : life_time
    }
}


// coarsening nobh
fn @FetchAndCalc_nobh(math: Intrinsics, pFactor: int, in_s: Mem2D, out_s: Mem2D, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> Hardware {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let win_lat = round_up(radius_x, pFactor) / pFactor;
    let swin_y = mask.size_y;
    let swin_x = radius_x + (1 + win_lat) * pFactor;
    let swin_x_opt = pFactor + 2 * radius_x;

    let crsn_width  = (in_s.width - 1) / pFactor + 1;
    let crsn_stride = (in_s.stride -1) / pFactor + 1;

    // border handling row selection
    //let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    //let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: 2, width: 1024 }, row_bounds_fun, bh_lower, bh_upper);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, crsn_stride, swin_y);
    //let swin = new_sliding_win(lbufs, swin_x, swin_y, pFactor, row_sel_fun);
    let swin = new_sliding_win(lbufs, swin_x, swin_y);

    // border handling col selection
    // let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x_opt);
    // let col_sel_type0 = new_type0_col_selection(swin, pFactor, RoI1d { o_x: win_lat, width: 0 }, get_bounds_fun, bh_lower, bh_upper);

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.update($col_ridx, $row_ridx);
        //col_sel_type0.update(col_ridx);

        for v in unroll(0, pFactor) {
            let win_acc = Acc { read : @|x, y| swin.read(x + v, y), write : @|x, y, v| {} };
            let out_acc = Acc { read : @|x, y| 0 as pixel_t,        write : @|x, y, data| out_s.write(v, data) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //out_acc.write(0, 0, win_acc.read(radius_x, radius_y));
        }
    }

    let process_time  = crsn_width * in_s.height;
    let initial_delay = crsn_width * radius_y + win_lat - 1;
    let life_time     = initial_delay + process_time + 1;

    let mut col_ridx = 0;
    let mut row_ridx = 0; // border handling

    Hardware {
        at_read   : |ridx| { in_s.update($ridx); },
        at_always : |ridx| { process($col_ridx, $row_ridx); },
        at_write  : |ridx| { out_s.update($ridx - (initial_delay + 1)); },
        at_update : |ridx| {
            col_ridx++;
            if col_ridx == crsn_width { col_ridx = 0; row_ridx++;}
        },
        initial_delay : initial_delay,
        read_time : process_time,
        life_time : life_time
    }

}

fn @CalcAndPack_nobh(math: Intrinsics, pFactor: int, in_s: Mem2D, out_s: Mem2D, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> Hardware {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let swin_y = mask.size_y;
    let swin_x = pFactor + 2 * radius_x;

    let crsn_width  = (in_s.width - 1) / pFactor + 1;
    let crsn_stride = (in_s.stride -1) / pFactor + 1;

    // Border_handling
    //let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    //let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: 2, width: 1024 }, row_bounds_fun, bh_lower, bh_upper);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, crsn_stride, swin_y);
    //let swin = new_sliding_win_bh(lbufs, swin_x, swin_y, pFactor, row_sel_fun);
    let swin = new_sliding_win(lbufs, swin_x, swin_y);

    // Constants for Packing
    let delay_width = (pFactor + ((pFactor - radius_x) % pFactor)) % pFactor;
    let pack_offset = pFactor - delay_width;
    let vec_delayed = new_databeat(delay_width);

    //let col_sel_type0 = {
    //    if pack_offset == pFactor {
    //        let win_lat = round_up(radius_x, pFactor) / pFactor;
    //        let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x);
    //        new_type0_col_selection(swin, pFactor, RoI1d { o_x : win_lat, width : 0 }, get_bounds_fun, bh_lower, bh_upper)
    //    } else {
    //        let win_lat = radius_x / pFactor;
    //        let roi = RoI1d { o_x : win_lat, width : 1 };
    //        let upper_low  = pack_offset + radius_x;
    //        let upper_get_bounds_fun = new_bounds(0, 0, upper_low, upper_low + radius_x);
    //        let lower_get_bounds_fun = new_bounds(upper_low - radius_x, upper_low, swin_x, swin_x);
    //        let upper = new_type0_col_selection(swin, pFactor, roi, upper_get_bounds_fun, bh_lower, bh_upper);
    //        let lower = new_type0_col_selection(swin, pFactor, roi, lower_get_bounds_fun, bh_lower, bh_upper);
    //        col_selection {
    //            get_read_fn : @|v|   { if v < pack_offset { upper.get_read_fn(v) } else { lower.get_read_fn(v) } },
    //            update      : @|idx| { upper.update(idx); lower.update(idx); }
    //        }
    //    }
    //};

    fn @pack(v: int) -> fn(int, int, pixel_t) -> () {
        @|x, y, data| {
            if  v < pack_offset {
                let pack_idx =  v + delay_width;
                out_s.write(pack_idx, data);
            } else {
                let pack_idx =  v - pack_offset;
                out_s.write(pack_idx, vec_delayed.read(pack_idx));
                vec_delayed.write(pack_idx, data);
            }
        }
    }

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.update($col_ridx, $row_ridx);
        //col_sel_type0.update(col_ridx);

        for v in unroll(0, pFactor) {
            //let win_acc = Acc { read : col_sel_type0.get_read_fn(v), write : @|x, y, v| {} };
            let win_acc = Acc { read : @|x, y| swin.read(x + v, y), write : @|x, y, v| {} };
            let out_acc = Acc { read : @|x, y| 0 as pixel_t, write : pack(v) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //vec_pix_out_acc.write(0, 0, in_acc.read(radius_x, radius_y));
        }
    }

    let win_lat = round_up(radius_x, pFactor) / pFactor;
    let process_time  = crsn_width * in_s.height;
    let initial_delay = crsn_width * radius_y + win_lat - 1;
    let life_time     = initial_delay + process_time + 1;

    let mut col_ridx = 0;
    let mut row_ridx = 0; // border handling

    Hardware {
        at_read   : |ridx| { in_s.update($ridx); },
        at_always : |ridx| { process($col_ridx, $row_ridx); },
        at_write  : |ridx| { out_s.update($ridx - (initial_delay + 1)); },
        at_update : |ridx| {
            col_ridx++;
            if col_ridx == crsn_width { col_ridx = 0; row_ridx++;}
        },
        initial_delay : initial_delay,
        read_time : process_time,
        life_time : life_time
    }
}


//  ------------------- Stencil Processing ----------------------
fn @pipeline2d(hw: Hardware) -> () {
    // Optimize away the read condition if not needed
    let at_read_ = @|idx|{
        if(hw.read_time == hw.life_time) { 
            hw.at_read($idx) 
        } else { 
            if idx < hw.read_time { hw.at_read($idx); }
        }
    };

    // Optimize away the write condition if not needed
    let at_write_ = @|idx|{
        if(hw.initial_delay == 0) { 
            hw.at_write($idx) 
        } else { 
            if idx > (hw.initial_delay - 1) { hw.at_write($idx); }
        }
    };

    // execution loop
    for clock_tick in range(0, hw.life_time) {
        pragma_pipeline();

        // read input  (clock_tick < hw.read_time)
        at_read_(clock_tick);
        //if clock_tick < hw.read_time { hw.at_read(); }

        // process data
        hw.at_always(clock_tick);

        // write output (clock_tick >= hw.initial_delay)
        at_write_(clock_tick);
        //if clock_tick > (hw.initial_delay - 1) { hw.at_write(); }

        // update indices
        hw.at_update(clock_tick);
    }
}


// ---------------------------------------------------------------------------
// ------------------------    Iteration    ----------------------------------
// ---------------------------------------------------------------------------
fn @iteration(math: Intrinsics, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let acc = accelerator(device_id);
    let arr_dev = get_device_copy(arr);
    let out_dev = get_device_copy(out);

    for benchmark_fpga(get_device_sync(out)) {
        for work_item in acc.exec((1,1,1), (1,1,1)) {
            let pFactor = get_vector_length();
            //FetchAndCalc, CalcAndPack, FetchAndCalc_nobh, CalcAndPack_nobh
            let coarsening_fun = coarsening_policy;

            let in_s  = Img_to_Mem2D_read(arr_dev);
            let out_s = Img_to_Mem2D_write(out_dev);
            let my_hardware = coarsening_fun(math, pFactor, in_s, out_s, mask, bh_lower, bh_upper, body);
            pipeline2d(my_hardware);
        }
    }
    get_host_copy(out_dev, out);
}

fn @iteration_point(math: Intrinsics, out: Img, arr: Img, body: fn(Intrinsics, i32, i32, Acc, pixel_t) -> ()) -> () {
    let acc = accelerator(device_id);
    let arr_dev = get_device_copy(arr);
    let out_dev = get_device_copy(out);

    for benchmark_fpga(get_device_sync(out)) {
        for work_item in acc.exec((1,1,1), (1,1,1)) {
            let pFactor = get_vector_length();
            let out_s = Img_to_Mem2D_write(out_dev);
            let in_s = Img_to_Mem2D_read(arr_dev);

            let life_time  = out_s.stride * out_s.height;
            let my_hardware = Hardware {
                at_read   : |ridx| { in_s.update($ridx); },
                at_write  : |ridx| { out_s.update($ridx); },
                at_always : |ridx| {
                    for v in unroll(0, pFactor) {
                        let out_acc = Acc { read : |x, y| 0 as pixel_t, write : @|x, y, data| out_s.write(v, data) };
                        @@body(math, 0, 0, out_acc, in_s.read(v));
                    }
                },
                at_update : |_| (),
                initial_delay : 0,
                read_time : life_time,
                life_time : life_time
            };
            pipeline2d(my_hardware);
        }
    }
    get_host_copy(out_dev, out);
}

fn @iteration_point2(math: Intrinsics, out: Img, arr0: Img, arr1: Img, body: fn(Intrinsics, i32, i32, Acc, pixel_t, pixel_t) -> ()) -> () {
    let acc = accelerator(device_id);
    let arr0_dev = get_device_copy(arr0);
    let arr1_dev = get_device_copy(arr1);
    let out_dev = get_device_copy(out);

    for benchmark_fpga(get_device_sync(out)) {
        for work_item in acc.exec((1,1,1), (1,1,1)) {
            let pFactor = get_vector_length();
            let out_s = Img_to_Mem2D_write(out_dev);
            let in0_s = Img_to_Mem2D_read(arr0_dev);
            let in1_s = Img_to_Mem2D_read(arr1_dev);

            let life_time  = out_s.stride * out_s.height;
            let my_hardware = Hardware {
                at_read   : |ridx| {
                    in0_s.update($ridx);
                    in1_s.update($ridx);
                },
                at_write  : |ridx| { out_s.update($ridx); },
                at_always : |ridx| {
                    for v in unroll(0, pFactor) {
                        let in0 = in0_s.read(v);
                        let in1 = in1_s.read(v);
                        let out_acc = Acc { read : |x, y| 0 as pixel_t, write : @|x, y, data| out_s.write(v, data) };
                        @@body(math, 0, 0, out_acc, in0, in1);
                    }
                },
                at_update : |_| (),
                initial_delay : 0,
                read_time : life_time,
                life_time : life_time
            };
            pipeline2d(my_hardware);
        }
    }
    get_host_copy(out_dev, out);
}

fn @iteration_point3(math: Intrinsics, out: Img, arr0: Img, arr1: Img, arr2: Img, body: fn(Intrinsics, i32, i32, Acc, pixel_t, pixel_t, pixel_t) -> ()) -> () {
    let acc = accelerator(device_id);
    let arr0_dev = get_device_copy(arr0);
    let arr1_dev = get_device_copy(arr1);
    let arr2_dev = get_device_copy(arr2);
    let out_dev = get_device_copy(out);

    for benchmark_fpga(get_device_sync(out)) {
        for work_item in acc.exec((1,1,1), (1,1,1)) {
            let pFactor = get_vector_length();
            let out_s = Img_to_Mem2D_write(out_dev);
            let in0_s = Img_to_Mem2D_read(arr0_dev);
            let in1_s = Img_to_Mem2D_read(arr1_dev);
            let in2_s = Img_to_Mem2D_read(arr2_dev);

            let life_time  = out_s.stride * out_s.height;
            let my_hardware = Hardware {
                at_read   : |ridx| {
                    in0_s.update($ridx);
                    in1_s.update($ridx);
                    in2_s.update($ridx);
                },
                at_write  : |ridx| { out_s.update($ridx); },
                at_always : |ridx| {
                    for v in unroll(0, pFactor) {
                        let in0 = in0_s.read(v);
                        let in1 = in1_s.read(v);
                        let in2 = in2_s.read(v);
                        let out_acc = Acc { read : |x, y| 0 as pixel_t, write : @|x, y, data| out_s.write(v, data) };
                        @@body(math, 0, 0, out_acc, in0, in1, in2);
                    }
                },
                at_update : |_|(),
                initial_delay : 0,
                read_time : life_time,
                life_time : life_time
            };
            pipeline2d(my_hardware);
        }
    }
    get_host_copy(out_dev, out);
}

fn @iteration_point1to2(math: Intrinsics, out0: Img, out1: Img, arr: Img, body: fn(Intrinsics, i32, i32, pixel_t, Acc, Acc) -> ()) -> () {
    let acc = accelerator(device_id);
    let arr_dev = get_device_copy(arr);
    let out0_dev = get_device_copy(out0);
    let out1_dev = get_device_copy(out1);

    for benchmark_fpga(get_device_sync2(out0, out1)) {
        for work_item in acc.exec((1,1,1), (1,1,1)) {
            let pFactor = get_vector_length();
            let out0_s = Img_to_Mem2D_write(out0_dev);
            let out1_s = Img_to_Mem2D_write(out1_dev);
            let in_s = Img_to_Mem2D_read(arr_dev);

            let life_time  = out0_s.stride * out0_s.height;
            let my_hardware = Hardware {
                at_read   : |ridx| {
                    in_s.update($ridx);
                },
                at_write  : |ridx| {
                    out0_s.update($ridx);
                    out1_s.update($ridx);
                },
                at_always : |ridx| {
                    for v in unroll(0, pFactor) {
                        let din = in_s.read(v);
                        let out_acc0 = Acc { read : |x, y| 0 as pixel_t, write : @|x, y, data| out0_s.write(v, data) };
                        let out_acc1 = Acc { read : |x, y| 0 as pixel_t, write : @|x, y, data| out1_s.write(v, data) };
                        @@body(math, 0, 0, din, out_acc0, out_acc1);
                    }
                },
                at_update : |_| (),
                initial_delay : 0,
                read_time : life_time,
                life_time : life_time
            };
            pipeline2d(my_hardware);
        }
    }
    get_host_copy(out0_dev, out0);
    get_host_copy(out1_dev, out1);
}

fn @split_image(math: Intrinsics, arr: Img, pipe0: &mut pipe, pipe1: &mut pipe) -> (Img, Img) {
    let acc = accelerator(device_id);
    let arr_dev = get_device_copy(arr);
    let out0 = new_virtual_img(arr.width, arr.height, arr.stride, pipe0);
    let out1 = new_virtual_img(arr.width, arr.height, arr.stride, pipe1);

    let pFactor = get_vector_length();
    let image_size = (arr.height * (arr.stride / pFactor) );
    for benchmark_fpga(get_device_sync(out0)) {
        for work_item in acc.exec((1,1,1), (1,1,1)) {
            let in_s   = Img_to_Mem2D_read(arr_dev);
            let out0_s = Img_to_Mem2D_write(out0);
            let out1_s = Img_to_Mem2D_write(out1);

            for idx in range(0, image_size) {
                pragma_pipeline();
                in_s.update(idx);
                for v in unroll(0, pFactor) {
                    let data = in_s.read(v);
                    out0_s.write(v, data);
                    out1_s.write(v, data);
                }
                out0_s.update(idx);
                out1_s.update(idx);
            }
        }
    }
    (out0, out1)
}
//fn @split_image(math: Intrinsics, arr: Img, pipe0: &mut pipe, pipe1: &mut pipe) -> (Img, Img) {
//    let out0 = new_virtual_img(arr.width, arr.height, arr.stride, pipe0);
//    let out1 = new_virtual_img(arr.width, arr.height, arr.stride, pipe1);
//
//    fn @split(math: Intrinsics, x: i32, y: i32, din: pixel_t, dout0: Acc, dout1: Acc) -> () {
//        dout0.write(x, y, din);
//        dout1.write(x, y, din);
//    };
//    iteration_point1to2(math, out0, out1, arr, split);
//
//    (out0, out1)
//}
