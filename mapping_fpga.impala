// ---------------------------- types ------------------------------------------
// border handling
type Bounds = (int, int);
type get_bounds_fun_type = fn(Boundary) -> Bounds;
type pixel_read_type  = fn(int, int, Boundary, Bounds, fn(int) -> pixel_t) -> pixel_t;
type row_sel_fun_type = fn(int, win_acc) -> ();
type crsn_type = fn(Intrinsics, stream_in, stream_out, int, Mask, int, BoundaryFn, BoundaryFn, StencilFn) -> coarsening_type;

// ---------------------------- structs ----------------------------------------
// Stream types for data movements
struct stream_in {
    update: fn(int) -> (),
    read  : fn(int) -> pixel_t,
    width   : int,
    height  : int,
    stride  : int,
    pFactor : int
}
struct stream_out {
    update: fn(int) -> (),
    write : fn(int, pixel_t) -> (),
    width   : int,
    height  : int,
    stride  : int,
    pFactor : int
}

// register arrays
struct regs1d {
    read  : fn(int) -> pixel_t,
    write : fn(int, pixel_t) -> (),
    begin : int,
    end   : int
}
struct regs2d {
    read  : fn(int, int) -> pixel_t,
    write : fn(int, int, pixel_t) -> (),
    begin : (int, int),
    end   : (int, int)
}

// on-chip memory
struct swin_acc {
    read   : fn(int, int) -> pixel_t,
    shift  : fn(int, int) -> (),
    size_x : int,
    size_y : int
}

// border handling
struct win_acc {
    read   : fn(int, int) -> pixel_t,
    write  : fn(int, int, pixel_t) -> (),
    size_x : int,
    size_y : int
}
struct RoI1d {
    o_x : i32,
    width : i32,
}
struct col_selection {
    get_read_fn : fn(int) -> fn(int, int) -> pixel_t,
    update      : fn(int) -> ()
}
struct coarsening_type {
    process : fn(int, int) -> ()
}


// ------------------------------ loops ----------------------------------------
fn @iterate1d_border(body: fn(Boundary) -> ()) -> () {
    for row in unroll(0, 3) {
        let boundary = get_boundary(row);
        @@body(boundary);
    }
}
fn @iterate1d_atborders(body: fn(Boundary) -> ()) -> () {
    @@body(Boundary::Lower);
    @@body(Boundary::Upper);
}

// ---------------------------- streaming --------------------------------------
fn create_stream_in(width: int, height: int, stride: int, pFactor: int, update: fn(int) -> (), read: fn(int) -> pixel_t) -> stream_in {
    stream_in{ width: width, height: height, stride: stride, pFactor: pFactor, update: update, read: read}
}

fn img_to_stream_in(img: Img, pFactor: int, update: fn(int) -> (), read: fn(int) -> pixel_t) -> stream_in {
    stream_in{ width: img.width, height: img.height, stride: img.stride, pFactor: pFactor, update: update, read: read}
}

fn @new_shared_line(in_s: stream_in, width: int) -> stream_in {
    match in_s.pFactor {
         1 => new_shared_line_vec1 (in_s, width),
         2 => new_shared_line_vec2 (in_s, width),
         4 => new_shared_line_vec4 (in_s, width),
         8 => new_shared_line_vec8 (in_s, width),
        16 => new_shared_line_vec16(in_s, width),
        32 => new_shared_line_vec32(in_s, width),
         _ => undef[stream_in]()
    }
}

fn create_stream_out(width: int, height: int, stride: int, pFactor: int, update: fn(int) -> (), write : fn(int, pixel_t) -> ()) -> stream_out {
    stream_out{ width: width, height: height, stride: stride, pFactor: pFactor, update: update, write : write}
}

fn img_to_stream_out(img: Img, pFactor: int, update: fn(int) -> (), write : fn(int, pixel_t) -> ()) -> stream_out {
    stream_out{ width: img.width, height: img.height, stride: img.stride, pFactor: pFactor, update: update, write: write}
}

// shared
fn @new_shared_line_vec1(in_s: stream_in, width: int) -> stream_in {
    let mut value = 0 as pixel_t;
    let lbuf = reserve_shared[pixel_t](width);

    fn @read(idx: int) -> pixel_t { value }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        lbuf(col) = in_s.read(0);
    }

    create_stream_in(width, 1, width, 1, shift, read)
}

fn @new_shared_line_vec2(in_s: stream_in, width: int) -> stream_in {
    let mut value = [ 0 as pixel_t, .. 2 ];
    let lbuf = reserve_shared[[pixel_t * 2]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1)];
        lbuf(col) = dlbin;
    }

    create_stream_in(width, 1, width, 2, shift, read)
}

fn @new_shared_line_vec4(in_s: stream_in, width: int) -> stream_in {
    let mut value = [ 0 as pixel_t, .. 4 ];
    let lbuf = reserve_shared[[pixel_t * 4]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1), in_s.read(2), in_s.read(3)];
        lbuf(col) = dlbin;
    }

    create_stream_in(width, 1, width, 4, shift, read)
}

fn @new_shared_line_vec8(in_s: stream_in, width: int) -> stream_in {
    let mut value = [ 0 as pixel_t, .. 8 ];
    let lbuf = reserve_shared[[pixel_t * 8]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1), in_s.read(2), in_s.read(3),
                     in_s.read(4), in_s.read(5), in_s.read(6), in_s.read(7)];
        lbuf(col) = dlbin;
    }

    create_stream_in(width, 1, width, 8, shift, read)
}

fn @new_shared_line_vec16(in_s: stream_in, width: int) -> stream_in {
    let mut value = [ 0 as pixel_t, .. 16 ];
    let lbuf = reserve_shared[[pixel_t * 16]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0), in_s.read(1), in_s.read(2), in_s.read(3),
                     in_s.read(4), in_s.read(5), in_s.read(6), in_s.read(7),
                     in_s.read(8), in_s.read(9), in_s.read(10), in_s.read(11),
                     in_s.read(12), in_s.read(13), in_s.read(14), in_s.read(15)];
        lbuf(col) = dlbin;
    }

    create_stream_in(width, 1, width, 16, shift, read)
}

fn @new_shared_line_vec32(in_s: stream_in, width: int) -> stream_in {
    let mut value = [ 0 as pixel_t, .. 32 ];
    let lbuf = reserve_shared[[pixel_t * 32]](width);

    fn @read(idx: int) -> pixel_t { value(idx) }
    fn @shift(col: int) -> () {
        value     = lbuf(col);
        let dlbin = [in_s.read(0),  in_s.read(1),  in_s.read(2),  in_s.read(3),
                     in_s.read(4),  in_s.read(5),  in_s.read(6),  in_s.read(7),
                     in_s.read(8),  in_s.read(9),  in_s.read(10), in_s.read(11),
                     in_s.read(12), in_s.read(13), in_s.read(14), in_s.read(15),
                     in_s.read(16), in_s.read(17), in_s.read(18), in_s.read(19),
                     in_s.read(20), in_s.read(21), in_s.read(22), in_s.read(23),
                     in_s.read(24), in_s.read(25), in_s.read(26), in_s.read(27),
                     in_s.read(28), in_s.read(29), in_s.read(30), in_s.read(31)];
        lbuf(col) = dlbin;
    }

    create_stream_in(width, 1, width, 32, shift, read)
}

// -------------------------- Array of Registers -------------------------------
fn @new_databeat(width: int) -> regs1d {
    new_regs1d(0, width)
}

fn @new_regs1d(begin: int, end: int) -> regs1d {
    if end == begin {
        regs1d {
            write : @|_, _| (),
            read  : @|_| undef[pixel_t](),
            begin : begin,
            end   : end
        }
    } else if begin + 1 == end {
        //pe_info("found", begin);
        let mut value = 0 as pixel_t;
        regs1d {
            write : @|i, v| value = v,
            read  : @|i| value,
            begin : begin,
            end   : end
        }
    } else {
        //pe_info("begin", begin);
        //pe_info("end", end);
        let m = (end + begin) / 2;
        let left  = new_regs1d(begin, m);
        let right = new_regs1d(m, end);
        regs1d {
            write : @|i, v| if i >= m { right.write(i, v) } else { left.write(i, v) },
            read  : @|i|    if i >= m { right.read(i) } else { left.read(i) },
            begin : begin,
            end   : end
        }
    }
}

fn @new_regs2d(begin: (int, int), end: (int, int)) -> regs2d {
    let (begin_x, begin_y) = begin;
    let (end_x, end_y)     = end;
    if end_y == begin_y {
        regs2d {
            write : @|_, _, _| (),
            read  : @|_, _| undef[pixel_t](),
            begin : begin,
            end   : end
        }
    } else if begin_y + 1 == end_y {
        let row = new_regs1d(begin_x, end_x);
        regs2d {
            write : @|x, y, v| row.write(x, v),
            read  : @|x, y|    row.read(x),
            begin : begin,
            end   : end
        }
    } else {
        let m = (end_y + begin_y) / 2;
        let left  = new_regs2d((begin_x, begin_y), (end_x, m));
        let right = new_regs2d((begin_x, m),       (end_x, end_y));
        regs2d {
            write : @|x, y, v| if y >= m { right.write(x, y, v) } else { left.write(x, y, v) },
            read  : @|x, y|    if y >= m { right.read(x, y) } else { left.read(x, y) },
            begin : begin,
            end   : end
        }
    }
}


// ---------------------------------------------------------------------------
// ------------------------ Stencil Codes ------------------------------------
// ---------------------------------------------------------------------------
//  ---- Instances of On Chip Memory: Line Buffers and Sliding Window  --------
fn @new_line_buffer(in_s: stream_in, size_x: int, size_y: int) -> swin_acc {
    if size_y == 0 {
        swin_acc {
            read   : @|x, y| in_s.read(x),
            shift  : @|_, _| (),
            size_x : size_x,
            size_y : size_y
        }
    } else {
        let shared_s = new_shared_line(in_s, size_x);
        let sub_lbuf = new_line_buffer(shared_s, size_x, size_y - 1);
        swin_acc {
            read   : @|x, y| {
                if y == size_y {
                    in_s.read(x)
                } else {
                    sub_lbuf.read(x, y)
                }
            },
            shift  : @|col, row| {
                shared_s.update(col);
                sub_lbuf.shift(col, 0)
            },
            size_x : size_x,
            size_y : size_y
        }
    }
}

fn @new_sliding_win(lbufs: swin_acc, swin_x: int, swin_y: int, pFactor: int) -> swin_acc {
    let swin = new_regs2d((0, 0), (swin_x, swin_y));

    fn @shift() -> () {
        // Shift sliding window
        for j in unroll(0, swin_y) {
            for i in unroll(0, swin_x - pFactor) {
                swin.write(i, j, swin.read(i + pFactor, j));
            }
        }

        // Read new col
        for j in unroll(0, swin_y) {
            for v in unroll(0, pFactor) {
                swin.write((v + swin_x - pFactor), j, lbufs.read(v, j));
            }
        }
    }
    swin_acc {
        read  : @|x, y| {
            swin.read(x, y)
        },
        shift : @|col_ridx, row_ridx| {
            lbufs.shift(col_ridx, 0);
            shift()
        },
        size_x : swin_x,
        size_y : swin_y
    }
}

// sliding window with row selection
// todo: reduce the parameter list
fn @new_sliding_win_bh(lbufs: swin_acc, swin_x: int, swin_y: int, radius_x: int, radius_y: int, pFactor: int, row_sel_fun: row_sel_fun_type) -> swin_acc {
    let swin = new_regs2d((0, 0), (swin_x, swin_y));
    let out_width = 2 * radius_x + pFactor;
    let get_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);

    fn @read_fun(y: int, v: int) -> pixel_t { lbufs.read(v, y) }
    fn @write_fun(y: int, v: int, din: pixel_t) { swin.write(v + swin_x - pFactor, y, din) }
    let wacc = win_acc{ read: read_fun, write: write_fun, size_x: 0, size_y: pFactor };
    fn @shift(col_ridx: int, row_ridx: int) -> () {
        for j in unroll(0, swin_y) {
            for i in unroll(0, swin_x - pFactor) {
                swin.write(i, j, swin.read(i + pFactor, j));
            }
        }
        row_sel_fun(row_ridx, wacc);
    }

    swin_acc {
        read  : swin.read,
        shift : @|col_ridx, row_ridx| { lbufs.shift(col_ridx, 0); shift(col_ridx, row_ridx) },
        size_x : out_width,
        size_y : swin_y
    }
}


//  --------------------------  Border Handling  -------------------------------
fn @new_bounds(lower: i32, lower_bh_pixels: i32, upper_bh_pixels: i32, upper: i32) -> get_bounds_fun_type {
    @|boundary| {
        match boundary {
            Boundary::Lower  => (lower, lower_bh_pixels),
            Boundary::Center => (lower_bh_pixels, upper_bh_pixels),
            Boundary::Upper  => (upper_bh_pixels, upper),
            _                => undef()
        }
    }
}

fn @read_pixel_bh(xw: int, read: fn(int) -> pixel_t, boundary: Boundary, lower_high: int, upper_low: int, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> pixel_t {
        let mode_x = match boundary {
            Boundary::Lower   => bh_lower(xw, lower_high, 0),
            Boundary::Center  => BoundaryMode::Index(xw),
            Boundary::Upper   => bh_upper(xw, 0, upper_low),
            Boundary::Unknown => undef()
        };

        match mode_x {
            BoundaryMode::Index(idx) => read(idx),
            BoundaryMode::Const(c)   => c,
            _ => undef()
        }
}

fn @bh_type0(imx: int, wacc: win_acc, boundary: Boundary, pFactor: int, roi: RoI1d, get_bounds_fun: get_bounds_fun_type, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> () {
    // roi @ image
    let lower_arr   = roi.o_x;
    let upper_arr   = roi.o_x + roi.width;
    // bounds @ win
    let (lower_w, upper_w) = get_bounds_fun(boundary);
    let radius = upper_w - lower_w;

    for xw in unroll(lower_w, upper_w) {
        for yw in unroll(0, wacc.size_y) {
            wacc.write(xw, yw, wacc.read(xw, yw));
        }
    };

    match boundary {
        Boundary::Lower => {
            for x in unroll_step(0, radius, pFactor) {
                if imx == lower_arr + x / pFactor {
                    let lower_high = upper_w - x;
                    for xw in unroll(lower_w, upper_w) {
                        for yw in unroll(0, wacc.size_y) {
                            fn @get_fun(i: int) -> pixel_t { wacc.read(i, yw) };
                            wacc.write(xw, yw, read_pixel_bh(xw, get_fun, boundary, lower_high, 0, bh_lower, bh_upper));
                        }
                    }
                }
            }
        },
        Boundary::Upper => {
            for x in unroll_step(0, radius, pFactor) {
                if imx == upper_arr - 1 - x / pFactor {
                    let upper_low = lower_w + x;
                    for xw in unroll(lower_w, upper_w) {
                        for yw in unroll(0, wacc.size_y) {
                            fn @get_fun(i: int) -> pixel_t { wacc.read(i, yw) };
                            wacc.write(xw, yw, read_pixel_bh(xw, get_fun, boundary, 0, upper_low, bh_lower, bh_upper));
                        }
                    }
                }
            }
        },
        _ => {}
    };
}

fn @get_type0_row_sel(pFactor: int, roi: RoI1d, get_bounds_fun: get_bounds_fun_type, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> row_sel_fun_type {
    @|idx, wacc| {
        for boundary in iterate1d_border() {
            let bh_type0_fun = bh_type0(idx, wacc, boundary, pFactor, roi, get_bounds_fun, bh_lower, bh_upper);
        }
    }
}

fn @new_type0_col_selection(swin: swin_acc, pFactor: int, roi: RoI1d, get_bounds_fun: get_bounds_fun_type, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> col_selection {
    let (lower_low, lower_high) = get_bounds_fun(Boundary::Lower);
    let (upper_low, upper_high) = get_bounds_fun(Boundary::Upper);
    let lower_regs = new_regs2d((lower_low, 0), (lower_high, swin.size_y));
    let upper_regs = new_regs2d((upper_low, 0), (upper_high, swin.size_y));

    fn @read_fun(x: int, y: int) -> pixel_t {
             if x > upper_low - 1 && x < upper_high { upper_regs.read(x, y) }
        else if x > lower_low - 1 && x < lower_high { lower_regs.read(x, y) }
        else { swin.read(x, y) }
    }

    fn @write_fun(x: int, y: int, din: pixel_t) -> () {
        if      x > upper_low - 1 && x < upper_high { upper_regs.write(x, y, din) }
        else if x > lower_low - 1 && x < lower_high { lower_regs.write(x, y, din) }
        else {}
    }

    let wacc = win_acc{read: swin.read, write: write_fun, size_x: 0, size_y: swin.size_y};
    fn @update(col_ridx: int) -> () {
        for boundary in iterate1d_atborders() {
            bh_type0(col_ridx, wacc, boundary, pFactor, roi, get_bounds_fun, bh_lower, bh_upper);
        }
    }

    col_selection {
        get_read_fn : @|v| { @|x, y| read_fun(x + v, y) },
        update      : update
    }
}

//  -------------------  Loop Coarsening  ----------------------
fn @FetchAndCalc(math: Intrinsics, in_s: stream_in, out_s: stream_out, img_stride: int, mask: Mask, pFactor: int, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> coarsening_type {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let win_lat = round_up(radius_x, pFactor) / pFactor;
    let swin_y = mask.size_y;
    let swin_x = radius_x + (1 + win_lat) * pFactor;
    let swin_x_opt = pFactor + 2 * radius_x;

    // border handling row selection
    let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: radius_y, width: in_s.height}, row_bounds_fun, bh_lower, bh_upper);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, img_stride, swin_y - 1);
    let swin = new_sliding_win_bh(lbufs, swin_x, swin_y, radius_x, radius_y, pFactor, row_sel_fun);

    // border handling col selection
    let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x_opt);
    let col_sel_type0 = new_type0_col_selection(swin, pFactor, RoI1d { o_x: win_lat, width: 0 }, get_bounds_fun, bh_lower, bh_upper);

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.shift(col_ridx, row_ridx);
        col_sel_type0.update(col_ridx);

        for v in unroll(0, pFactor) {
            let win_acc = Acc { read : col_sel_type0.get_read_fn(v), write : @|x, y, v| {} };
            let out_acc = Acc { read : |x, y| 0 as pixel_t,          write : @|x, y, data| out_s.write(v, data) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //out_acc.write(0, 0, win_acc.read(radius_x, radius_y));
        }
    }

    coarsening_type {
        process : process
    }
}

fn @CalcAndPack(math: Intrinsics, in_s: stream_in, out_s: stream_out, img_stride: int, mask: Mask, pFactor: int, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> coarsening_type {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let swin_y = mask.size_y;
    let swin_x = pFactor + 2 * radius_x;

    // Border_handling
    let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: radius_y, width: in_s.height }, row_bounds_fun, bh_lower, bh_upper);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, img_stride, swin_y - 1);
    let swin = new_sliding_win_bh(lbufs, swin_x, swin_y, radius_x, radius_y, pFactor, row_sel_fun);

    // Constants for Packing
    let delay_width = (pFactor + ((pFactor - radius_x) % pFactor)) % pFactor;
    let pack_offset = pFactor - delay_width;
    let vec_delayed = new_databeat(delay_width);

    let col_sel_type0 = {
        if pack_offset == pFactor {
            let win_lat = round_up(radius_x, pFactor) / pFactor;
            let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x);
            new_type0_col_selection(swin, pFactor, RoI1d { o_x : win_lat, width : 0 }, get_bounds_fun, bh_lower, bh_upper)
        } else {
            let win_lat = radius_x / pFactor;
            let roi = RoI1d { o_x : win_lat, width : 1 };
            let upper_low  = pack_offset + radius_x;
            let upper_get_bounds_fun = new_bounds(0, 0, upper_low, upper_low + radius_x);
            let lower_get_bounds_fun = new_bounds(upper_low - radius_x, upper_low, swin_x, swin_x);
            let upper = new_type0_col_selection(swin, pFactor, roi, upper_get_bounds_fun, bh_lower, bh_upper);
            let lower = new_type0_col_selection(swin, pFactor, roi, lower_get_bounds_fun, bh_lower, bh_upper);
            col_selection {
                get_read_fn : @|v|   { if v < pack_offset { upper.get_read_fn(v) } else { lower.get_read_fn(v) } },
                update      : @|idx| { upper.update(idx); lower.update(idx); }
            }
        }
    };

    fn @pack(v: int) -> fn(int, int, pixel_t) -> () {
        @|x, y, data| {
            if  v < pack_offset {
                let pack_idx =  v + delay_width;
                out_s.write(pack_idx, data);
            } else {
                let pack_idx =  v - pack_offset;
                out_s.write(pack_idx, vec_delayed.read(pack_idx));
                vec_delayed.write(pack_idx, data);
            }
        }
    }

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.shift(col_ridx, row_ridx);
        col_sel_type0.update(col_ridx);

        for v in unroll(0, pFactor) {
            let win_acc = Acc { read : col_sel_type0.get_read_fn(v), write : @|x, y, v| {} };
            let out_acc = Acc { read : @|x, y| 0 as pixel_t, write : pack(v) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //vec_pix_out_acc.write(0, 0, in_acc.read(radius_x, radius_y));
        }
    }

    coarsening_type {
        process : process
    }
}

// coarsening nobh
fn @FetchAndCalc_nobh(math: Intrinsics, in_s: stream_in, out_s: stream_out, img_stride: int, mask: Mask, pFactor: int, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> coarsening_type {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let win_lat = round_up(radius_x, pFactor) / pFactor;
    let swin_y = mask.size_y;
    let swin_x = radius_x + (1 + win_lat) * pFactor;
    let swin_x_opt = pFactor + 2 * radius_x;

    // border handling row selection
    //let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    //let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: 2, width: 1024 }, row_bounds_fun, bh_lower, bh_upper);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, img_stride, swin_y - 1);
    //let swin = new_sliding_win(lbufs, swin_x, swin_y, pFactor, row_sel_fun);
    let swin = new_sliding_win(lbufs, swin_x, swin_y, pFactor);

    // border handling col selection
    // let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x_opt);
    // let col_sel_type0 = new_type0_col_selection(swin, pFactor, RoI1d { o_x: win_lat, width: 0 }, get_bounds_fun, bh_lower, bh_upper);

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.shift(col_ridx, row_ridx);
        //col_sel_type0.update(col_ridx);

        for v in unroll(0, pFactor) {
            let win_acc = Acc { read : @|x, y| swin.read(x + v, y), write : @|x, y, v| {} };
            let out_acc = Acc { read : @|x, y| 0 as pixel_t,        write : @|x, y, data| out_s.write(v, data) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //out_acc.write(0, 0, win_acc.read(radius_x, radius_y));
        }
    }

    coarsening_type {
        process : process
    }
}

fn @CalcAndPack_nobh(math: Intrinsics, in_s: stream_in, out_s: stream_out, img_stride: int, mask: Mask, pFactor: int, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> coarsening_type {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let swin_y = mask.size_y;
    let swin_x = pFactor + 2 * radius_x;

    // Border_handling
    //let row_bounds_fun = new_bounds(0, radius_y, radius_y + 1, 1 + 2 * radius_y);
    //let row_sel_fun = get_type0_row_sel(1, RoI1d { o_x: 2, width: 1024 }, row_bounds_fun, bh_lower, bh_upper);

    // On Chip Memory Architecture
    let lbufs = new_line_buffer(in_s, img_stride, swin_y - 1);
    //let swin = new_sliding_win_bh(lbufs, swin_x, swin_y, pFactor, row_sel_fun);
    let swin = new_sliding_win(lbufs, swin_x, swin_y, pFactor);

    // Constants for Packing
    let delay_width = (pFactor + ((pFactor - radius_x) % pFactor)) % pFactor;
    let pack_offset = pFactor - delay_width;
    let vec_delayed = new_databeat(delay_width);

    //let col_sel_type0 = {
    //    if pack_offset == pFactor {
    //        let win_lat = round_up(radius_x, pFactor) / pFactor;
    //        let get_bounds_fun = new_bounds(0, radius_x, radius_x + pFactor, swin_x);
    //        new_type0_col_selection(swin, pFactor, RoI1d { o_x : win_lat, width : 0 }, get_bounds_fun, bh_lower, bh_upper)
    //    } else {
    //        let win_lat = radius_x / pFactor;
    //        let roi = RoI1d { o_x : win_lat, width : 1 };
    //        let upper_low  = pack_offset + radius_x;
    //        let upper_get_bounds_fun = new_bounds(0, 0, upper_low, upper_low + radius_x);
    //        let lower_get_bounds_fun = new_bounds(upper_low - radius_x, upper_low, swin_x, swin_x);
    //        let upper = new_type0_col_selection(swin, pFactor, roi, upper_get_bounds_fun, bh_lower, bh_upper);
    //        let lower = new_type0_col_selection(swin, pFactor, roi, lower_get_bounds_fun, bh_lower, bh_upper);
    //        col_selection {
    //            get_read_fn : @|v|   { if v < pack_offset { upper.get_read_fn(v) } else { lower.get_read_fn(v) } },
    //            update      : @|idx| { upper.update(idx); lower.update(idx); }
    //        }
    //    }
    //};

    fn @pack(v: int) -> fn(int, int, pixel_t) -> () {
        @|x, y, data| {
            if  v < pack_offset {
                let pack_idx =  v + delay_width;
                out_s.write(pack_idx, data);
            } else {
                let pack_idx =  v - pack_offset;
                out_s.write(pack_idx, vec_delayed.read(pack_idx));
                vec_delayed.write(pack_idx, data);
            }
        }
    }

    fn @process(col_ridx: int, row_ridx: int) -> () {
        swin.shift(col_ridx, row_ridx);
        //col_sel_type0.update(col_ridx);

        for v in unroll(0, pFactor) {
            //let win_acc = Acc { read : col_sel_type0.get_read_fn(v), write : @|x, y, v| {} };
            let win_acc = Acc { read : @|x, y| swin.read(x + v, y), write : @|x, y, v| {} };
            let out_acc = Acc { read : @|x, y| 0 as pixel_t, write : pack(v) };
            @@body(math, radius_x, radius_y, out_acc, win_acc, mask);
            //vec_pix_out_acc.write(0, 0, in_acc.read(radius_x, radius_y));
        }
    }

    coarsening_type {
        process : process
    }
}


//  ------------------- Stencil Processing ----------------------
fn @iter_body(math: Intrinsics, coarsening_fun: crsn_type, pFactor: int, out_s: stream_out, in_s: stream_in, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
    let radius_y = mask.size_y >> 1;
    let radius_x = mask.size_x >> 1;
    let win_lat = round_up(radius_x, pFactor) / pFactor;
    let crsn_width  = (in_s.width - 1) / pFactor + 1;
    let crsn_stride = (in_s.stride -1) / pFactor + 1;

    let coarsening = coarsening_fun(math, in_s, out_s, crsn_width, mask, pFactor, bh_lower, bh_upper, body);
    let process_time  = crsn_width * in_s.height;
    let initial_delay = crsn_width * radius_y + win_lat - 1;
    let life_time     = initial_delay + process_time + 1;

    let mut col_ridx = 0; let mut row_ridx = 0;
    let mut col_widx = 0; let mut row_widx = 0;
    for clock_tick in range(0, life_time) {
        if is_hls() { print_pragma("#pragma ii 1"); }
        if is_opencl() { print_pragma("#pragma HLS pipeline II=1"); }

        // read new pix
        if clock_tick < process_time {
            in_s.update(row_ridx * crsn_stride + col_ridx);
        }

        // shift on chip mem
        coarsening.process(col_ridx, row_ridx);
        //for v in unroll(0, pFactor) { out_s.write(v, in_s.read(v)); }

        // write output
        if clock_tick > initial_delay {
            out_s.update(row_widx * crsn_stride + col_widx);
            col_widx++;
        }

        // update image indexes
        col_ridx++;
        if col_ridx == crsn_width { col_ridx = 0; row_ridx++; }
        if col_widx == crsn_width { col_widx = 0; row_widx++; }
    }
}

// //  ------------------------ Padding (WIP) -----------------------------------
// struct padded_stream_in{
//    stream : stream_in,
//    update : fn(int, int, int) -> ()
// }
// struct padded_stream_out{
//    stream : stream_out,
//    update : fn(int, int, int) -> ()
// }
// fn amirror_lower(idx: i32, lower: i32, upper: i32) -> int{
//     if idx < lower { lower + (lower - idx-1) } else { idx }
// }
// fn amirror_upper(idx: i32, lower: i32, upper: i32) -> int{
//     if idx >= upper { upper - (idx+1 - upper) } else { idx }
// }
// fn @pad_in_stream(in_s: stream_in, mask: Mask) -> padded_stream_in {
//     fn @update(col_idx: int, row_idx: int, stride : int) -> () {
//         let col = col_idx - (mask.size_x >> 1);
//         let row = row_idx - (mask.size_y >> 1);
//         let col_bh = amirror_upper(amirror_lower(col, 0, 0), 0, 1024);
//         let row_bh = amirror_upper(amirror_lower(row, 0, 0), 0, 1024);
//         //if col >= 0 && row >= 0 {
//             in_s.update(row_bh * stride + col_bh);
//         //}
//     }
// 
//     padded_stream_in{
//         stream : in_s,
//         update : update
//     }
// }
// fn @crop_out_stream(out_s: stream_out, mask: Mask) -> padded_stream_out {
//     fn @update(col_idx: int, row_idx: int, stride : int) -> (){
//         let col = col_idx - (mask.size_x - 1);
//         let row = row_idx - (mask.size_y - 1);
//         if col >= 0 && row >= 0 {
//             out_s.update(row * stride + col);
//         }
//     }
// 
//     padded_stream_out{
//         stream : out_s,
//         update : update
//     }
// }
// 
// fn @fac_padding(math: Intrinsics, pFactor: int, out: Img, arr: Img, mask: Mask, bh_lower: BoundaryFn, bh_upper: BoundaryFn, body: StencilFn) -> () {
//     let acc = accelerator(device_id);
//     let arr_dev = alloc_img(arr, acc.alloc);
//     let out_dev = alloc_img(out, acc.alloc);
// 
//     copy_img(arr, arr_dev);
//     for benchmark_fpga(acc) {
//         for tid, bid, bdim, gdim, gid in acc.exec((1,1,1), (1,1,1)) {
//             let radius_y = mask.size_y >> 1;
//             let radius_x = mask.size_x >> 1;
// 
//             // output image
//             let out_stride = (arr.stride - 1) / pFactor + 1;
//             let out_s      = set_stream_from_global_img(out_dev, pFactor);
//             let out_s_pad  = crop_out_stream(out_s, mask);
// 
//             // input image
//             let in_s      = get_stream_from_global_img(arr_dev, pFactor);
//             // padding
//             let in_s_pad  = pad_in_stream(in_s, mask);
//             let crsn_stride = (arr.stride + mask.size_x - 2) / pFactor + 1;
//             let crsn_width  = (arr.width + mask.size_x - 2) / pFactor + 1;
//             let crsn_height = arr.height + 2 * radius_y;
// 
//             let init_lat_x  = 2 * radius_x - 1;
//             let init_lat_y  = 2 * radius_y - 1;
// 
//             let initial_delay = crsn_width * (init_lat_y + 1) + init_lat_x;
//             let process_time  = crsn_width * crsn_height;
//             let life_time     = initial_delay + process_time - 1;
// 
//             let coarsening = FetchAndCalc_nobh(math, in_s_pad.stream, out_s, crsn_width, mask, pFactor, bh_lower, bh_upper, body);
// 
//             let mut col_ridx = 0; let mut row_ridx = 0;
//             let mut col_widx = 0; let mut row_widx = 0;
//             for clock_tick in range(0, life_time) {
//                 // read new pix
//                 if clock_tick < process_time {
//                     in_s_pad.update(col_ridx, row_ridx, arr.stride);
//                 }
// 
//                 // shift on chip mem
//                 coarsening.process(col_ridx, row_ridx);
//                 //for v in unroll(0, pFactor) { out_s.write(v, in_s.read(v)); }
// 
//                 // write output
//                 // // 1.
//                 // out_s_pad.update(col_ridx, row_ridx, out.stride);
//                 // if (col_ridx >= 2 * radius_x) && (row_ridx >= 2 * radius_y) {
//                 // // 2.
//                 //   let col = col_ridx - 2 * radius_x;
//                 //   let row = row_ridx - 2 * radius_y;
//                 //   out_s.update(row * arr.stride + col);
//                 // // 3.
//                 //   if (col_ridx < arr.width + 2 * radius_x) && (col_ridx > radius_x - 1) {
//                 //       out_s.update(row_widx * out.stride + col_widx);
//                 //       col_widx++;
//                 //   }
//                 // }
//                 // 4.
//                 //if (row_ridx > init_lat_y) {
//                 if clock_tick > initial_delay {
//                     if (col_ridx > init_lat_x) {
//                         out_s.update(col_widx + row_widx * out_stride);
//                         col_widx++;
//                     }
//                 }
// 
//                 // update image indexes
//                 col_ridx++;
//                 if col_ridx == crsn_width { col_ridx = 0; row_ridx++; }
//                 if col_widx == arr.width  { col_widx = 0; row_widx++; }
//             }
//         }
//         //acc.sync();
//     }
//     copy_img(out_dev, out);
// }


// ---------------------------------------------------------------------------
// ------------------------ Point Operators ----------------------------------
// ---------------------------------------------------------------------------
fn @iter_point_body(pFactor: i32, out_s: stream_out, body: fn(Intrinsics, i32, i32, Acc) -> ()) -> () {
    let out_acc = Acc { read : |x, y| 0 as pixel_t, write : @|x, y, data| out_s.write(x, data) };
    let crsn_stride = out_s.stride / pFactor;
    for y in range(0, out_s.height) {
        for x in range(0, crsn_stride) {
            if is_hls() { print_pragma("#pragma ii 1"); }
            if is_opencl() { print_pragma("#pragma HLS pipeline II=1"); }
            for v in unroll(0, pFactor) {
                @@body(math, v, y, out_acc);
            }
            out_s.update(y * crsn_stride + x);
        }
    }
}
