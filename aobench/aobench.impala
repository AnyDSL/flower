extern "C" {
    fn saveppm(&[u8], i32, i32) -> ();
}

static WIDTH       = 256;
static HEIGHT      = 256;
static NSUBSAMPLES = 2;
static NAO_SAMPLES = 8;
static PI          = 3.14159265358979323846;

struct vec {
    x: f64,
    y: f64,
    z: f64,
}

struct Isect {
    t: f64,
    p: vec,
    n: vec,
    hit: i32,
}

struct Sphere {
    center: vec,
    radius: f64,
}

struct Plane {
    p: vec,
    n: vec,
}

struct Ray {
    org: vec,
    dir: vec,
}

fn vdot(v0: vec, v1: vec) -> f64 {
    v0.x * v1.x + v0.y * v1.y + v0.z * v1.z
}

fn vcross(v0: vec, v1: vec) -> vec {
    vec { x : v0.y * v1.z - v0.z * v1.y,
          y : v0.z * v1.x - v0.x * v1.z,
          z : v0.x * v1.y - v0.y * v1.x }
}

fn vnormalize(mut c: vec) -> vec {
    let length = sqrt(vdot(c, c));

    if fabs(length) > 1.0e-17 {
        c.x /= length;
        c.y /= length;
        c.z /= length;
    }

    c
}

fn ray_sphere_intersect(mut isect: Isect, ray: Ray, sphere: Sphere) -> Isect {
    let rs = vec {
        x : ray.org.x - sphere.center.x,
        y : ray.org.y - sphere.center.y,
        z : ray.org.z - sphere.center.z
    };

    let B = vdot(rs, ray.dir);
    let C = vdot(rs, rs) - sphere.radius * sphere.radius;
    let D = B * B - C;

    if D > 0.0 {
        let t = -B - sqrt(D);

        if t > 0.0 && t < isect.t @{
            isect.t   = t;
            isect.hit = 1;

            isect.p.x = ray.org.x + ray.dir.x * t;
            isect.p.y = ray.org.y + ray.dir.y * t;
            isect.p.z = ray.org.z + ray.dir.z * t;

            isect.n.x = isect.p.x - sphere.center.x;
            isect.n.y = isect.p.y - sphere.center.y;
            isect.n.z = isect.p.z - sphere.center.z;

            isect.n = vnormalize(isect.n);
        }
    }

    isect
}

fn ray_plane_intersect(mut isect: Isect, ray: Ray, plane: Plane) -> Isect {
    let d = -vdot(plane.p, plane.n);
    let v =  vdot(ray.dir, plane.n);

    if fabs(v) >= 1.0e-17 @{
        let t = -(vdot(ray.org, plane.n) + d) / v;

        if t > 0.0 && t < isect.t @{
            isect.t   = t;
            isect.hit = 1;

            isect.p.x = ray.org.x + ray.dir.x * t;
            isect.p.y = ray.org.y + ray.dir.y * t;
            isect.p.z = ray.org.z + ray.dir.z * t;

            isect.n = plane.n;
        }
    }

    isect
}

fn ortho_basis(n: vec) -> [vec * 3] {
    let mut basis: [vec * 3];
    let mut x = 0.0; let mut y = 0.0; let mut z = 0.0;

    if n.x < 0.6 && n.x > -0.6 {
        x = 1.0;
    } else if n.y < 0.6 && n.y > -0.6 {
        y = 1.0;
    } else if n.z < 0.6 && n.z > -0.6 {
        z = 1.0;
    } else {
        x = 1.0;
    }

    basis(1).x = x; basis(1).y = y; basis(1).z = z;
    basis(2) = n;
    basis(0) = vnormalize(vcross(basis(1), basis(2)));
    basis(1) = vnormalize(vcross(basis(2), basis(0)));

    basis
}

fn ambient_occlusion(isect: Isect, spheres: [Sphere * 3], plane: Plane, rand: fn() -> f64) -> f64 {
    let ntheta = NAO_SAMPLES;
    let nphi   = NAO_SAMPLES;
    let eps    = 0.0001;

    let p = vec {
        x : isect.p.x + eps * isect.n.x,
        y : isect.p.y + eps * isect.n.y,
        z : isect.p.z + eps * isect.n.z
    };

    let basis = ortho_basis(isect.n);

    let mut occlusion = 0.0;

    for j in $range(0, ntheta) @{
        for i in range(0, nphi) {
            let theta = sqrt(rand());
            let phi   = 2.0 * PI * rand();

            let x = cos(phi) * theta;
            let y = sin(phi) * theta;
            let z = sqrt(1.0 - theta * theta);

            // local -> global
            let rx = x * basis(0).x + y * basis(1).x + z * basis(2).x;
            let ry = x * basis(0).y + y * basis(1).y + z * basis(2).y;
            let rz = x * basis(0).z + y * basis(1).z + z * basis(2).z;

            let ray = Ray {
                org : p,
                dir : vec { x : rx, y : ry, z : rz }
            };

            let mut occ_isect: Isect;
            occ_isect.t   = 1.0e+17;
            occ_isect.hit = 0;

            occ_isect = ray_sphere_intersect(occ_isect, ray, spheres(0));
            occ_isect = ray_sphere_intersect(occ_isect, ray, spheres(1));
            occ_isect = ray_sphere_intersect(occ_isect, ray, spheres(2));
            occ_isect = ray_plane_intersect (occ_isect, ray, plane);

            if occ_isect.hit == 1 { occlusion += 1.0; }
        }
    }

    occlusion = ((ntheta * nphi) as f64 - occlusion) / ((ntheta * nphi) as f64);

    occlusion
}

fn clamp(f: f64) -> u8 {
    let mut i = (f*255.5) as i32;

    if i < 0   { i = 0; }
    if i > 255 { i = 255; }

    i as u8
}

fn render(img: Buffer, w: int, h: int, nsubsamples: int, spheres: [Sphere * 3], plane: Plane) -> () {
    for x, y, out, rand in @iteration(img, w, h) {
        let mut r = 0.0;
        let mut g = 0.0;
        let mut b = 0.0;
        for v in $range(0, nsubsamples) {
            for u in range(0, nsubsamples) @{
                let px =  (x as f64 + (u as f64 / (nsubsamples as f64)) - (w as f64 / 2.0)) / (w as f64 / 2.0);
                let py = -(y as f64 + (v as f64 / (nsubsamples as f64)) - (h as f64 / 2.0)) / (h as f64 / 2.0);

                let mut ray = Ray {
                    org : vec { x : 0.0, y : 0.0, z : 0.0 },
                    dir : vec { x : px,  y : py,  z : -1.0 }
                };

                ray.dir = vnormalize(ray.dir);

                let mut isect: Isect;
                isect.t   = 1.0e+17;
                isect.hit = 0;

                isect = ray_sphere_intersect(isect, ray, spheres(0));
                isect = ray_sphere_intersect(isect, ray, spheres(1));
                isect = ray_sphere_intersect(isect, ray, spheres(2));
                isect = ray_plane_intersect (isect, ray, plane);

                if isect.hit == 1 @{
                    let col = ambient_occlusion(isect, spheres, plane, rand);

                    r += col;
                    g += col;
                    b += col;
                }
            }
        }

        r /= (nsubsamples * nsubsamples) as f64;
        g /= (nsubsamples * nsubsamples) as f64;
        b /= (nsubsamples * nsubsamples) as f64;

        out(clamp(r), clamp(g), clamp(b))
    }
}

fn init_scene(mut spheres: [Sphere * 3], mut plane: Plane) -> ([Sphere * 3], Plane) {
    spheres(0).center.x = -2.0;
    spheres(0).center.y =  0.0;
    spheres(0).center.z = -3.5;
    spheres(0).radius   =  0.5;

    spheres(1).center.x = -0.5;
    spheres(1).center.y =  0.0;
    spheres(1).center.z = -3.0;
    spheres(1).radius   =  0.5;

    spheres(2).center.x =  1.0;
    spheres(2).center.y =  0.0;
    spheres(2).center.z = -2.2;
    spheres(2).radius   =  0.5;

    plane.p.x =  0.0;
    plane.p.y = -0.5;
    plane.p.z =  0.0;

    plane.n.x = 0.0;
    plane.n.y = 1.0;
    plane.n.z = 0.0;

    (spheres, plane)
}

extern
fn aobench() -> () {
    let img = alloc_cpu(WIDTH*HEIGHT*3 * 1);
    let mut spheres: [Sphere * 3];
    let mut plane: Plane;
    let scene = init_scene(spheres, plane);
    spheres = scene(0);
    plane = scene(1);
    render(img, WIDTH, HEIGHT, NSUBSAMPLES, spheres, plane);
    saveppm(bitcast[&[u8]](img.data), WIDTH, HEIGHT);
    release(img);
    print_total_timing()
}
