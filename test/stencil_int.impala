// DSL implementation

fn range(lower: int, upper: int, yield: fn(int, fn())) -> () {
    if lower < upper {
        yield(lower);
        range(lower+1, upper, yield, return)
    }
}

fn apply_bh(mut index: int,
            bh_lower: fn(int, int) -> int, bh_upper: fn(int, int) -> int,
            lb: int, ub: int) -> int {
    if index < lb  { index = bh_lower(index, lb); }
    if index >= ub { index = bh_upper(index, ub); }
    index
}

fn apply_stencil(N: int, arr: Buffer, mut out: Buffer, stencil: [float * 3],
                 bh_lower: fn(int, int) -> int, bh_upper: fn(int, int) -> int) -> () {
    let size = 1;
    let lb = [0, size, N - size];
    let ub = [size, N - size, N];
    for region in @range(0, 3) {
        let lower = lb(region);
        let upper = ub(region);
        for x in $range(lb(region), ub(region)) @{
            // apply stencil to pixel
            let mut sum = 0.0f;
            for j in range(-size, size+1) {
                let idx = apply_bh(x + j, bh_lower, bh_upper, lower, upper);
                sum += stencil(j + size) * (arr.data as &[f32])(idx);
            }
            (out.data as &[f32])(x) = sum;
        }
    }
}


// DSL code

fn bh_clamp_lower(index: int, lower: int) -> int {
    if index < lower { lower } else { index }
}

fn bh_clamp_upper(index: int, upper: int) -> int {
    if index >= upper { upper - 1 } else { index }
}

fn main() -> int {
    let width   = 2048;
    let height  = 2048;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let num_it  = 100;
    let mut arr = alloc_host(width * height * 4);
    let mut out = alloc_host(width * height * 4);
    let stencil = [b, a, b];

    for iter in range(0, num_it) {
        @apply_stencil(width, arr, out, stencil, bh_clamp_lower, bh_clamp_upper);

        let tmp = arr;
        arr = out;
        out = tmp;
    }

    // do something with the result as test
    let mut sum = 0.0f;
    for iter in range(0, width*height) {
        sum += (out.data as &[f32])(iter)
    }

    release(arr);
    release(out);

    if sum > -1.0f && sum < 1.0f { 0 } else { 1 }
}
