fn range(lower: i32, upper: i32, body: fn(i32, fn())) -> () {
    if lower < upper {
        body(lower);
        range(lower+1, upper, body, return)
    }
}

fn iteration(width: i32, height: i32, body: fn(i32, i32) -> ()) -> () {
    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    with acc(acc_dev(), grid, block) @{
        body(acc_gidx(), acc_gidy());
    }
}

fn write(mut out: &[f32], src: &[f32], i: i32) -> () { out(i) = src(i) }

fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let mut arr = alloc_host(width * height * sizeof[f32]());
    let mut out = alloc_host(width * height * sizeof[f32]());
    let arr_gpu = acc_alloc(acc_dev(), width * height * sizeof[f32]());
    let out_gpu = acc_alloc(acc_dev(), width * height * sizeof[f32]());
    for i in range(0, width*height) {
        (arr.data as &[f32])(i) = i as f32;
        (out.data as &[f32])(i) = 0.0f;
    }

    copy(arr, arr_gpu, width * height * sizeof[f32]());

    for x, y in @iteration(width, height) {
        write(out_gpu.data as &[f32], arr_gpu.data as &[f32], y*width + x);
    }

    copy(out_gpu, out, width * height * 4 /* sizeof[f32]() */);

    let mut passed = 0;
    for i in range(0, width*height) {
        if (out.data as &[f32])(i) != (arr.data as &[f32])(i) { passed++; }
    }
    if passed == 0 {
        thorin_print_string("Test PASSED!\n");
    } else {
        thorin_print_string("Test FAILED!\n");
    }

    release(out_gpu);
    release(arr_gpu);
    release(arr);
    release(out);

    if passed >= 256 { 255 } else { passed }
}
