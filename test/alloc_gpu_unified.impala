fn range(lower: i32, upper: i32, body: fn(i32, fn())) -> () {
    if lower < upper {
        body(lower);
        range(lower+1, upper, body, return)
    }
}

fn iteration(width: i32, height: i32, body: fn(i32, i32) -> ()) -> () {
    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    with acc(acc_dev(), grid, block) @{
        body(acc_gidx(), acc_gidy());
    }
}

fn write(mut out: &[f32], src: &[f32], i: i32) -> () { out(i) = src(i) }

fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let arr_buf = acc_alloc_unified(acc_dev(), width * height * sizeof[f32]());
    let out_buf = acc_alloc_unified(acc_dev(), width * height * sizeof[f32]());
    let mut arr = arr_buf.data as &[f32];
    let mut out = out_buf.data as &[f32];
    for i in range(0, width*height) {
        arr(i) = i as f32;
        out(i) = 0.0f;
    }

    for x, y in @iteration(width, height) {
        write(out, arr, y*width + x);
    }

    let mut passed = 0;
    for i in range(0, width*height) {
        if out(i) != arr(i) { passed++; }
    }
    if passed == 0 {
        thorin_print_string("Test PASSED!\n");
    } else {
        thorin_print_string("Test FAILED!\n");
    }

    release(arr_buf);
    release(out_buf);

    if passed >= 256 { 255 } else { passed }
}
