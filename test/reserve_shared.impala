fn range(lower: i32, upper: i32, body: fn(i32, fn())) -> () {
    if lower < upper {
        body(lower);
        range(lower+1, upper, body, return)
    }
}

fn iteration(out: Buffer, arr: Buffer, width: i32, height: i32, body: fn(i32, i32, fn(i32, i32) -> f32, fn(i32, i32, f32) -> ()) -> ()) -> () {
    let arr_buf_gpu = acc_alloc(acc_dev(), width * height * 4 /* sizeof[f32]() */);
    let out_buf_gpu = acc_alloc(acc_dev(), width * height * 4 /* sizeof[f32]() */);
    let     arr_gpu = arr_buf_gpu.data as &[1][f32];
    let mut out_gpu = out_buf_gpu.data as &[1][f32];
    copy(arr, arr_buf_gpu, width * height * 4 /* sizeof[f32]() */);

    let grid  = (width, height, 1);
    let block = (128, 1, 1);
    with acc(acc_dev(), grid, block) @{
        let mut shared = reserve_shared_f32(block(0) * block(1));
        // arr -> shared
        body(acc_gidx(), acc_gidy(),
             |x, y|      { arr_gpu(y*width + x) },
             |x, y, val| {  shared(acc_tidx()) = val; });
        // shared -> out
        body(acc_gidx(), acc_gidy(),
             |x, y|      {  shared(acc_tidx()) },
             |x, y, val| { out_gpu(y*width + x) = val; });
    }

    copy(out_buf_gpu, out, width * height * 4 /* sizeof[f32]() */);
    release(out_buf_gpu);
    release(arr_buf_gpu);
}

fn main() -> i32 {
    let width   = 2048;
    let height  = 2048;
    let mut arr = alloc_host(width * height * sizeof[f32]());
    let mut out = alloc_host(width * height * sizeof[f32]());
    for i in range(0, width*height) {
        (arr.data as &[f32])(i) = i as f32;
        (out.data as &[f32])(i) = 0.0f;
    }

    for x, y, read, write in @iteration(out, arr, width, height) {
        let val = read(x, y);
        write(x, y, val);
    }

    let mut passed = 0;
    for i in range(0, width*height) {
        if (out.data as &[f32])(i) != (arr.data as &[f32])(i) { passed++; }
    }
    if passed == 0 {
        thorin_print_string("Test PASSED!\n");
    } else {
        thorin_print_string("Test FAILED!\n");
    }

    release(arr);
    release(out);

    if passed >= 256 { 255 } else { passed }
}
