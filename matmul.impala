fn matmul(mut res: &[float], num_rows: int, num_cols: int, a: &[float], b: &[float], num: int) -> () {
    fn index_res(x: int, y: int) -> int {
        num_cols*y + x
    }
    fn index_a(x: int, y: int) -> int {
        index_res(x, y)
    }
    fn index_b(x: int, y: int) -> int {
        num*y + x
    }

    for y in iterate(0, num_rows) {
        for x in iterate(0, num_cols) {
            let mut sum = 0.f;
            for i in iterate(0, num) {
                sum += a(index_a(i, y))*b(index_b(x, i));
            }
            res(index_res(x, y)) = sum;
        }
    }
}

fn matmul2(res: &[float], a: &[float], b: &[float], num: int) -> () {
    matmul(res, num, num, a, b, num);
}

fn main(i: int) -> int {
    let a   = ~[3*3:float];
    let b   = ~[3*3:float];
    let res = ~[3*3:float];
//    reset_and_start_timer();
    @matmul2(res, a, b, i);
//    print_time();
    0
}
