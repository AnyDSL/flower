struct Mat {
    rows  : fn() -> i32,
    cols  : fn() -> i32,
    read  : fn(i32, i32) -> f32,
    write : fn(i32, i32, f32) -> (),
}

fn get_mat(mut buf: Buffer, rows: i32, cols: i32) -> Mat {
    Mat {
        rows  : || rows,
        cols  : || cols,
        read  : |x, y| { (buf.data as &[f32])(y * cols + x) },
        write : |x, y, v| { (buf.data as &[f32])(y * cols + x) = v },
    }
}

fn min(a: i32, b: i32) -> i32 { if a < b { a } else { b } }

fn get_step(lvl: i32) -> i32 {
    // 2048 -> 256 -> 1 -> 0
    if lvl == 0 {
        256
    } else if lvl == 1 {
        1
    } else {
        0
    }
}

fn tiled_loop(upper: i32, body: fn(i32) -> ()) -> () {
    fn tile(cur_lvl: i32, a: i32, b: i32) -> () {
        let step = get_step(cur_lvl);
        if step <= 0 {
            body(a)
        } else {
            for i in $range_step(a, b, step) {
                @tile(cur_lvl + 1, i, i + step);
            }
        }
    }
    tile(0, 0, upper);
}


fn matmul_golden(C: Mat, A: Mat, B: Mat) -> () {
    for i in $range(0, C.rows()) {
        for k in range(0, C.cols()) @{
            let mut sum = 0.0f;
            for j in $range(0, A.cols()) @{
                sum += A.read(j, i) * B.read(k, j);
            }
            C.write(k, i, sum);
        }
    }
}


fn matmul_hand_tiled(C: Mat, A: Mat, B: Mat) -> () {
    // initialize C with zeros
    for y in range(0, C.rows()) {
        for x in range(0, C.cols()) {
            C.write(x, y, 0.0f);
        }
    }

    // tiling parameter
    let bs = 256;

    for i0 in $range_step(0, C.rows(), bs) {
        for k0 in range_step(0, C.cols(), bs) {
            for j0 in range_step(0, A.cols(), bs) {

                for i in range(i0, min(i0+bs, C.rows())) {
                    for k in range(k0, min(k0+bs, C.cols())) @{
                        let mut sum = C.read(k, i);
                        for j in $range(j0, min(j0+bs, A.cols())) @{
                            sum += A.read(j, i) * B.read(k, j);
                        }
                        C.write(k, i, sum);
                    }
                }
            }
        }
    }
}


fn matmul_tiled(C: Mat, A: Mat, B: Mat) -> () {
    /*
    // initialize C with zeros
    for y in range(0, C.rows()) {
        for x in range(0, C.cols()) {
            C.write(x, y, 0.0f);
        }
    }
    */
    for i in $range(0, C.rows()) {
        for k in range(0, C.cols()) @{
            let mut sum = 0.0f;
            for j in tiled_loop(A.cols()) {
                // C(i, k) += A(i, j) * B(j, k);
                sum += A.read(j, i) * B.read(k, j);
            }
            C.write(k, i, sum);
        }
    }
}


fn main(i: i32) -> i32 {
    let l = 512;
    let m = 1024;
    let n = 2048;
    let A_buf = alloc_host(l * m * 4); // mxl
    let B_buf = alloc_host(m * n * 4); // nxm
    let C_buf = alloc_host(l * n * 4); // nxl
    let R_buf = alloc_host(l * n * 4); // nxl
    let A = get_mat(A_buf, l, m); // mxl
    let B = get_mat(B_buf, m, n); // nxm
    let C = get_mat(C_buf, l, n); // nxl
    let R = get_mat(R_buf, l, n); // nxl
    init_rand(A_buf.data as &[f32], A.cols(), A.rows());
    init_rand(B_buf.data as &[f32], B.cols(), B.rows());

    let nops = (2 as i64) * (l as i64) * (m as i64) * (n as i64);
    fn print_gflops(time: i64) -> () {
        print_string("Timing: ");
        print_double(time as f64 / 1000.0);
        print_string(" ms\n");
        let gflops = (1.0e-9 * (nops as f64)) / (time as f64 * 1.0e-6);
        print_double(gflops);
        print_string(" GFLOPS\n")
    }

    fn bench_fun(fun: fn() -> ()) -> () {
        let start = thorin_get_micro_time();
        fun();
        let end = thorin_get_micro_time();
        print_gflops(end - start);
    }

    with bench_fun() {
        @matmul_golden(R, A, B);
    }

    with bench_fun() {
        @matmul_hand_tiled(C, A, B);
    }


    let mut passed = 0;
    for y in range(0, C.rows()) {
        for x in range(0, C.cols()) {
            if C.read(x, y) != R.read(x, y) {
                passed++;
            }
        }
    }
    if passed == 0 {
        thorin_print_string("Test PASSED!\n");
    } else {
        thorin_print_string("Test FAILED!\n");
    }

    release(A_buf);
    release(B_buf);
    release(C_buf);
    release(R_buf);

    passed
}
