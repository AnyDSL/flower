type Loop = fn(i32, i32, fn(i32) -> ()) -> ();
type Loop_xy = fn(i32, i32, i32, i32, fn(i32, i32) -> ()) -> ();
type Op = (fn((i32, i32), i32, i32) -> i32, i32, i32);

struct Img {
    width: i32,
    height: i32,
    data: &[i32]
};

fn @access(img: Img, x: i32, y:  i32) -> i32 { img.data(y*img.height + x) }

fn @combine_xy(loop_x: Loop, loop_y: Loop) -> Loop_xy {
    |x, y, w, h, body|
        loop_y(y, h, |yy|
            loop_x(x, w, |xx|
                body(xx, yy)))
}

fn @combine_xy2(loop: Loop) -> Loop_xy { combine_xy(loop, loop) }

fn @tile(x_step: i32, y_step: i32, loop_x: Loop, loop_y: Loop) -> Loop_xy {
    |x_lower, y_lower, x_upper, y_upper, body: fn(i32, i32)->()|
        loop_y(0, (y_upper - y_lower) / y_step, |ly|
            range(ly * y_step + y_lower, (ly + 1) * y_step + y_lower, |ry|
                range(0, (x_upper - x_lower) / x_step, |rx|
                    loop_x(rx * x_step + x_lower, (rx + 1) * x_step + x_lower, |lx|
                        body(lx, ry)))))
}

fn vec(vector_length: i32) -> Loop {
    |lower, upper, body| vectorize(vector_length, 32, lower, upper, body)
}

fn par(num_threads: i32) -> Loop {
    |lower, upper, body| parallel(num_threads, lower, upper, body)
}

// compute

fn @compute(out: Img, loop: Loop_xy, op: Op) -> fn(i32, i32) -> i32 {
    let (f, x_extent, y_extent) = op;
    let width  = out.width;
    let height = out.height;
    let data   = bitcast[&mut[i32]](out.data);

    let x_aligned = round_up(x_extent, 512);
    let y_aligned = round_up(y_extent, 32);

    let x_region = [[0, x_aligned], [x_aligned, width  - x_aligned], [width  - x_aligned, width]];
    let y_region = [[0, y_aligned], [y_aligned, height - y_aligned], [height - y_aligned, height]];

    for ry in unroll(0, 3) @{
        for rx in unroll(0, 3) @{
            for x, y in loop(x_region(rx)(0), y_region(ry)(0), x_region(rx)(1), y_region(ry)(1)) {
                data(y * width + x) = f((rx, ry), x, y);
            }
        }
    }
    |x, y| data(y * width + x)
}

// border handling

fn @clip(v: i32, a: i32, b: i32) -> i32 { min(max(v, a), b) }

fn @is_within(region: (i32, i32), x: i32, y: i32, w: i32, h: i32) -> bool {
    let (rx, ry) = region;
    pe_info("region", region);
    let check = @|r, x, w| match r {
        0 => 0 <= x,
        2 => x < w,
        _ => true
    };
    check(rx, x, w) && check(ry, y, h)
}

type Region = (i32, i32);
type Border = fn(Region, Img, i32, i32) -> i32;

fn @border_img(region: Region, img: Img, x: i32, y: i32, border: fn() -> i32) -> fn(i32, i32) -> i32 {
    @|x, y| if is_within(region, x, y, img.width, img.height) {
        access(img, x, y)
    } else {
        border()
    }
}

fn @border_const(v: i32) -> fn((i32, i32), Img, i32, i32) -> fn(i32, i32) -> i32 {
    @|region, img, x, y| border_img(region, img, x, y, @|| v)
}

fn @border_clamp(region: Region, img: Img, x: i32, y: i32) -> fn(i32, i32) -> i32 {
    border_img(region, img, x, y, @|| access(img, clip(x, 0, img.width), clip(y, 0, img.height)))
}

fn @border_mirror(region: Region, img: Img, x: i32, y: i32) -> fn(i32, i32) -> i32 {
    let mirror = @|x, w| if x < 0 { -x } else { if x >= w { w + w - x - 1 } else { x } };
    border_img(region, img, x, y, @|| access(img, mirror(x, img.width), mirror(y, img.height)))
}


extern
fn run_halide(data: &mut[i32], width: i32, height: i32) -> () {
    let img = Img { width : width, height : height, data : data };
    let out = Img { width : width, height : height, data : ~[width*height:i32] };

    let blur = (@|region, x, y| {
        //let read = border_mirror(region, img, x, y);
        let read = border_const(0)(region, img, x, y);
        let blur_x = @|x, y| (  read(x-1, y) +   read(x, y) +   read(x+1, y))/3;
        let blur_y = @|x, y| (blur_x(x, y-1) + blur_x(x, y) + blur_x(x, y+1))/3;
        blur_y(x, y)
    }, 1, 1);

    //let schedule = combine_xy(range, range);
    //let schedule = combine_xy(vec(8), par(16));
    //let schedule = tile(256, 32, vec(8), par(4));

    let schedule = tile(512, 32, range, range);

    with benchmark_cpu() {
        compute(out, schedule, blur);
    }
    print_total_timing();

    for y in range(0, height) {
        for x in range(0, width) {
            data(y * width + x) = out.data(y * width + x);
        }
    }
}
