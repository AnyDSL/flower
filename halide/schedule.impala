type Read = fn(i32, i32) -> i32;
type BinOp = fn(i32, i32) -> i32;

type ReadOp = fn(Read, i32, i32) -> i32;

type Region = (i32, i32);
type Border = fn(Region) -> Read;
type ImgBorder = fn(Img) -> Border;

type Loop = fn(i32, i32, fn(i32) -> ()) -> ();
type Loop_xy = fn(Border, i32, i32, i32, i32, fn(Read, i32, i32) -> ()) -> ();

struct Img {
    width  : i32,
    height : i32,
    data : &[i32]
};


// compute

fn @compute(input: Img, out: Img, border: ImgBorder, loop: Loop_xy, f: ReadOp) -> BinOp {
    let width  = out.width;
    let height = out.height;
    let data   = bitcast[&mut[i32]](out.data);

    for read, x, y in loop(border(input), 0, 0, width, height) @{
        data(y * width + x) = f(read, x, y);
    }
    |x, y| data(y * width + x)
}


// border handling

fn @access(img: Img, x: i32, y:  i32) -> i32 { img.data(y * img.width + x) }

fn @clip(v: i32, a: i32, b: i32) -> i32 { min(max(v, a), b) }

fn @is_within(region: Region, x: i32, y: i32, w: i32, h: i32) -> bool {
    let (rx, ry) = region;
    pe_info("region", region);
    let check = @|region, idx, upper| match region {
        0 => 0 <= idx,
        2 => idx < upper,
        _ => true
    };
    check(rx, x, w) && check(ry, y, h)
}

fn @border_img(border: fn(Img, i32, i32) -> i32) -> ImgBorder {
    @|img| @|region| @|x, y| if is_within(region, x, y, img.width, img.height) {
        access(img, x, y)
    } else {
        @@border(img, x, y)
    }
}

fn @border_const(v: i32) -> ImgBorder {
    border_img(@|_, _, _| v)
}

fn @border_clamp() -> ImgBorder {
    border_img(@|img, x, y| access(img, clip(x, 0, img.width-1), clip(y, 0, img.height-1)))
}

fn @border_mirror() -> ImgBorder {
    let mirror = @|x, w| if x < 0 { -x } else { if x >= w { w + w - x - 1 } else { x } };
    border_img(@|img, x, y| access(img, mirror(x, img.width), mirror(y, img.height)))
}


fn vec(vector_length: i32) -> Loop {
    |lower, upper, body| vectorize(vector_length, 32, lower, upper, body)
}

fn par(num_threads: i32) -> Loop {
    |lower, upper, body| parallel(num_threads, lower, upper, body)
}

fn @combine_xy(loop_x: Loop, loop_y: Loop, extent: (i32, i32)) -> Loop_xy {
    @|border: Border, x_lower, y_lower, x_upper, y_upper, body: fn(Read, i32, i32)->()| {
        let (x_extent, y_extent) = extent;
        let (tile_x, tile_y) = (1, 1);

        for region_y in unroll(0, 3) {
            let (y_lower, y_upper) = get_bounds(y_lower, y_upper, tile_y, y_extent, region_y);
            for region_x in unroll(0, 3) {
                let (x_lower, x_upper) = get_bounds(x_lower, x_upper, tile_x, x_extent, region_x);
                let read = border((region_x, region_y));
                loop_y(y_lower, y_upper, |yy|
                    loop_x(x_lower, x_upper, |xx|
                        body(read, xx, yy)))
            }
        }
    }
}

fn @tile(tile_x: i32, tile_y: i32, loop_x: Loop, loop_y: Loop, extent: (i32, i32)) -> Loop_xy {
    |border: Border, x_lower, y_lower, x_upper, y_upper, body: fn(Read, i32, i32)->()| {
        let (x_extent, y_extent) = extent;

        for region_y in unroll(0, 3) {
            let (y_lower, y_upper) = get_bounds(y_lower, y_upper, tile_y, y_extent, region_y);
            for region_x in unroll(0, 3) {
                let (x_lower, x_upper) = get_bounds(x_lower, x_upper, tile_x, x_extent, region_x);
                let read = border((region_x, region_y));

                if region_x == 1 && region_y == 1 {
                    loop_y(0, (y_upper - y_lower) / tile_y, |ly|
                        range(ly * tile_y + y_lower, (ly + 1) * tile_y + y_lower, |ry|
                            range(0, (x_upper - x_lower) / tile_x, |rx|
                                loop_x(rx * tile_x + x_lower, (rx + 1) * tile_x + x_lower, |lx|
                                    body(read, lx, ry)))))
                } else {
                    loop_y(y_lower, y_upper, |y|
                        loop_x(x_lower, x_upper, |x|
                            body(read, x, y)))
                }
            }
        }
    }
}


fn @tile_tmp_x(tile_x: i32, tile_y: i32, inner_loop_x: Loop, loop_y: Loop, body_pre: ReadOp, extent_pre: (i32, i32), extent: (i32, i32)) -> Loop_xy {
    @|border: Border, x_lower, y_lower, x_upper, y_upper, body: fn(Read, i32, i32)->()| {
        let (x_extent, y_extent) = (extent(0) + extent_pre(0), extent(1) + extent_pre(1));

        for region_y in unroll(0, 3) {
            let (y_lower, y_upper) = get_bounds(y_lower, y_upper, tile_y, y_extent, region_y);
            for region_x in unroll(0, 3) {
                let (x_lower, x_upper)   = get_bounds(x_lower, x_upper, tile_x, x_extent, region_x);
                let (x_extent, y_extent) = extent;
                let read = border((region_x, region_y));

                let inner = @|outer_y| @|outer_x| {
                    let (tmp_size_x, tmp_size_y) = (tile_x + 2 * x_extent, tile_y + 2 * y_extent);
                    let tmp = Img { width : tile_x, height : tile_y, data : ~[tmp_size_x*tmp_size_y:i32] };
                    let tmp_data = bitcast[&mut[i32]](tmp.data);

                    let tile_border = @|region| @|ix, iy| read(x_lower + outer_x * tile_x + ix, y_lower + outer_y * tile_y + iy);
                    let inner_xy = combine_xy(inner_loop_x, range, (0, 0));

                    for read, x, y in inner_xy(tile_border, 0, -1, tile_x, tile_y + 1) @{
                        tmp_data((y+1) * tile_x + x) = body_pre(read, x, y);
                    }

                    let tmp_border = @|region| @|x, y| tmp_data((y - y_lower - outer_y * tile_y + 1) * tile_x + x - x_lower - outer_x * tile_x);
                    for read, x, y in inner_xy(tmp_border, x_lower + outer_x * tile_x,
                                                           y_lower + outer_y * tile_y,
                                                           x_lower + (outer_x+1) * tile_x,
                                                           y_lower + (outer_y+1) * tile_y) @{ body(read, x, y); }
                    runtime_release(0, bitcast[&[i8]](tmp.data));
                };

                if region_x == 1 && region_y == 1 {
                    loop_y(0, (y_upper - y_lower) / tile_y, |outer_y|
                        range(0, (x_upper - x_lower) / tile_x, inner(outer_y)))
                } else {
                    loop_y(y_lower, y_upper, |y|
                       range(x_lower, x_upper, |x|
                          body(@|x, y| body_pre(read, x, y), x, y)))
                }
            }
        }
    }
}


static cuda_dev = 0;
fn @benchmark_cuda(body: fn() -> ()) -> () { total_kernel_timing += benchmark(get_kernel_time, iter_acc, body, || synchronize_cuda(cuda_dev)) }

fn @tile_cuda(tile_x: i32, tile_y: i32, extent: (i32, i32)) -> Loop_xy {
    |border: Border, x_lower, y_lower, x_upper, y_upper, body: fn(Read, i32, i32)->()| {
        let (x_extent, y_extent) = extent;
        for region_y in unroll(0, 3) {
            let (y_lower, y_upper) = get_bounds(y_lower, y_upper, tile_y, y_extent, region_y);
            for region_x in unroll(0, 3) {
                let (x_lower, x_upper) = get_bounds(x_lower, x_upper, tile_x, x_extent, region_x);
                let read = border((region_x, region_y));
                let grid  = (x_upper - x_lower, y_upper - y_lower, 1);
                let block = (tile_x, tile_y, 1);
                cuda(cuda_dev, grid, block, || {
                    let x = x_lower + cuda_threadIdx_x() + cuda_blockDim_x() * cuda_blockIdx_x();
                    let y = y_lower + cuda_threadIdx_y() + cuda_blockDim_y() * cuda_blockIdx_y();
                    body(read, x, y)
                });
            }
        }
        synchronize_cuda(cuda_dev)
    }
}

fn @tile_cuda_tmp(tile_x: i32, tile_y: i32, body_pre: ReadOp, extent_pre: (i32, i32), extent: (i32, i32)) -> Loop_xy {
    @|border: Border, x_lower, y_lower, x_upper, y_upper, body: fn(Read, i32, i32)->()| {
        let (x_extent, y_extent) = (extent(0) + extent_pre(0), extent(1) + extent_pre(1));
        for region_y in unroll(0, 3) {
            let (y_lower, y_upper) = get_bounds(y_lower, y_upper, tile_y, y_extent, region_y);
            for region_x in unroll(0, 3) {
                let (x_lower, x_upper)   = get_bounds(x_lower, x_upper, tile_x, x_extent, region_x);
                let (x_extent, y_extent) = extent;
                let read  = border((region_x, region_y));
                let grid  = (x_upper - x_lower, y_upper - y_lower, 1);
                let block = (tile_x, tile_y, 1);
                cuda(cuda_dev, grid, block, || {
                    let (tid_x, tid_y) = (cuda_threadIdx_x(), cuda_threadIdx_y());
                    let gid_x = x_lower + tid_x + cuda_blockDim_x() * cuda_blockIdx_x();
                    let gid_y = y_lower + tid_y + cuda_blockDim_y() * cuda_blockIdx_y();
                    let (tmp_size_x, tmp_size_y) = (tile_x + 2 * x_extent, tile_y + 2 * y_extent);
                    let tmp = reserve_shared[i32](tmp_size_x * tmp_size_y);

                    let tmp_idx = @|x, y| { x_extent + x + (y_extent + y) * tmp_size_x };

                    if tid_y < y_extent {
                        tmp(tmp_idx(tid_x, tid_y - y_extent)) = body_pre(read, gid_x, gid_y - y_extent);
                    }
                    if tid_y >= tile_y - y_extent {
                        tmp(tmp_idx(tid_x, tid_y + y_extent)) = body_pre(read, gid_x, gid_y + y_extent);
                    }
                    tmp(tmp_idx(tid_x, tid_y)) = body_pre(read, gid_x, gid_y);

                    cuda_syncthreads();

                    let tmp_read = @|x, y| tmp(tmp_idx(x - gid_x + tid_x, y - gid_y + tid_y));
                    body(tmp_read, gid_x, gid_y)
                });
            }
        }
        synchronize_cuda(cuda_dev)
    }
}


fn @get_bounds(lower: i32, upper: i32, tile_size: i32, extent: i32, boundary: i32) -> (i32, i32) {
    let lower_aligned = round_up(lower + extent, tile_size);
    let upper_aligned = round_down(upper - extent, tile_size);
    match boundary {
      0 => (lower, lower_aligned),
      1 => (lower_aligned, upper_aligned),
      2 => (upper_aligned, upper),
      _ => undef()
    }
}
