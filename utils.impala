fn range_step(lower: int, upper: int, step: int, yield: fn(int, fn())) -> () {
    if lower < upper {
        yield(lower);
        range_step(lower+step, upper, step, yield, return)
    }
}

fn range_step_rev(upper: int, lower: int, step: int, yield: fn(int, fn())) -> () {
    if upper > lower {
        yield(upper);
        range_step_rev(upper-step, lower, step, yield, return)
    }
}

fn range(lower: int, upper: int, yield: fn(int, fn())) -> () { range_step(lower, upper, 1, yield) }
fn range_rev(upper: int, lower: int, yield: fn(int, fn())) -> () { range_step_rev(upper, lower, 1, yield) }

fn force_unroll(a: int, b: int, yield: fn(int, fn())) -> () {
    if a < b {
        yield(a);
        @force_unroll(a+1, b, yield, return)
    }
}

fn range_times_two(lower: int, upper: int, yield: fn(int, fn())) -> () {
    if lower < upper {
        yield(lower);
        range_times_two(lower*2, upper, yield, return)
    }
}

fn init_zero(mut arr: &[float], width: int, height: int) -> () {
    for i in range(0, width*height) {
        arr(i) = 0.0f;
    }
}
fn init_rand(mut arr: &[float], width: int, height: int) -> () {
    for y in range(0, height) {
        for x in range(0, width) {
            arr(y*width + x) = thorin_random_val() * 1024f;
        }
    }
}

// border handling specialization
fn nobh_center (idx: int, lower: int, upper: int, out: fn(f32)) -> int { idx }
fn clamp_lower (idx: int, lower: int, upper: int, out: fn(f32)) -> int {
    if idx < lower { lower } else { idx }
}
fn clamp_upper (idx: int, lower: int, upper: int, out: fn(f32)) -> int {
    if idx >= upper { upper - 1 } else { idx }
}
fn mirror_lower(idx: int, lower: int, upper: int, out: fn(f32)) -> int {
    if idx < lower { lower + (lower - idx-1) } else { idx }
}
fn mirror_upper(idx: int, lower: int, upper: int, out: fn(f32)) -> int {
    if idx >= upper { upper - (idx+1 - upper) } else { idx }
}
fn repeat_lower(idx: int, lower: int, upper: int, out: fn(f32)) -> int {
    if idx < lower { idx + (lower + upper) } else { idx }
}
fn repeat_upper(idx: int, lower: int, upper: int, out: fn(f32)) -> int {
    if idx >= upper { idx - (lower + upper) } else { idx }
}
fn const_lower (idx: int, lower: int, upper: int, cval: f32, out: fn(f32)) -> int {
    if idx < lower { out(cval) } else { idx }
}
fn const_upper (idx: int, lower: int, upper: int, cval: f32, out: fn(f32)) -> int {
    if idx >= upper { out(cval) } else { idx }
}
fn wrap_const_fun(fun: fn(int, int, int, f32, fn(f32)) -> int, cval: float) -> fn(int, int, int, fn(f32)) -> int {
    |idx, lower, upper, out| fun(idx, lower, upper, cval, out)
}
fn pixel_at(acc: Acc, x: int, y: int) -> float {
    acc.img.data((acc.roi.o_y + acc.roy + y) * acc.img.stride + acc.roi.o_x + acc.rox + x)
}
fn get_pixel(acc: Acc, x: int, y: int,
             bh_lower: fn(int, int, int, fn(f32)) -> int,
             bh_upper: fn(int, int, int, fn(f32)) -> int
            ) -> float {
    let mut idx_x = acc.roi.o_x + acc.rox + x;
    let mut idx_y = acc.roi.o_y + acc.roy + y;

    let lower_x = acc.roi.o_x;
    let lower_y = acc.roi.o_y;
    let upper_x = acc.roi.o_x + acc.roi.width;
    let upper_y = acc.roi.o_y + acc.roi.height;

    // 0 --- 1 --- 2
    // 3 --- 4 --- 5
    // 6 --- 7 --- 8

    // left
    if acc.region == 0 { idx_x = bh_lower(idx_x, lower_x, upper_x, return); }
    if acc.region == 3 { idx_x = bh_lower(idx_x, lower_x, upper_x, return); }
    if acc.region == 6 { idx_x = bh_lower(idx_x, lower_x, upper_x, return); }

    // right
    if acc.region == 2 { idx_x = bh_upper(idx_x, lower_x, upper_x, return); }
    if acc.region == 5 { idx_x = bh_upper(idx_x, lower_x, upper_x, return); }
    if acc.region == 8 { idx_x = bh_upper(idx_x, lower_x, upper_x, return); }

    // top
    if acc.region == 0 { idx_y = bh_lower(idx_y, lower_y, upper_y, return); }
    if acc.region == 1 { idx_y = bh_lower(idx_y, lower_y, upper_y, return); }
    if acc.region == 2 { idx_y = bh_lower(idx_y, lower_y, upper_y, return); }

    // bottom
    if acc.region == 6 { idx_y = bh_upper(idx_y, lower_y, upper_y, return); }
    if acc.region == 7 { idx_y = bh_upper(idx_y, lower_y, upper_y, return); }
    if acc.region == 8 { idx_y = bh_upper(idx_y, lower_y, upper_y, return); }

    // all in
    if acc.region == 10 {
        idx_x = bh_lower(idx_x, lower_x, upper_x, return);
        idx_x = bh_upper(idx_x, lower_x, upper_x, return);
        idx_y = bh_lower(idx_y, lower_y, upper_y, return);
        idx_y = bh_upper(idx_y, lower_y, upper_y, return);
    }

    acc.img.data(idx_y*acc.img.stride + idx_x)
}


static mut total_kernel_timing = 0i64;
static mut total_cpu_timing = 0i64;

fn benchmark(get_time: fn() -> i64, num_iter: i32, body: fn() -> ()) -> i64 {
    let mut times = ~[num_iter:i64];
    for i in $range(0, num_iter) @{
        let start = get_time();
        body();
        times(i) = get_time() - start;
    }
    sort_i64(num_iter, times as &[i64]);
    print_string("Timing: ");
    print_double(times(num_iter/2) as f64 / 1000.0);
    print_string(" | ");
    print_double(times(0) as f64 / 1000.0);
    print_string(" | ");
    print_double(times(num_iter-1) as f64 / 1000.0);
    print_string(" (median(");
    print_int(num_iter);
    print_string(") | minimum | maximum) ms\n");
    let median = times(num_iter/2);
    release(times as &[i8]);
    median
}

fn benchmark_acc(body: fn() -> ()) -> () { total_kernel_timing += benchmark(thorin_get_kernel_time, 7, body) }
fn benchmark_cpu(body: fn() -> ()) -> () { total_cpu_timing    += benchmark(thorin_get_micro_time, 27, body) }

fn print_total_timing() -> () {
    print_string("Total timing for cpu / kernel: ");
    print_double(total_cpu_timing as f64 / 1000.0);
    print_string(" / ");
    print_double(total_kernel_timing as f64 / 1000.0);
    print_string(" ms\n")
}

fn sort_i64(num: int, mut arr: &[i64]) -> () {
    // insertion sort
    for i in range(1, num) {
        let x = arr(i);
        let mut j = i;
        while j > 0 && arr(j-1) > x {
            arr(j) = arr(j-1);
            j = j - 1;
        }
        arr(j) = x;
    }
}
fn sort_f32(num: int, mut arr: &[f32]) -> () {
    // insertion sort
    for i in range(1, num) {
        let x = arr(i);
        let mut j = i;
        while j > 0 && arr(j-1) > x {
            arr(j) = arr(j-1);
            j = j - 1;
        }
        arr(j) = x;
    }
}

// nearest multiple of num
fn round_up(num: i32, multiple: i32) -> i32 { ((num + multiple - 1) / multiple) * multiple }


// structs for images and accessors
fn get_img(data: &[f32], width: i32, height: i32) -> Img {
    Img { data : data, width : width,  height : height, stride : width }
}
fn get_acc(img: Img, region: i32) -> Acc {
    Acc { img : img, roi : RoI { o_x : 0, o_y : 0, width : img.width, height : img.height }, rox : 0, roy : 0, region : region }
}
struct Img {
    data : &[float],
    width : int,
    height : int,
    stride : int,
}
struct RoI {
    o_x : int,
    o_y : int,
    width : int,
    height : int
}
struct Acc {
    img : Img,
    roi : RoI,
    rox : int,
    roy : int,
    region : int,
}
struct Mask3 {
    data : [[float * 3] * 3],
    size_x : int,
    size_y : int,
}
struct Mask3Sep {
    data : [float * 3],
    size : int,
}
struct Mask5 {
    data : [[float * 5] * 5],
    size_x : int,
    size_y : int,
}
struct Mask5Sep {
    data : [float * 5],
    size : int,
}
