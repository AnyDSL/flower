fn init_data(arr: Img , fill_x :i32, fill_y: i32) -> () {
    let buf = bitcast[&mut[pixel_t]](arr.buf.data);
    let size = (fill_x + fill_y);

    for y in range(0, arr.height) {
        for x in range(0, arr.width) {
            let val = if ((((x % size) >= fill_x) & (( y % size) < fill_y)) | (((x % size) < fill_x) & ((y % size) >= fill_y))) == false {
                255 as pixel_t
            }
            else {
                0 as pixel_t
            };
            buf(y * arr.stride + x) = val;
        }
    }
}

fn main() -> i32 {
    let width  = 1024;
    let height = 1024;

    static mut channel_in_frame_1_to_ix : pipe;
    static mut channel_in_frame_1_to_iy : pipe;
    static mut channel_in_frame_1_to_it : pipe;
    static mut channel_it : pipe;
    static mut channel_ix : pipe;
    static mut channel_iy : pipe;
    static mut channel_ixx : pipe;
    static mut channel_iyy : pipe;
    static mut channel_ixy : pipe;
    static mut channel_ixt : pipe;
    static mut channel_iyt : pipe;
    static mut channel_ix_to_ixx : pipe;
    static mut channel_ix_to_ixy : pipe;
    static mut channel_ix_to_ixt : pipe;
    static mut channel_iy_to_iyy : pipe;
    static mut channel_iy_to_ixy : pipe;
    static mut channel_iy_to_iyt : pipe;
    static mut channel_it_to_ixt : pipe;
    static mut channel_it_to_iyt : pipe;
    static mut channel_wixx : pipe;
    static mut channel_wiyy : pipe;
    static mut channel_wixy : pipe;
    static mut channel_wixt : pipe;
    static mut channel_wiyt : pipe;
    static mut channel_denominator : pipe;
    static mut channel_inv_denom_of_v_x : pipe;
    static mut channel_inv_denom_of_v_y : pipe;
    static mut channel_wixt_to_v_x : pipe;
    static mut channel_wixt_to_v_y : pipe;
    static mut channel_wixy_to_v_x : pipe;
    static mut channel_wixy_to_v_y : pipe;
    static mut channel_wixy_to_denom : pipe;
    static mut channel_wiyt_to_v_x : pipe;
    static mut channel_wiyt_to_v_y : pipe;
    static mut channel_wiyy_to_denom : pipe;
    static mut channel_wiyy_to_v_x :pipe;
    static mut channel_wixx_to_denom : pipe;
    static mut channel_wixx_to_v_y : pipe;

    let in_frame_1 = create_host_img(width, height);
    let in_frame_2 = create_host_img(width, height);
    let out_host_v_x = create_host_img(width, height);
    let out_host_v_y = create_host_img(width, height);

    let it = create_virtual_img(width, height, &mut channel_it );
    let ix = create_virtual_img(width, height, &mut channel_ix );
    let iy = create_virtual_img(width, height, &mut channel_iy );
    let ixx = create_virtual_img(width, height, &mut channel_ixx );
    let iyy = create_virtual_img(width, height, &mut channel_iyy );
    let ixy = create_virtual_img(width, height, &mut channel_ixy );
    let ixt = create_virtual_img(width, height, &mut channel_ixt );
    let iyt = create_virtual_img(width, height, &mut channel_iyt );
    let wixx = create_virtual_img(width, height, &mut channel_wixx );
    let wiyy = create_virtual_img(width, height, &mut channel_wiyy );
    let wixy = create_virtual_img(width, height, &mut channel_wixy );
    let wixt = create_virtual_img(width, height, &mut channel_wixt );
    let wiyt = create_virtual_img(width, height, &mut channel_wiyt );
    let inv_denominator = create_virtual_img(width, height, &mut channel_denominator );

    init_rand(bitcast[&mut[pixel_t]](in_frame_1.buf.data), in_frame_1.stride, in_frame_1.height);
    init_data(in_frame_2, 8, 8);
    init_zero(bitcast[&mut[pixel_t]](out_host_v_x.buf.data), out_host_v_x.stride, out_host_v_x.height);
    init_zero(bitcast[&mut[pixel_t]](out_host_v_y.buf.data), out_host_v_y.stride, out_host_v_y.height);

    fn @get_scharr_mask3(data: [[pixel_t * 3] * 3]) -> Mask {
        Mask {
            data : @|x, y| -> pixel_t { data(y)(x) },
            sum  : 1 as pixel_t, size_x : 3, size_y : 3
        }
    }

    let mask_x = get_scharr_mask3(scharr_maskx);
    let mask_y = get_scharr_mask3(scharr_masky);
    let mask_a = get_mask3(average_mask3);

    let lower = nobh_center;
    let upper = nobh_center;
    //let lower = clamp_lower;
    //let upper = clamp_upper;
    //let lower = mirro_lower;
    //let upper = mirro_upper;
    let enable_offset = 0;

    // Solving I_x * U + I_y * V + I_t = 0
    // I_t        => difference over frames (temporal derivative)
    // I_x , I_y  => Image derivative along x and y, respectively (spatial derivatives)
    // Computing (U = dx/dt, V = dy/dt ) indicating displacement, by Lucas-Kanade method
    // In this implementation We denote U by V_x and V by V_y
    // least squares solution results in a system of equations
    // solving the final system of equations using cramer's rule

    for benchmark_host(num_host_iter) {
        // ---------------- Preprocessing stages ------------------

        // Splitting in_frame_1
        let (in_frame_1_to_ix, in_frame_1_to_iy, in_frame_1_to_it) = split_image3(math, in_frame_1, &mut channel_in_frame_1_to_ix, &mut channel_in_frame_1_to_iy, &mut channel_in_frame_1_to_it);

        // I_t
        for math, x, y, out, in_frame_1_to_it, in_frame_2 in iteration_point2(math, it, in_frame_1_to_it, in_frame_2) {
            let pix_it = in_frame_1_to_it - in_frame_2;
            out.write(x, y, pix_it);
        }


        // Splitting I_t
        let (it_to_ixt, it_to_iyt) =
        split_image(math, it, &mut channel_it_to_ixt, &mut channel_it_to_iyt);

        // I_x
        for math, x, y, out, in_frame_1_to_ix, mask in iteration(math, ix, in_frame_1_to_ix, mask_x, lower, upper) {
            let pix_ix = apply_stencil(x, y, in_frame_1_to_ix, mask);
            out.write(x, y, pix_ix);
        }

        // Spliting Ix
        let (ix_to_ixx, ix_to_ixy, ix_to_ixt) =
        split_image3(math, ix, &mut channel_ix_to_ixx, &mut channel_ix_to_ixy, &mut channel_ix_to_ixt);

        // I_y
        for math, x, y, out, in_frame_1_to_iy, mask in iteration(math, iy, in_frame_1_to_iy, mask_y, lower, upper) {
            let pix_iy = apply_stencil(x, y, in_frame_1_to_iy, mask);
            out.write(x, y, pix_iy);
        }

        // Spliting Iy
        let (iy_to_iyy, iy_to_ixy, iy_to_iyt) =
        split_image3(math, iy, &mut channel_iy_to_iyy, &mut channel_iy_to_ixy, &mut channel_iy_to_iyt);

        // I_xx
        for math, x, y, out, ix_to_ixx in iteration_point(math, ixx, ix_to_ixx) {
            let pix_ixx = ix_to_ixx * ix_to_ixx;
            out.write(x, y, pix_ixx);
        }

        // I_yy
        for math, x, y, out, iy_to_iyy in iteration_point(math, iyy, iy_to_iyy) {
            let pix_iyy = iy_to_iyy * iy_to_iyy;
            out.write(x, y, pix_iyy);
        }

        // I_xy
        for math, x, y, out, ix_to_ixy, iy_to_ixy in iteration_point2(math, ixy, ix_to_ixy, iy_to_ixy) {
            let pix_ixy = ix_to_ixy * iy_to_ixy;
            out.write(x, y, pix_ixy);
        }

        // I_xt
        for math, x, y, out, ix_to_ixt, it_to_ixt in iteration_point2(math, ixt, ix_to_ixt, it_to_ixt) {
            let pix_ixt = ix_to_ixt * it_to_ixt;
            out.write(x, y, pix_ixt);
        }

        // I_yt
        for math, x, y, out, iy_to_iyt, it_to_iyt in iteration_point2(math, iyt, iy_to_iyt, it_to_iyt) {
            let pix_iyt = iy_to_iyt * it_to_iyt;
            out.write(x, y, pix_iyt);
        }

       // windowed weighted averages

       // wixx : windowed I_xx
       for math, x, y, out, ixx, mask in iteration(math, wixx, ixx, mask_a, lower, upper) {
           let pix_wixx = apply_stencil(x, y, ixx, mask);
           out.write(x, y, pix_wixx);
       }

       // Splitting wixx
       let (wixx_to_denom, wixx_to_v_y) = split_image(math, wixx, &mut channel_wixx_to_denom, &mut channel_wixx_to_v_y);

       // wiyy : windowed I_yy
       for math, x, y, out, iyy, mask in iteration(math, wiyy, iyy, mask_a, lower, upper) {
           let pix_wiyy = apply_stencil(x, y, iyy, mask);
           out.write(x, y, pix_wiyy);
       }

       // Splitting wiyy
       let (wiyy_to_denom, wiyy_to_v_x) = split_image(math, wiyy, &mut channel_wiyy_to_denom, &mut channel_wiyy_to_v_x);

       // wixy : windowed I_xy
       for math, x, y, out, ixy, mask in iteration(math, wixy, ixy, mask_a ,lower, upper) {
           let pix_wixy = apply_stencil(x, y, ixy, mask);
           out.write(x, y, pix_wixy);
       }

       // Splitting wixy
       let (wixy_to_denom, wixy_to_v_x, wixy_to_v_y) = split_image3(math, wixy, &mut channel_wixy_to_denom, &mut channel_wixy_to_v_x, &mut channel_wixy_to_v_y);

       // wixt : windowed I_xt
       for math, x, y, out, ixt, mask in iteration(math, wixt, ixt, mask_a, lower, upper) {
           let pix_wixt = apply_stencil(x, y, ixt, mask);
           out.write(x, y, pix_wixt);
       }

       // Splitting wixt
       let (wixt_to_v_x, wixt_to_v_y) = split_image(math, wixt, &mut channel_wixt_to_v_x, &mut channel_wixt_to_v_y);

       // wiyt : windowed I_yt
       for math, x, y, out, iyt, mask in iteration(math, wiyt, iyt, mask_a, lower, upper) {
           let pix_wiyt = apply_stencil(x, y, iyt, mask);
           out.write(x, y, pix_wiyt);
       }

       // Splitting wiyt
       let (wiyt_to_v_x, wiyt_to_v_y) = split_image(math, wiyt, &mut channel_wiyt_to_v_x, &mut channel_wiyt_to_v_y);

       // Inverted denominator of cramer's rule
       for math, x, y, out, wixx_to_denom, wiyy_to_denom, wixy_to_denom in iteration_point3(math, inv_denominator, wixx_to_denom, wiyy_to_denom, wixy_to_denom) {
           let pix_denominator = wixx_to_denom * wiyy_to_denom - wixy_to_denom * wixy_to_denom;
           // denoiminator is equal to the determinant of the coefficient matrix
           // if this determinant is zero the matrix is singular and non-invertible, hence the system of equations has either no or infinite solutions
           // a possible estimation can be found by analysing eigenvalues and normalizing the gradient flow or via an expensive least square approximation.
           let pix_inv_denominator = if (pix_denominator != 0) {
              1 / pix_denominator
            } else { 0 };
           out.write(x, y, pix_inv_denominator);
       }

       // Spliting inv_denominator for two unknowns (V_x and V_y)
       let (inv_denom_of_v_x, inv_denom_of_v_y) = split_image(math, inv_denominator, &mut channel_inv_denom_of_v_x, &mut channel_inv_denom_of_v_y);

       // calculating V_x
       for math, x, y, out, wixt_to_v_x, wiyy_to_v_x, wixy_to_v_x, wiyt_to_v_x, inv_denom_of_v_x in iteration_point5(math, out_host_v_x, wixt_to_v_x, wiyy_to_v_x, wixy_to_v_x, wiyt_to_v_x, inv_denom_of_v_x) {
           let nominator_v_x = ((-1 * wixt_to_v_x) * wiyy_to_v_x) - (wixy_to_v_x * (-1 * wiyt_to_v_x));
           let pix_v_x = nominator_v_x * inv_denom_of_v_x;
           out.write(x, y, pix_v_x);
       }

     // calculating V_y
       for math, x, y, out, wixx_to_v_y, wiyt_to_v_y, wixt_to_v_y, wixy_to_v_y, inv_denom_of_v_y in iteration_point5(math, out_host_v_y, wixx_to_v_y, wiyt_to_v_y, wixt_to_v_y, wixy_to_v_y, inv_denom_of_v_y) {
           let nominator_v_y = (wixx_to_v_y * (-1 * wiyt_to_v_y)) - ((-1 * wixt_to_v_y) * wixy_to_v_y);
           let pix_v_y = nominator_v_y * inv_denom_of_v_y;
           out.write(x, y, pix_v_y);
       }

    }
    print_total_timing();
    // display results
    let in_frame_1_acc = get_acc(in_frame_1, |idx, val| { bitcast[&mut[pixel_t]](in_frame_1.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](in_frame_1.buf.data)(idx));
    let in_frame_2_acc = get_acc(in_frame_2, |idx, val| { bitcast[&mut[pixel_t]](in_frame_2.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](in_frame_2.buf.data)(idx));
    let out_v_x_acc = get_acc(out_host_v_x, |idx, val| { bitcast[&mut[pixel_t]](out_host_v_x.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](out_host_v_x.buf.data)(idx));
    let out_v_y_acc = get_acc(out_host_v_y, |idx, val| { bitcast[&mut[pixel_t]](out_host_v_y.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](out_host_v_y.buf.data)(idx));

    let roi_x = 0;
    let roi_y = 0;
    print_string("Frame 1 ");
    display_image(in_frame_1_acc, roi_x, roi_y);
    print_string("Frame 2 ");
    display_image(in_frame_2_acc, roi_x, roi_y);
    print_string("Optical flow\n\n");
    print_string("Vx:\n");
    display_image(out_v_x_acc, roi_x, roi_y);
    print_string("Vy:\n");
    display_image(out_v_y_acc, roi_x, roi_y);

    release(in_frame_1.buf);
    release(in_frame_2.buf);
    release(out_host_v_x.buf);
    release(out_host_v_y.buf);
    0
}
