fn init_data[T](arr: Img[T] , fill_x :i32, fill_y: i32) -> () {
    let buf = bitcast[&mut[pixel_t]](arr.buf.data);
    let size = (fill_x + fill_y);

    for y in range(0, arr.height) {
        for x in range(0, arr.width) {
            let val = if ((((x % size) >= fill_x) & (( y % size) < fill_y)) | (((x % size) < fill_x) & ((y % size) >= fill_y))) == false {
                255 as pixel_t
            }
            else {
                0 as pixel_t
            };
            buf(y * arr.stride + x) = val;
        }
    }
}


static mut channel_in_frame_1_to_ix : pipe[pixel_t];
static mut channel_in_frame_1_to_iy : pipe[pixel_t];
static mut channel_in_frame_1_to_it : pipe[pixel_t];
static mut channel_it : pipe[pixel_t];
static mut channel_ix : pipe[pixel_t];
static mut channel_iy : pipe[pixel_t];
static mut channel_ixx : pipe[pixel_t];
static mut channel_iyy : pipe[pixel_t];
static mut channel_denom : pipe[pixel_t];
static mut channel_denom_to_common_x : pipe[pixel_t];
static mut channel_denom_to_common_y : pipe[pixel_t];
static mut channel_common_x : pipe[pixel_t];
static mut channel_common_y : pipe[pixel_t];
static mut channel_v0_x : pipe[pixel_t];
static mut channel_v0_y : pipe[pixel_t];
static mut channel_it_to_v0_x : pipe[pixel_t];
static mut channel_it_to_v0_y : pipe[pixel_t];
static mut channel_it_to_common0: pipe[pixel_t];
static mut channel_it_to_common1: pipe[pixel_t];
static mut channel_it_to_common2: pipe[pixel_t];
static mut channel_it_to_common3: pipe[pixel_t];
static mut channel_ix_to_ixx : pipe[pixel_t];
static mut channel_ix_to_common_x : pipe[pixel_t];
static mut channel_ix_to_common0 : pipe[pixel_t];
static mut channel_ix_to_common1 : pipe[pixel_t];
static mut channel_ix_to_common2 : pipe[pixel_t];
static mut channel_ix_to_common3 : pipe[pixel_t];
static mut channel_iy_to_iyy : pipe[pixel_t];
static mut channel_iy_to_common_y : pipe[pixel_t];
static mut channel_iy_to_common0 : pipe[pixel_t];
static mut channel_iy_to_common1 : pipe[pixel_t];
static mut channel_iy_to_common2 : pipe[pixel_t];
static mut channel_iy_to_common3 : pipe[pixel_t];
static mut channel_av0_x : pipe[pixel_t];
static mut channel_av0_y : pipe[pixel_t];
static mut channel_av1_x : pipe[pixel_t];
static mut channel_av1_y : pipe[pixel_t];
static mut channel_av2_x : pipe[pixel_t];
static mut channel_av2_y : pipe[pixel_t];
static mut channel_av3_x : pipe[pixel_t];
static mut channel_av3_y : pipe[pixel_t];
static mut channel_av0_x_to_common0 : pipe[pixel_t];
static mut channel_av0_x_to_v1_x    : pipe[pixel_t];
static mut channel_av0_y_to_common0 : pipe[pixel_t];
static mut channel_av0_y_to_v1_y    : pipe[pixel_t];
static mut channel_av1_x_to_common1 : pipe[pixel_t];
static mut channel_av1_x_to_v2_x    : pipe[pixel_t];
static mut channel_av1_y_to_common1 : pipe[pixel_t];
static mut channel_av1_y_to_v2_y    : pipe[pixel_t];
static mut channel_av2_x_to_common2 : pipe[pixel_t];
static mut channel_av2_x_to_v3_x    : pipe[pixel_t];
static mut channel_av2_y_to_common2 : pipe[pixel_t];
static mut channel_av2_y_to_v3_y    : pipe[pixel_t];
static mut channel_av3_x_to_common3 : pipe[pixel_t];
static mut channel_av3_x_to_v4_x    : pipe[pixel_t];
static mut channel_av3_y_to_common3 : pipe[pixel_t];
static mut channel_av3_y_to_v4_y    : pipe[pixel_t];
static mut channel_common_x_to_v0_x : pipe[pixel_t];
static mut channel_common_x_to_v1_x : pipe[pixel_t];
static mut channel_common_x_to_v2_x : pipe[pixel_t];
static mut channel_common_x_to_v3_x : pipe[pixel_t];
static mut channel_common_x_to_v4_x : pipe[pixel_t];
static mut channel_common_y_to_v0_y : pipe[pixel_t];
static mut channel_common_y_to_v1_y : pipe[pixel_t];
static mut channel_common_y_to_v2_y : pipe[pixel_t];
static mut channel_common_y_to_v3_y : pipe[pixel_t];
static mut channel_common_y_to_v4_y : pipe[pixel_t];
static mut channel_common0 : pipe[pixel_t];
static mut channel_common1 : pipe[pixel_t];
static mut channel_common2 : pipe[pixel_t];
static mut channel_common3 : pipe[pixel_t];
static mut channel_common0_to_v1_x : pipe[pixel_t];
static mut channel_common0_to_v1_y : pipe[pixel_t];
static mut channel_common1_to_v2_x : pipe[pixel_t];
static mut channel_common1_to_v2_y : pipe[pixel_t];
static mut channel_common2_to_v3_x : pipe[pixel_t];
static mut channel_common2_to_v3_y : pipe[pixel_t];
static mut channel_common3_to_v4_x : pipe[pixel_t];
static mut channel_common3_to_v4_y : pipe[pixel_t];
static mut channel_v1_x : pipe[pixel_t];
static mut channel_v2_x : pipe[pixel_t];
static mut channel_v3_x : pipe[pixel_t];
static mut channel_v1_y : pipe[pixel_t];
static mut channel_v2_y : pipe[pixel_t];
static mut channel_v3_y : pipe[pixel_t];


fn main() -> i32 {
    let width  = 1024;
    let height = 1024;

    // function declarations
    let iteration          =  iteration[pixel_t];
    let iteration_point    =  iteration_point[pixel_t];
    let iteration_point2   = iteration_point2[pixel_t];
    let iteration_point3   = iteration_point3[pixel_t];
    let iteration_point5   = iteration_point5[pixel_t];
    let split_image        = split_image[pixel_t];
    let split_image3       = split_image3[pixel_t];
    let split_image5       = split_image5[pixel_t];
    let split_image6       = split_image6[pixel_t];
    let create_virtual_img = create_virtual_img[pixel_t];
    let get_acc            = get_acc[pixel_t];
    let create_host_img    = create_host_img[pixel_t];

    let in_frame_1 = create_host_img(width, height);
    let in_frame_2 = create_host_img(width, height);
    let out_host_v_x    = create_host_img(width, height);
    let out_host_v_y    = create_host_img(width, height);

    let it = create_virtual_img(width, height, &mut channel_it );
    let ix = create_virtual_img(width, height, &mut channel_ix );
    let iy = create_virtual_img(width, height, &mut channel_iy );
    let ixx = create_virtual_img(width, height, &mut channel_ixx );
    let iyy = create_virtual_img(width, height, &mut channel_iyy );
    let denom = create_virtual_img(width, height, &mut channel_denom );
    let common_x = create_virtual_img(width, height, &mut channel_common_x );
    let common_y = create_virtual_img(width, height, &mut channel_common_y );
    let v0_x = create_virtual_img(width, height, &mut channel_v0_x );
    let v0_y = create_virtual_img(width, height, &mut channel_v0_y );
    let av0_x = create_virtual_img(width, height, &mut channel_av0_x );
    let av0_y = create_virtual_img(width, height, &mut channel_av0_y );
    let av1_x = create_virtual_img(width, height, &mut channel_av1_x );
    let av1_y = create_virtual_img(width, height, &mut channel_av1_y );
    let av2_x = create_virtual_img(width, height, &mut channel_av2_x );
    let av2_y = create_virtual_img(width, height, &mut channel_av2_y );
    let av3_x = create_virtual_img(width, height, &mut channel_av3_x );
    let av3_y = create_virtual_img(width, height, &mut channel_av3_y );
    let common0 = create_virtual_img(width, height, &mut channel_common0 );
    let common1 = create_virtual_img(width, height, &mut channel_common1 );
    let common2 = create_virtual_img(width, height, &mut channel_common2 );
    let common3 = create_virtual_img(width, height, &mut channel_common3 );
    let v1_x = create_virtual_img(width, height, &mut channel_v1_x);
    let v2_x = create_virtual_img(width, height, &mut channel_v2_x);
    let v3_x = create_virtual_img(width, height, &mut channel_v3_x);
    let v1_y = create_virtual_img(width, height, &mut channel_v1_y);
    let v2_y = create_virtual_img(width, height, &mut channel_v2_y);
    let v3_y = create_virtual_img(width, height, &mut channel_v3_y);

    init_data(in_frame_1, 8, 8);
    init_data(in_frame_2, 8, 8);
    init_zero(bitcast[&mut[pixel_t]](out_host_v_x.buf.data), out_host_v_x.stride, out_host_v_x.height);
    init_zero(bitcast[&mut[pixel_t]](out_host_v_y.buf.data), out_host_v_y.stride, out_host_v_y.height);

    let mask_x = get_mask3(sobel_maskx);
    let mask_y = get_mask3(sobel_masky);
    let mask_a = get_mask3(average_mask);

    let lower = nobh_center[pixel_t];
    let upper = nobh_center[pixel_t];
    //let lower = clamp_lower[pixel_t];
    //let upper = clamp_upper[pixel_t];
    //let lower = mirro_lower[pixel_t];
    //let upper = mirro_upper[pixel_t];
    let enable_offset = 0;

    // Solving I_x * U + I_y * V + I_t = 0 iteratively by discretising of derivatives via finite differences.
    // I_t        => difference over frames (temporal derivative)
    // I_x , I_y  => Image derivative along x and y, respectively (spatial derivatives)
    // Computing (U = dx/dt, V = dy/dt ) indicating displacement, by Hornâ€“Schunck method
    // In this implementation We denote U by V(n)_x and V by V(n)_x which are computed iteratively for (n) times
    // Horn-Schunk iterations:
    // V(n+1)_x = V(n)_x - ( I_x * [Ix * A * V(n)_x + I_y * A * V(n)_y + I_t]) / alpha^2 + I_xx + I_yy)
    // V(n+1)_y = V(n)_y - ( I_y * [Ix * A * V(n)_x + I_y * A * V(n)_y + I_t]) / alpha^2 + I_xx + I_yy)

    for benchmark_host(num_host_iter) {
        // ---------------- Preprocessing stages ------------------

        // Splitting in_frame_1
        let (in_frame_1_to_ix, in_frame_1_to_iy, in_frame_1_to_it) = split_image3(math, in_frame_1, &mut channel_in_frame_1_to_ix, &mut channel_in_frame_1_to_iy, &mut channel_in_frame_1_to_it);

        // I_t
        for math, x, y, out, in_frame_1_to_it, in_frame_2 in iteration_point2(math, it, in_frame_1_to_it, in_frame_2) {
            let pix_it = in_frame_1_to_it - in_frame_2;
            out.write(x, y, pix_it);
        }

        // I_x
        for math, x, y, out, in_frame_1_to_ix, mask in iteration(math, ix, in_frame_1_to_ix, mask_x, lower, upper) {
            let pix_ix = apply_stencil(x, y, in_frame_1_to_ix, mask);
            out.write(x, y, pix_ix);
        }

        // Spliting Ix
        let (ix_to_ixx, ix_to_common_x ,ix_to_common0, ix_to_common1, ix_to_common2, ix_to_common3) =
        split_image6(math, ix, &mut channel_ix_to_ixx, &mut channel_ix_to_common_x, &mut channel_ix_to_common0, &mut channel_ix_to_common1, &mut channel_ix_to_common2,
        &mut channel_ix_to_common3);

        // I_y
        for math, x, y, out, in_frame_1_to_iy, mask in iteration(math, iy, in_frame_1_to_iy, mask_y, lower, upper) {
            let pix_iy = apply_stencil(x, y, in_frame_1_to_iy, mask);
            out.write(x, y, pix_iy);
        }

        // Spliting Iy
        let (iy_to_iyy, iy_to_common_y, iy_to_common0, iy_to_common1, iy_to_common2, iy_to_common3) =
        split_image6(math, iy, &mut channel_iy_to_iyy, &mut channel_iy_to_common_y, &mut channel_iy_to_common0, &mut channel_iy_to_common1, &mut channel_iy_to_common2,
        &mut channel_iy_to_common3);

        // I_xx
        for math, x, y, out, ix_to_ixx in iteration_point(math, ixx, ix_to_ixx) {
            let pix_ixx = ix_to_ixx * ix_to_ixx;
            out.write(x, y, pix_ixx);
        }

        // I_yy
        for math, x, y, out, iy_to_iyy in iteration_point(math, iyy, iy_to_iyy) {
            let pix_iyy = iy_to_iyy * iy_to_iyy;
            out.write(x, y, pix_iyy);
        }


        // Denominator
        for math, x, y, out, ixx, iyy in iteration_point2(math, denom, ixx, iyy) {
            let pix_iyy = (alpha * alpha) + ixx  + iyy;
            out.write(x, y, pix_iyy);
        }

        // Denom is used both in common_x and common_y
        let (denom_x, denom_y) = split_image(math, denom, &mut channel_denom_to_common_x , &mut channel_denom_to_common_y);

        // Common_x
        for math, x, y, out, denom_x, ix_to_common_x in iteration_point2(math, common_x, denom_x, ix_to_common_x) {
            let pix_denom_x = ix_to_common_x / denom_x;
            out.write(x, y, pix_denom_x);
        }

        // Splitting Common_x
        let (common_x_to_v0_x, common_x_to_v1_x, common_x_to_v2_x, common_x_to_v3_x, common_x_to_v4_x) =
        split_image5(math, common_x, &mut channel_common_x_to_v0_x, &mut channel_common_x_to_v1_x, &mut channel_common_x_to_v2_x,
        &mut channel_common_x_to_v3_x, &mut channel_common_x_to_v4_x);

        // Common_y
        for math, x, y, out, denom_y, iy_to_common_y in iteration_point2(math, common_y, denom_y, iy_to_common_y) {
            let pix_denom_y = iy_to_common_y / denom_y;
            out.write(x, y, pix_denom_y);
        }
        // Splitting Common_y
        let (common_y_to_v0_y, common_y_to_v1_y, common_y_to_v2_y, common_y_to_v3_y, common_y_to_v4_y) =
        split_image5(math, common_y, &mut channel_common_y_to_v0_y, &mut channel_common_y_to_v1_y, &mut channel_common_y_to_v2_y,
        &mut channel_common_y_to_v3_y, &mut channel_common_y_to_v4_y);

        // Split It
        let (it_to_v0_x, it_to_v0_y, it_to_common0, it_to_common1, it_to_common2, it_to_common3) =
        split_image6(math, it, &mut channel_it_to_v0_x, &mut channel_it_to_v0_y , &mut channel_it_to_common0, &mut channel_it_to_common1,
        &mut channel_it_to_common2, &mut channel_it_to_common3);

        // V0_x
        for math, x, y, out, common_x_to_v0_x, it_to_v0_x in iteration_point2(math, v0_x, common_x_to_v0_x, it_to_v0_x) {
            let pix_common_x = -it_to_v0_x * common_x_to_v0_x;
            out.write(x, y, pix_common_x);
        }

        // V0_y
        for math, x, y, out, common_y_to_v0_y, it_to_v0_y in iteration_point2(math, v0_y, common_y_to_v0_y, it_to_v0_y) {
            let pix_common_y = -it_to_v0_y * common_y_to_v0_y;
            out.write(x, y, pix_common_y);
        }

        // ---------------  Iterative section - 4 iterations unrolled -------------
        // V(n+1)_x = AV(n)_x - Common(n)*Common_x
        // V(n+1)_y = AV(n)_y - Common(n)*Common_y
        // n : [0 .. 3]

        // n = 0

        // A*V0_x --> Velocity_x average
        for math, x, y, out, v0_x, mask in iteration(math, av0_x, v0_x, mask_a, lower, upper) {
            let pix_av0_x = apply_stencil(x, y, v0_x, mask);
            out.write(x, y, pix_av0_x);

        }

        // Spliting av0_x
        let (av0_x_to_common0, av0_x_to_v1_x) = split_image(math, av0_x, &mut channel_av0_x_to_common0, &mut channel_av0_x_to_v1_x);

        // A*V0_y --> Velocity_y average
        for math, x, y, out, v0_y, mask in iteration(math, av0_y, v0_y, mask_a, lower, upper) {
            let pix_av0_y = apply_stencil(x, y, v0_y, mask);
            out.write(x, y, pix_av0_y);
        }

        // Spliting av0_y
        let (av0_y_to_common0, av0_y_to_v1_y) = split_image(math, av0_y, &mut channel_av0_y_to_common0, &mut channel_av0_y_to_v1_y);

        // Common0
        for math, x, y, out, av0_x_to_common0, av0_y, ix_to_common0, iy_to_common0, it_to_common0 in
            iteration_point5(math, common0, av0_x_to_common0, av0_y_to_common0, ix_to_common0, iy_to_common0, it_to_common0 ) {
                let pix_common0 = ix_to_common0 * av0_x_to_common0 + iy_to_common0 * av0_x_to_common0 + it_to_common0;
                out.write(x, y, pix_common0);
        }

        // Spliting Common0
        let (common0_to_v1_x, common0_to_v1_y) = split_image(math, common0, &mut channel_common0_to_v1_x, &mut channel_common0_to_v1_y);

        // V1_x
        for math, x, y, out, av0_x_to_v1_x, common0_to_v1_x, common_x_to_v1_x in iteration_point3(math, v1_x, av0_x_to_v1_x, common0_to_v1_x, common_x_to_v1_x) {
            let pix_v1_x = av0_x_to_v1_x - common0_to_v1_x * common_x_to_v1_x ;
            out.write(x, y, pix_v1_x);
        }

        // V1_y
        for math, x, y, out, av0_y_to_v1_y, common0_to_v1_y, common_y_to_v1_y in iteration_point3(math, v1_y, av0_y_to_v1_y, common0_to_v1_y, common_y_to_v1_y) {
            let pix_v1_y = av0_y_to_v1_y - common0_to_v1_y * common_y_to_v1_y ;
            out.write(x, y, pix_v1_y);
        }

        // n=1

        // A*V1_x --> Velocity_x average
        for math, x, y, out, v1_x, mask in iteration(math, av1_x, v1_x, mask_a, lower, upper) {
            let pix_av1_x = apply_stencil(x, y, v1_x, mask);
            out.write(x, y, pix_av1_x);

        }

        // Spliting av1_x
        let (av1_x_to_common1, av1_x_to_v2_x) = split_image(math, av1_x, &mut channel_av1_x_to_common1, &mut channel_av1_x_to_v2_x);

        // A*V1_y --> Velocity_y average
        for math, x, y, out, v1_y, mask in iteration(math, av1_y, v1_y, mask_a, lower, upper) {
            let pix_av1_y = apply_stencil(x, y, v1_y, mask);
            out.write(x, y, pix_av1_y);
        }

        // Spliting av1_y
        let (av1_y_to_common1, av1_y_to_v2_y) = split_image(math, av1_y, &mut channel_av1_y_to_common1, &mut channel_av1_y_to_v2_y);

        // Common1
        for math, x, y, out, av1_x_to_common1, av1_y, ix_to_common1, iy_to_common1, it_to_common1 in
            iteration_point5(math, common1, av1_x_to_common1, av1_y_to_common1, ix_to_common1, iy_to_common1, it_to_common1 ) {
                let pix_common1 = ix_to_common1 * av1_x_to_common1 + iy_to_common1 * av1_x_to_common1 + it_to_common1;
                out.write(x, y, pix_common1);
        }

        // Spliting Common1
        let (common1_to_v2_x, common1_to_v2_y) = split_image(math, common1, &mut channel_common1_to_v2_x, &mut channel_common1_to_v2_y);

        // V2_x
        for math, x, y, out, av1_x_to_v2_x, common1_to_v2_x, common_x_to_v2_x in iteration_point3(math, v2_x, av1_x_to_v2_x, common1_to_v2_x, common_x_to_v2_x) {
            let pix_v2_x = av1_x_to_v2_x - common1_to_v2_x * common_x_to_v2_x ;
            out.write(x, y, pix_v2_x);
        }

        // V2_y
        for math, x, y, out, av1_y_to_v2_y, common1_to_v2_y, common_y_to_v2_y in iteration_point3(math, v2_y, av1_y_to_v2_y, common1_to_v2_y, common_y_to_v2_y) {
            let pix_v2_y = av1_y_to_v2_y - common1_to_v2_y * common_y_to_v2_y ;
            out.write(x, y, pix_v2_y);
        }

        // n=2

        // A*V2_x --> Velocity_x average
        for math, x, y, out, v2_x, mask in iteration(math, av2_x, v2_x, mask_a, lower, upper) {
            let pix_av2_x = apply_stencil(x, y, v2_x, mask);
            out.write(x, y, pix_av2_x);

        }

        // Spliting av2_x
        let (av2_x_to_common2, av2_x_to_v3_x) = split_image(math, av2_x, &mut channel_av2_x_to_common2, &mut channel_av2_x_to_v3_x);

        // A*V2_y --> Velocity_y average
        for math, x, y, out, v2_y, mask in iteration(math, av2_y, v2_y, mask_a, lower, upper) {
            let pix_av2_y = apply_stencil(x, y, v2_y, mask);
            out.write(x, y, pix_av2_y);
        }

        // Spliting av2_y
        let (av2_y_to_common2, av2_y_to_v3_y) = split_image(math, av2_y, &mut channel_av2_y_to_common2, &mut channel_av2_y_to_v3_y);

        // Common2
        for math, x, y, out, av2_x_to_common2, av2_y, ix_to_common2, iy_to_common2, it_to_common2 in
            iteration_point5(math, common2, av2_x_to_common2, av2_y_to_common2, ix_to_common2, iy_to_common2, it_to_common2 ) {
                let pix_common2 = ix_to_common2 * av2_x_to_common2 + iy_to_common2 * av2_x_to_common2 + it_to_common2;
                out.write(x, y, pix_common2);
        }

        // Spliting Common2
        let (common2_to_v3_x, common2_to_v3_y) = split_image(math, common2, &mut channel_common2_to_v3_x, &mut channel_common2_to_v3_y);

        // V3_x
        for math, x, y, out, av2_x_to_v3_x, common2_to_v3_x, common_x_to_v3_x in iteration_point3(math, v3_x, av2_x_to_v3_x, common2_to_v3_x, common_x_to_v3_x) {
            let pix_v3_x = av2_x_to_v3_x - common2_to_v3_x * common_x_to_v3_x ;
            out.write(x, y, pix_v3_x);
        }

        // V3_y
        for math, x, y, out, av2_y_to_v3_y, common2_to_v3_y, common_y_to_v3_y in iteration_point3(math, v3_y, av2_y_to_v3_y, common2_to_v3_y, common_y_to_v3_y) {
            let pix_v3_y = av2_y_to_v3_y - common2_to_v3_y * common_y_to_v3_y ;
            out.write(x, y, pix_v3_y);
        }

        // n=3

        // A*V3_x --> Velocity_x average
        for math, x, y, out, v3_x, mask in iteration(math, av3_x, v3_x, mask_a, lower, upper) {
            let pix_av3_x = apply_stencil(x, y, v3_x, mask);
            out.write(x, y, pix_av3_x);

        }

        // Spliting av3_x
        let (av3_x_to_common3, av3_x_to_v4_x) = split_image(math, av3_x, &mut channel_av3_x_to_common3, &mut channel_av3_x_to_v4_x);

        // A*V3_y --> Velocity_y average
        for math, x, y, out, v3_y, mask in iteration(math, av3_y, v3_y, mask_a, lower, upper) {
            let pix_av3_y = apply_stencil(x, y, v3_y, mask);
            out.write(x, y, pix_av3_y);
        }

        // Spliting av3_y
        let (av3_y_to_common3, av3_y_to_v4_y) = split_image(math, av3_y, &mut channel_av3_y_to_common3, &mut channel_av3_y_to_v4_y);

        // Common3
        for math, x, y, out, av3_x_to_common3, av3_y, ix_to_common3, iy_to_common3, it_to_common3 in
            iteration_point5(math, common3, av3_x_to_common3, av3_y_to_common3, ix_to_common3, iy_to_common3, it_to_common3 ) {
                let pix_common3 = ix_to_common3 * av3_x_to_common3 + iy_to_common3 * av3_x_to_common3 + it_to_common3;
                out.write(x, y, pix_common3);
        }

        // Spliting Common3
        let (common3_to_v4_x, common3_to_v4_y) = split_image(math, common3, &mut channel_common3_to_v4_x, &mut channel_common3_to_v4_y);

        // V4_x
        for math, x, y, out, av3_x_to_v4_x, common3_to_v4_x, common_x_to_v4_x in iteration_point3(math, out_host_v_x, av3_x_to_v4_x, common3_to_v4_x, common_x_to_v4_x) {
            let pix_v4_x = av3_x_to_v4_x - common3_to_v4_x * common_x_to_v4_x ;
            out.write(x, y, pix_v4_x);
        }

        // V4_y
        for math, x, y, out, av3_y_to_v4_y, common3_to_v4_y, common_y_to_v4_y in iteration_point3(math, out_host_v_y, av3_y_to_v4_y, common3_to_v4_y, common_y_to_v4_y) {
            let pix_v4_y = av3_y_to_v4_y - common3_to_v4_y * common_y_to_v4_y ;
            out.write(x, y, pix_v4_y);
        }
    }
    print_total_timing();
    // display results
    let in_frame_1_acc = get_acc(in_frame_1, |idx, val| { bitcast[&mut[pixel_t]](in_frame_1.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](in_frame_1.buf.data)(idx));
    let in_frame_2_acc = get_acc(in_frame_2, |idx, val| { bitcast[&mut[pixel_t]](in_frame_2.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](in_frame_2.buf.data)(idx));
    let out_v_x_acc = get_acc(out_host_v_x, |idx, val| { bitcast[&mut[pixel_t]](out_host_v_x.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](out_host_v_x.buf.data)(idx));
    let out_v_y_acc = get_acc(out_host_v_y, |idx, val| { bitcast[&mut[pixel_t]](out_host_v_y.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](out_host_v_y.buf.data)(idx));

    let roi_x = 0;
    let roi_y = 0;
    print_string("Frame 1 ");
    display_image(in_frame_1_acc, roi_x, roi_y);
    print_string("Frame 2 ");
    display_image(in_frame_2_acc, roi_x, roi_y);
    print_string("Optical flow\n\n");
    print_string("Vx:\n");
    display_image(out_v_x_acc, roi_x, roi_y);
    print_string("Vy:\n");
    display_image(out_v_y_acc, roi_x, roi_y);

    release(in_frame_1.buf);
    release(in_frame_2.buf);
    release(out_host_v_x.buf);
    release(out_host_v_y.buf);
    0
}
