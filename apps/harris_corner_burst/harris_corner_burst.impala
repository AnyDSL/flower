/*
 * Harris Corner
 *
 * A Combined Corner and Edge Detector
 * Chris Harris and Mike Stephens - Alvey Vision Conference, 1988
 *
 */

static mut in_c0  : pipe;
static mut in_c1  : pipe;
static mut str_to_mm_buf: pipe;
static mut dx_c  : pipe;
static mut dy_c  : pipe;
static mut dxx_c : pipe;
static mut dxy_c : pipe;
static mut dyy_c : pipe;
static mut gxx_c : pipe;
static mut gxy_c : pipe;
static mut gyy_c : pipe;
static mut dx_c0 : pipe;
static mut dx_c1 : pipe;
static mut dy_c0 : pipe;
static mut dy_c1 : pipe;

#[export]
fn harris_corner_burst(img_data: &[pixel_t], out_data: &mut[pixel_t]) -> () {
    let width  = 1024;
    let height = 1024;
    let stride = 1024;

    //         -- ix -|-- ixx -- sxx -
    //       /         \              \
    // in --            > ixy -- sxy --> hc -- out
    //       \         /              /
    //         -- iy -|-- iyy -- syy -

    // function type declaration
    let iteration =  iteration[pixel_t];
    let iteration_point =  iteration_point[pixel_t];
    let iteration_point2 = iteration_point2[pixel_t];
    let iteration_point3 = iteration_point3[pixel_t];
    let get_acc = get_acc[pixel_t];


    let input  = new_img(width, height, stride, Buffer { data = bitcast[&mut [i8]](img_data), size = ((width * height) as i64 * sizeof[pixel_t]()) as i64, device = 0 });
    let str_to_mm = create_virtual_img(width, height, &mut str_to_mm_buf);
    let harris = create_host_img(width, height);
    let dx  = create_virtual_img(width, height, &mut dx_c );
    let dy  = create_virtual_img(width, height, &mut dy_c );
    let dxx = create_virtual_img(width, height, &mut dxx_c);
    let dxy = create_virtual_img(width, height, &mut dxy_c);
    let dyy = create_virtual_img(width, height, &mut dyy_c);
    let gxx = create_virtual_img(width, height, &mut gxx_c);
    let gxy = create_virtual_img(width, height, &mut gxy_c);
    let gyy = create_virtual_img(width, height, &mut gyy_c);

    // compute the first derivative using the Sobel operator
    let mdx = get_mask3(sobel_mask3_x);
    let mdy = get_mask3(sobel_mask3_y);

    let lower = nobh_center[pixel_t];
    let upper = nobh_center[pixel_t];
    //let lower = clamp_lower[pixel_t];
    //let upper = clamp_upper[pixel_t];
    //let lower = mirro_lower[pixel_t];
    //let upper = mirro_upper[pixel_t];
    let enable_offset = 1;

    for benchmark_host(num_host_iter) {
        let (in0, in1) = split_image(math, input, &mut in_c0, &mut in_c1);
        for math, x, y, out, arr, mask in iteration(math, dx, in0, mdx, lower, upper) {
            out.write(x, y, apply_stencil(x, y, arr, mask));
        }
        for math, x, y, out, arr, mask in iteration(math, dy, in1, mdy, lower, upper) {
            out.write(x, y, apply_stencil(x, y, arr, mask));
        }

        // Replicate virtual images for multiple reads
        let (dx0, dx1) = split_image(math, dx, &mut dx_c0, &mut dx_c1);
        let (dy0, dy1) = split_image(math, dy, &mut dy_c0, &mut dy_c1);

        // compute dxx, dyy, dxy
        for math, x, y, out, dx in iteration_point(math, dxx, dx0) {
            out.write(x, y, dx * dx);
        }
        for math, x, y, out, dy in iteration_point(math, dyy, dy0) {
            out.write(x, y, dy * dy);
        }
        for math, x, y, out, dx, dy in iteration_point2(math, dxy, dx1, dy1) {
            out.write(x, y, dx * dy);
        }

        // compute gxx, gyy, gxy using Gaussian blur
        let mg = get_mask3(gauss_mask3);

        for math, x, y, out, arr, mask in iteration(math, gxx, dxx, mg, lower, upper) {
            out.write(x, y, apply_stencil(x, y, arr, mask));
        }
        for math, x, y, out, arr, mask in iteration(math, gyy, dyy, mg, lower, upper) {
            out.write(x, y, apply_stencil(x, y, arr, mask));
        }
        for math, x, y, out, arr, mask in iteration(math, gxy, dxy, mg, lower, upper) {
            out.write(x, y, apply_stencil(x, y, arr, mask));
        }

        // compute score for Harris corner
        for math, x, y, out, xx, yy, xy in iteration_point3(math, str_to_mm, gxx, gyy, gxy) {
            let det   = xx * yy - xy * xy;
            let trace = xx + yy;
            out.write(x, y, det - trace * trace * k / k_den);
        }

        for math, x, y, out, str_to_mm in iteration_point(math, harris, str_to_mm) {
            out.write(x, y, str_to_mm);
        }
    }
    print_total_timing();

    // post-processing: mark corners
    for y in range(0, height) {
        for x in range(0, width) {
            let harris_acc = get_acc(harris, |idx, val| { bitcast[&mut[pixel_t]](harris.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](harris.buf.data)(idx));
            if harris_acc.read(x, y) > threshold {
                out_data(y*width + x) = markHigh;
            } else{
                out_data(y*width + x) = markLow;
            }
            //out_data(y*width + x) = harris_acc.read(x, y);
        }
    }

    release(harris.buf);
}
