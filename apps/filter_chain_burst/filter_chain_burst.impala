fn main() -> i32 {
    let width  = 1024;
    let height = 1024;
    static mut out00_buf: pipe;
    static mut out0_buf: pipe;
    static mut out1_buf: pipe;
    static mut out2_buf: pipe;
    let arr    = create_host_img(width, height);
    let out    = create_host_img(width, height);
    let out00   = create_virtual_img(width, height, &mut out00_buf);
    let out0   = create_virtual_img(width, height, &mut out0_buf);
    let out1   = create_virtual_img(width, height, &mut out1_buf);
    let out2   = create_virtual_img(width, height, &mut out2_buf);
    init_rand(bitcast[&mut[pixel_t]](arr.buf.data), arr.stride, out.height);
    init_zero(bitcast[&mut[pixel_t]](out.buf.data), out.stride, out.height);

    let mask     = get_mask5(mask5);
    let kernel   = apply_stencil;
    //let lower = nobh_center;
    //let upper = nobh_center;
    //let lower = wrap_const_fun(const_lower, 0.0f);
    //let upper = wrap_const_fun(const_upper, 0.0f);
    //let lower = clamp_lower;
    //let upper = clamp_upper;
    let lower = mirror_lower;
    let upper = mirror_upper;
    let enable_offset = 0;

    for benchmark_host(num_host_iter) {
        for math, x, y, out_acc, arr_acc in iteration_point(math, out00, arr) {
            out_acc.write(x, y, arr_acc);
        }

        for math, x, y, out_acc, arr_acc, mask in iteration(math, out0, out00, mask, lower, upper) {
            out_acc.write(x, y, kernel(x, y, arr_acc, mask));
        }

        for math, x, y, out_acc, arr_acc, mask in iteration(math, out1, out0, mask, lower, upper) {
            out_acc.write(x, y, kernel(x, y, arr_acc, mask));
        }

        for math, x, y, out_acc, arr_acc, mask in iteration(math, out2, out1, mask, lower, upper) {
            out_acc.write(x, y, kernel(x, y, arr_acc, mask));
        }

        for math, x, y, out_acc, arr_acc in iteration_point(math, out, out2) {
            out_acc.write(x, y, arr_acc);
        }

    }
    print_total_timing();

    fn reference() -> i32 {
        let ref  = create_host_img(width, height);
        let ref0 = create_host_img(width, height);
        let ref1 = create_host_img(width, height);
        init_zero(bitcast[&mut[pixel_t]](ref.buf.data),  ref.stride, ref.height);
        init_zero(bitcast[&mut[pixel_t]](ref0.buf.data), ref.stride, ref.height);
        init_zero(bitcast[&mut[pixel_t]](ref1.buf.data), ref.stride, ref.height);

        let out_acc = get_acc   (out, |idx, val| { bitcast[&mut[pixel_t]](out.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](out.buf.data)(idx));
        let ref_acc = get_acc   (ref, |idx, val| { bitcast[&mut[pixel_t]](ref.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](ref.buf.data)(idx));
        let arr_acc  = get_acc_bh(arr, |idx, val|  { bitcast[&mut[pixel_t]](arr.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](arr.buf.data)(idx),   (Boundary::Unknown, Boundary::Unknown), lower, upper);
        let ref0_acc = get_acc_bh(ref0, |idx, val| { bitcast[&mut[pixel_t]](ref0.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](ref0.buf.data)(idx), (Boundary::Unknown, Boundary::Unknown), lower, upper);
        let ref1_acc = get_acc_bh(ref1, |idx, val| { bitcast[&mut[pixel_t]](ref1.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](ref1.buf.data)(idx), (Boundary::Unknown, Boundary::Unknown), lower, upper);
        for y in range(0, out.height) {
            for x in range(0, out.width) {
                ref0_acc.write(x, y, kernel(x, y, arr_acc, mask));
            }
        }
        for y in range(0, out.height) {
            for x in range(0, out.width) {
                ref1_acc.write(x, y, kernel(x, y, ref0_acc, mask));
            }
        }

        for y in range(0, out.height) {
            for x in range(0, out.width) {
                let mut ref = 0 as pixel_t;
                ref = kernel(x, y, ref1_acc, mask);
                ref_acc.write(x, y, ref);
            }
        }
        let offset = enable_offset * (mask.size_x / 2);
        let prop   = get_RoI(offset, offset, width - 2 * offset, height - 2 * offset);
        check(arr_acc, out_acc, ref_acc, prop)
    }
    let result = reference();
    release(arr.buf);
    release(out.buf);
    result
}
