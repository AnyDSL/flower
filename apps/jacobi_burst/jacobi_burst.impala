fn main() -> i32 {
    static mut mm_to_str_buf: pipe;
    static mut str_to_mm_buf: pipe;
    let width  = 1024;
    let height = 1024;
    let arr    = create_host_img(width, height);
    let mm_to_str = create_virtual_img(width, height, &mut mm_to_str_buf);
    let str_to_mm = create_virtual_img(width, height, &mut str_to_mm_buf);
    let out    = create_host_img(width, height);
    init_rand(bitcast[&mut[pixel_t]](arr.buf.data), arr.stride, out.height);
    init_zero(bitcast[&mut[pixel_t]](out.buf.data), out.stride, out.height);
    let stencil = get_mask3([[0 as pixel_t, jacobi_b, 0 as pixel_t],
            [    jacobi_b, jacobi_a, jacobi_b    ],
            [0 as pixel_t, jacobi_b, 0 as pixel_t]]);

    let lower = nobh_center;
    let upper = nobh_center;
    //let lower = clamp_lower;
    //let upper = clamp_upper;
    let enable_offset = 1;

    let iteration_fun = iteration;                  // SS
    //let iteration_fun = iteration_bounds;           // SS + BH
    //let iteration_fun = iteration_advanced;         // SS + SM

    let num_host_iter = 5i;
    for benchmark_host(num_host_iter) {
        for math, x, y, out, in_mm in iteration_point(math, mm_to_str, arr) {
            out.write(x, y, in_mm);
        }

        for math, x, y, out, arr_acc, stencil in iteration_fun(math, str_to_mm, mm_to_str, stencil, lower, upper) {
            out.write(x, y, apply_stencil(x, y, arr_acc, stencil));
        }

        for math, x, y, out, str_to_mm in iteration_point(math, out, str_to_mm) {
            out.write(x, y, str_to_mm);
        }
    }

    print_total_timing();

    fn reference() -> i32 {
        let mut passed = 0;
        let arr_acc = get_acc_bh(arr, |idx, val| { bitcast[&mut[pixel_t]](arr.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](arr.buf.data)(idx), (Boundary::Unknown, Boundary::Unknown), lower, upper);
        let out_acc = get_acc   (out, |idx, val| { bitcast[&mut[pixel_t]](out.buf.data)(idx) = val }, |idx| bitcast[&[pixel_t]](out.buf.data)(idx));

        let offset_x  = enable_offset * (stencil.size_x / 2);
        let offset_y  = enable_offset * (stencil.size_y / 2);
        for y in range(0, out.height) {
            for x in range(0, out.width) {
                if y > offset_y - 1 && y < out.height - offset_y && x > offset_x -1 && x < out.width - offset_x {
                    let ref = apply_stencil(x, y, arr_acc, stencil);
                    let mut diff = ref - out_acc.read(x, y);
                    if diff < 0 as pixel_t  { diff = -diff; }
                    if diff > diff_treshold { passed = 42; }
                }
            }
        }
        if passed == 0 {
            print_string("Test PASSED!\n");
        } else {
            print_string("Test FAILED!\n");
        }
        passed
    }

    let result = reference();

    release(arr.buf);
    release(out.buf);

    result
}
