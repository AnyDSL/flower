fn iteration_merge(RHSC: Img, Sol: Img, RHSF: Img,
                   residual: fn(int, int, Acc, Acc, Acc, Mask) -> (), residual_mask: Mask, // RHS + sum(Sol) -> Res
                   restrict: fn(int, int, Acc, Acc, Mask) -> (), restrict_mask: Mask       // Res -> RHS(+1)
                  ) -> () {
    // allocate temporary array
    let tmp = Img { data : ~[Sol.stride*2:float], width : Sol.width, height : 2, stride : Sol.stride };
    $init_zero(tmp.data, tmp.stride, tmp.height);
    let tmp_acc  = get_acc(tmp, 4);

    for benchmark() {
        for y in $range_step(0, Sol.height, 2) {
            for x in $inner_loop(0, Sol.width) @{
                // index space: cache line
                let rhsf_acc = Acc { img : RHSF, roi : RoI { o_x : 0, o_y : 0, width : RHSF.width, height : RHSF.height }, rox : 0, roy : y, region : 10 }; // TODO: specialize boundary handling
                let sol_acc  = Acc { img : Sol,  roi : RoI { o_x : 0, o_y : 0, width : Sol.width,  height : Sol.height },  rox : 0, roy : y, region : 10 }; // TODO: specialize boundary handling
                residual(x, 0, tmp_acc, sol_acc, rhsf_acc, residual_mask);
                residual(x, 1, tmp_acc, sol_acc, rhsf_acc, residual_mask);
            }
            for x in $range(0, RHSC.width) @{
                // index space: cache line
                let rhs_acc = Acc { img : RHSC, roi : RoI { o_x : 0, o_y : 0, width : RHSC.width, height : RHSC.height}, rox : 0, roy : y/2, region : 4 /* no bh */ };
                restrict(x, 0, rhs_acc, tmp_acc, restrict_mask);
            }
        }
    }
}
