fn iteration_merge(Sol : Img, Res : Img, RHSF : Img, RHSC : Img,
                   residual : fn(int, int, Mask, Acc, Acc, Acc) -> (), residual_mask : Mask, // RHS + sum(Sol) -> Res
                   restrict : fn(int, int, Mask, Acc, Acc) -> (), restrict_mask : Mask       // Res -> RHS(+1)
                  ) -> () {
    let dev = acc_dev();
    let gpu_sol  = mmap(Sol.data,  dev, acc_tex(), 0, Sol.stride  * (Sol.height+pad_y));
    let gpu_rhsf = mmap(RHSF.data, dev, acc_mem(), 0, RHSF.stride * (RHSF.height+pad_y));
    let gpu_rhsc = mmap(RHSC.data, dev, acc_mem(), 0, RHSC.stride * (RHSC.height+pad_y));

    let grid  = (Res.width, Res.height, 1);
    let block = (64, 2, 1); // must be x2

    acc(dev, grid, block, || {
        let tid_x = acc_tidx();
        let tid_y = acc_tidy();
        let bdim_x = acc_bdimx();
        let bdim_y = acc_bdimy();
        let gid_x = acc_gidx();
        let gid_y = acc_gidy();

        let lstride = block(0) + pad_x;
        let lheight = block(1) + pad_y/2;
        let smem_res = mmap(Sol.data, dev, 3, 0, lstride * lheight);
        let smem_img = Img { data : smem_res, width : lstride,    height : lheight,     stride : lstride };
        let rhsf_img = Img { data : gpu_rhsf, width : RHSF.width, height : RHSF.height, stride : RHSF.stride };
        let rhsc_img = Img { data : gpu_rhsc, width : RHSC.width, height : RHSC.height, stride : RHSC.stride };
        let sol_img  = Img { data : gpu_sol,  width : Sol.width,  height : Sol.height,  stride : Sol.stride };

        // residual
        for i in @range(0, 1) { // force partial evaluation
            // index space: block
            let out_acc  = get_acc(smem_img, 4 /* no bh */);
            let rhsf_acc = Acc { img : rhsf_img, roi : RoI { o_x : 0, o_y : 0, width : rhsf_img.width, height : rhsf_img.height },
                                                 rox : acc_bdimx() * acc_bidx(), roy : acc_bdimy() * acc_bidy(), region : 4 /* no bh */ };
            let sol_acc  = Acc { img : sol_img,  roi : RoI { o_x : 0, o_y : 0, width : sol_img.width,  height : sol_img.height },
                                                 rox : acc_bdimx() * acc_bidx(), roy : acc_bdimy() * acc_bidy(), region : 4 /* no bh */ };
            residual(tid_x, tid_y, residual_mask, sol_acc, out_acc, rhsf_acc);
        }

        acc_barrier();

        // restrict
        if tid_x <= block(0)/2 && gid_y % 2 == 0 {
            for i in @range(0, 1) { // force partial evaluation
                // index space: block
                let out_acc = Acc { img : rhsc_img, roi : RoI { o_x : 0, o_y : 0, width : rhsc_img.width, height : rhsc_img.height },
                                                    rox : acc_bdimx() * acc_bidx()/2, roy : acc_bdimy() * acc_bidy()/2, region : 4 /* no bh */ };
                let arr_acc = get_acc(smem_img, 4 /* no bh */);
                restrict(tid_x, tid_y, restrict_mask, arr_acc, out_acc);
            }
        }
    });
}
