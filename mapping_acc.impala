fn compute_config(range_mask: (i32, i32), unroll: i32) -> ((i32, i32, i32), (i32, i32)) {
    fn compute_config_y (y_max: i32) -> i32 {
        if range_mask(1) > 1 { return(y_max) }
        for n in range(1, y_max+1) {
            if n * unroll >= range_mask(1) { return(n) }
        }
        y_max
    }

    let config_y_max = 4;   // must be 1 for CPU on Mac OS X
    let config_x_max = 128; // use 256 for AMD GPUs; 512 for Intel MIC

    let threads_y = compute_config_y(config_y_max);
    let threads_x = config_x_max / threads_y;

    let blocks_x = round_up(range_mask(0), threads_x) / threads_x;
    let blocks_y = round_up(range_mask(1), threads_y) / threads_y;

    ((threads_x, threads_y, 1), (blocks_x, blocks_y))
}

fn iteration_point(out: Img,
                   body: fn(i32, i32, Acc) -> ()
                  ) -> () {
    let out_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);

    let unroll = 1;
    let grid   = (out.width, out.height/unroll, 1);
    let block  = (128, 1, 1);

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let out_acc = get_acc(out_gpu, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), out_acc);
            }
        });
    }

    copy(out_gpu.buf, out.buf, out.width * out.height * 4);
    release(out_gpu.buf);
}

fn iteration(out: Img, arr: Img, mask: Mask,
             body: fn(i32, i32, Acc, Acc, Mask) -> ()
            ) -> () {
    let arr_gpu = get_img(alloc_cuda(acc_dev(), arr.width * arr.height * 4), arr.width, arr.height);
    let out_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    copy(arr.buf, arr_gpu.buf, arr.width * arr.height * 4);

    let unroll = 1;
    let config = compute_config((mask.size_x/2, mask.size_y/2), unroll);
    let grid   = (out.width, out.height/unroll, 1);
    let block  = config(0);

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let arr_acc = get_acc(arr_gpu, 10);
            let out_acc = get_acc(out_gpu, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), out_acc, arr_acc, mask);
            }
        });
    }

    copy(out_gpu.buf, out.buf, out.width * out.height * 4);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}

fn iteration_bounds(out: Img, arr: Img, mask: Mask,
                    body: fn(i32, i32, Acc, Acc, Mask) -> ()
                   ) -> () {
    let arr_gpu = get_img(alloc_cuda(acc_dev(), arr.width * arr.height * 4), arr.width, arr.height);
    let out_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    copy(arr.buf, arr_gpu.buf, arr.width * arr.height * 4);

    // compute the number of blocks required for boundary handling
    let unroll = 1;
    let config = compute_config((mask.size_x/2, mask.size_y/2), unroll);
    let block  = config(0);
    let bx     = config(1)(0);
    let by     = config(1)(1);

    // define if we want to generate one big kernel or multiple kernels
    let big_kernel = false;

    if big_kernel {
        let grid = (out.width, out.height/unroll, 1);

        for benchmark_acc() {
            acc(acc_dev(), grid, block, || @{
                let bid_x = acc_bidx();
                let bid_y = acc_bidy();
                let bdim_y = acc_bdimy();
                let gdim_x = acc_gdimx();
                let gdim_y = acc_gdimy();
                let gid_x = acc_gidx();
                let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;

                // 0 --- 1 --- 2
                // 3 --- 4 --- 5
                // 6 --- 7 --- 8
                if bid_x < bx && bid_y < by @{                          // top-left: 0
                    let arr_acc = get_acc(arr_gpu, 0);
                    let out_acc = get_acc(out_gpu, 0);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_x >= gdim_x-bx && bid_y < by @{           // top-right: 2
                    let arr_acc = get_acc(arr_gpu, 2);
                    let out_acc = get_acc(out_gpu, 2);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y < by @{                                 // top: 1
                    let arr_acc = get_acc(arr_gpu, 1);
                    let out_acc = get_acc(out_gpu, 1);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y >= gdim_y-by && bid_x < bx @{           // bottom-left: 6
                    let arr_acc = get_acc(arr_gpu, 6);
                    let out_acc = get_acc(out_gpu, 6);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y >= gdim_y-by && bid_x >= gdim_x-bx @{   // bottom-right: 8
                    let arr_acc = get_acc(arr_gpu, 8);
                    let out_acc = get_acc(out_gpu, 8);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_y >= gdim_y-by @{                         // bottom: 7
                    let arr_acc = get_acc(arr_gpu, 7);
                    let out_acc = get_acc(out_gpu, 7);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_x >= gdim_x-bx @{                         // right: 5
                    let arr_acc = get_acc(arr_gpu, 5);
                    let out_acc = get_acc(out_gpu, 5);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else if bid_x < bx @{                                 // left: 3
                    let arr_acc = get_acc(arr_gpu, 3);
                    let out_acc = get_acc(out_gpu, 3);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                } else @{                                               // center: 4
                    let arr_acc = get_acc(arr_gpu, 4);
                    let out_acc = get_acc(out_gpu, 4);
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, arr_acc, mask);
                    }
                }
            });
        }
    } else {
        // bounds account for unroll factor
        let hu = out.height/unroll;
        let Bounds2D = [
            (0                      , bx*block(0)            , 0               , by*block(1)),
            (bx*block(0)            , out.width - bx*block(0), 0               , by*block(1)),
            (out.width - bx*block(0), out.width              , 0               , by*block(1)),

            (0                      , bx*block(0)            , by*block(1)     , hu - by*block(1)),
            (bx*block(0)            , out.width - bx*block(0), by*block(1)     , hu - by*block(1)),
            (out.width - bx*block(0), out.width              , by*block(1)     , hu - by*block(1)),

            (0                      , bx*block(0)            , hu - by*block(1), hu),
            (bx*block(0)            , out.width - bx*block(0), hu - by*block(1), hu),
            (out.width - bx*block(0), out.width              , hu - by*block(1), hu)
        ];

        for region in @range(0, 9) {
            let bounds = Bounds2D(region);
            let grid   = (bounds(1) - bounds(0), bounds(3) - bounds(2), 1);

            let arr_acc = get_acc(arr_gpu, region);
            let out_acc = get_acc(out_gpu, region);

            for benchmark_acc() {
                acc(acc_dev(), grid, block, || @{
                    let gid_x = bounds(0) +
                                acc_tidx() + acc_bdimx() * acc_bidx();
                    let gid_y = bounds(2) * unroll +
                                acc_tidy() + acc_bdimy() * acc_bidy() * unroll;

                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * acc_bdimy(), out_acc, arr_acc, mask);
                    }
                });
            }
        }
    }

    copy(out_gpu.buf, out.buf, out.width * out.height * 4);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}

fn iteration_advanced(out: Img, arr: Img, mask: Mask,
                      body: fn(i32, i32, Acc, Acc, Mask) -> ()
                     ) -> () {
    let arr_gpu = get_img(alloc_cuda(acc_dev(), arr.width * arr.height * 4), arr.width, arr.height);
    let out_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    copy(arr.buf, arr_gpu.buf, arr.width * arr.height * 4);

    let unroll = 1;
    let config = compute_config((mask.size_x/2, mask.size_y/2), unroll);
    let grid   = (out.width, out.height/unroll, 1);
    let block  = config(0);

    // compute number of steps required to stage data to shared memory
    let range_row = mask.size_x / 2;
    let range_col = mask.size_y / 2;
    let steps_x   = 2;
    let offset_y  = if (mask.size_y-1)%block(1) == 0 { 0 } else { 1 };
    let steps_y   = unroll + (mask.size_y-1)/block(1) + offset_y;

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let tid_x = acc_tidx();
            let tid_y = acc_tidy();
            let bdim_x = acc_bdimx();
            let bdim_y = acc_bdimy();
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;

            let spm_stride =          block(0) + 2 * range_row;
            let spm_height = unroll * block(1) + 2 * range_col;
            let mut spm = Buffer { device : acc_dev(), data : reserve_shared(spm_stride * spm_height * 4) };
            let spm_img = get_img(spm, spm_stride, spm_height);

            for y in range(0, steps_y) {
                let lid_y = tid_y             + y*bdim_y;
                let idx_y = gid_y - range_col + y*bdim_y;
                for x in range(0, steps_x) {
                    let lid_x = tid_x + x*bdim_x;
                    let idx_x = gid_x - range_row + x*bdim_x;

                    if lid_x < spm_stride && lid_y < spm_height @{
                        let gpu_acc = get_acc(arr_gpu, 10); // TODO: set region!
                        (spm.data as &[f32])(lid_y * spm_stride + lid_x) = get_pixel(gpu_acc, idx_x, idx_y, clamp_lower, clamp_upper);
                    }
                }
            }

            acc_barrier();

            for i in range(0, unroll) {
                // index space: block
                let out_acc = Acc { img : out_gpu, roi : RoI { o_x : 0, o_y : 0, width : out_gpu.width, height : out_gpu.height },
                                                   rox : acc_bdimx() * acc_bidx(), roy : acc_bdimy() * acc_bidy() * unroll + i * bdim_y, region : 4 /* no bh */ };
                let arr_acc = Acc { img : spm_img, roi : RoI { o_x : 0, o_y : 0, width : spm_img.width, height : spm_img.height },
                                                   rox : range_row,                roy : range_col + i * bdim_y,                         region : 4 /* no bh */ };
                body(tid_x, tid_y, out_acc, arr_acc, mask);
            }
        });
    }

    copy(out_gpu.buf, out.buf, out.width * out.height * 4);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}

fn iteration_sep(out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep,
                 body: fn(i32, i32, Acc, Acc, MaskSep, bool) -> ()
                ) -> () {
    let arr_gpu = get_img(alloc_cuda(acc_dev(), arr.width * arr.height * 4), arr.width, arr.height);
    let out_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    let tmp_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    copy(arr.buf, arr_gpu.buf, arr.width * arr.height * 4);

    let unroll = 1;
    let grid   = (out.width, out.height/unroll, 1);
    let config_row = compute_config((mask_row.size/2, 1), unroll);
    let config_col = compute_config((1, mask_col.size/2), unroll);
    let block_row  = config_row(0);
    let block_col  = config_col(0);

    for benchmark_acc() {
        acc(acc_dev(), grid, block_col, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let is_row = false;

            let arr_acc = get_acc(arr_gpu, 10);
            let tmp_acc = get_acc(tmp_gpu, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), tmp_acc, arr_acc, mask_col, is_row);
            }
        });
    }
    for benchmark_acc() {
        acc(acc_dev(), grid, block_row, || @{
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
            let is_row = true;

            let tmp_acc = get_acc(tmp_gpu, 10);
            let out_acc = get_acc(out_gpu, 10);

            for i in range(0, unroll) {
                body(gid_x, gid_y + i * acc_bdimy(), out_acc, tmp_acc, mask_row, is_row);
            }
        });
    }

    copy(out_gpu.buf, out.buf, out.width * out.height * 4);
    release(arr_gpu.buf);
    release(out_gpu.buf);
    release(tmp_gpu.buf);
}

fn iteration_sep_bounds(out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep,
                        body: fn(i32, i32, Acc, Acc, MaskSep, bool) -> ()
                       ) -> () {
    let arr_gpu = get_img(alloc_cuda(acc_dev(), arr.width * arr.height * 4), arr.width, arr.height);
    let out_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    let tmp_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    copy(arr.buf, arr_gpu.buf, arr.width * arr.height * 4);

    // compute the number of blocks required for boundary handling
    let unroll = 1;
    let config_row = compute_config((mask_row.size/2, 1), unroll);
    let config_col = compute_config((1, mask_col.size/2), unroll);
    let block_row  = config_row(0);
    let block_col  = config_col(0);
    let bx         = config_row(1)(0);
    let by         = config_col(1)(1);

    let Region2DCol = [ 1, 4, 7 ];
    let Region2DRow = [ 3, 4, 5 ];

    // define if we want to generate one big kernel or multiple kernels
    let big_kernel = false;

    if big_kernel {
        let grid = (out.width, out.height/unroll, 1);

        // column component
        for benchmark_acc() {
            acc(acc_dev(), grid, block_col, || @{
                let bid_y = acc_bidy();
                let bdim_y = acc_bdimy();
                let gdim_y = acc_gdimy();
                let gid_x = acc_gidx();
                let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
                let is_row = false;

                if bid_y < by @{                                // top: 1
                    let arr_acc = get_acc(arr_gpu, Region2DCol(0));
                    let tmp_acc = get_acc(tmp_gpu, Region2DCol(0));
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
                    }
                } else if bid_y >= gdim_y-by @{                 // bottom: 7
                    let arr_acc = get_acc(arr_gpu, Region2DCol(2));
                    let tmp_acc = get_acc(tmp_gpu, Region2DCol(2));
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
                    }
                } else @{                                       // center: 4
                    let arr_acc = get_acc(arr_gpu, Region2DCol(1));
                    let tmp_acc = get_acc(tmp_gpu, Region2DCol(1));
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, tmp_acc, arr_acc, mask_col, is_row);
                    }
                }
            });
        }

        // row component
        for benchmark_acc() {
            acc(acc_dev(), grid, block_row, || @{
                let bid_x = acc_bidx();
                let bdim_y = acc_bdimy();
                let gdim_x = acc_gdimx();
                let gid_x = acc_gidx();
                let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
                let is_row = true;

                if bid_x < bx @{                                // left: 3
                    let tmp_acc = get_acc(tmp_gpu, Region2DRow(0));
                    let out_acc = get_acc(out_gpu, Region2DRow(0));
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
                    }
                } else if bid_x >= gdim_x-bx @{                 // right: 5
                    let tmp_acc = get_acc(tmp_gpu, Region2DRow(2));
                    let out_acc = get_acc(out_gpu, Region2DRow(2));
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
                    }
                } else @{                                       // center: 4
                    let tmp_acc = get_acc(tmp_gpu, Region2DRow(1));
                    let out_acc = get_acc(out_gpu, Region2DRow(1));
                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * bdim_y, out_acc, tmp_acc, mask_row, is_row);
                    }
                }
            });
        }
    } else {
        let hu = out.height / unroll;
        let Bounds2DCol = [
            (0                   , by*block_col(1)),
            (by*block_col(1)     , hu - by*block_col(1)),
            (hu - by*block_col(1), hu)
        ];

        for iter in @range(0, 3) {
            let region = Region2DCol(iter);
            let bounds = Bounds2DCol(iter);
            let grid   = (out.width, bounds(1) - bounds(0), 1);

            let arr_acc = get_acc(arr_gpu, region);
            let tmp_acc = get_acc(tmp_gpu, region);

            for benchmark_acc() {
                acc(acc_dev(), grid, block_col, || @{
                    let gid_x = acc_gidx();
                    let gid_y = bounds(0) * unroll +
                                acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
                    let is_row = false;

                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * acc_bdimy(), tmp_acc, arr_acc, mask_col, is_row);
                    }
                });
            }
        }

        let Bounds2DRow = [
            (0                          , bx*block_row(0)),
            (bx*block_row(0)            , out.width - bx*block_row(0)),
            (out.width - bx*block_row(0), out.width)
        ];

        for iter in @range(0, 3) {
            let region = Region2DRow(iter);
            let bounds = Bounds2DRow(iter);
            let grid   = (bounds(1) - bounds(0), out.height/unroll, 1);

            let tmp_acc = get_acc(tmp_gpu, region);
            let out_acc = get_acc(out_gpu, region);

            for benchmark_acc() {
                acc(acc_dev(), grid, block_row, || @{
                    let gid_x = bounds(0) + acc_gidx();
                    let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;
                    let is_row = true;

                    for i in range(0, unroll) {
                        body(gid_x, gid_y + i * acc_bdimy(), out_acc, tmp_acc, mask_row, is_row);
                    }
                });
            }
        }
    }

    copy(out_gpu.buf, out.buf, out.width * out.height * 4);
    release(arr_gpu.buf);
    release(out_gpu.buf);
    release(tmp_gpu.buf);
}

fn iteration_sep_advanced(out: Img, arr: Img, mask_row: MaskSep, mask_col: MaskSep,
                          body: fn(i32, i32, Acc, Acc, MaskSep, bool) -> ()
                         ) -> () {
    let arr_gpu = get_img(alloc_cuda(acc_dev(), arr.width * arr.height * 4), arr.width, arr.height);
    let out_gpu = get_img(alloc_cuda(acc_dev(), out.width * out.height * 4), out.width, out.height);
    copy(arr.buf, arr_gpu.buf, arr.width * arr.height * 4);

    let unroll = 1;
    let config = compute_config((mask_row.size/2, mask_col.size/2), unroll);
    let grid   = (out.width, out.height/unroll, 1);
    let block  = config(0);

    // compute number of steps required to stage data to shared memory
    let range_row = mask_row.size / 2;
    let range_col = mask_col.size / 2;
    let offset_y  = if (mask_col.size-1)%block(1) == 0 { 0 } else { 1 };
    let steps_x   = 2;
    let steps_y   = unroll + (mask_col.size-1)/block(1) + offset_y;

    for benchmark_acc() {
        acc(acc_dev(), grid, block, || @{
            let tid_x = acc_tidx();
            let tid_y = acc_tidy();
            let bdim_x = acc_bdimx();
            let bdim_y = acc_bdimy();
            let gid_x = acc_gidx();
            let gid_y = acc_tidy() + acc_bdimy() * acc_bidy() * unroll;

            let spm_stride     =          block(0) + 2 * range_row;
            let spm_height_col = unroll * block(1) + 2 * range_col;
            let spm_height_row = unroll * block(1);
            let mut spm_col = Buffer { device : acc_dev(), data : reserve_shared(spm_stride * spm_height_col * 4) };
            let     spm_row = Buffer { device : acc_dev(), data : reserve_shared(spm_stride * spm_height_row * 4) };
            let spmr_img = get_img(spm_row, spm_stride, spm_height_row);
            let spmc_img = get_img(spm_col, spm_stride, spm_height_col);

            for y in range(0, steps_y) {
                let lid_y = tid_y             + y*bdim_y;
                let idx_y = gid_y - range_col + y*bdim_y;
                for x in range(0, steps_x) {
                    let lid_x = tid_x + x*bdim_x;
                    let idx_x = gid_x - range_row + x*bdim_x;

                    if lid_x < spm_stride && lid_y < spm_height_col @{
                        let gpu_acc = get_acc(arr_gpu, 10); // TODO: set region!
                        (spm_col.data as &[f32])(lid_y * spm_stride + lid_x) = get_pixel(gpu_acc, idx_x, idx_y, clamp_lower, clamp_upper);
                    }
                }
            }

            acc_barrier();
            let region = 4; // center: no bh

            for i in range(0, unroll) {
                let is_row = false;
                {
                    // index space: block
                    let out_acc = Acc { img : spmr_img, roi : RoI { o_x : 0, o_y : 0, width : spmr_img.width, height : spmr_img.height }, rox : range_row, roy :             i * bdim_y, region : region };
                    let arr_acc = Acc { img : spmc_img, roi : RoI { o_x : 0, o_y : 0, width : spmc_img.width, height : spmc_img.height }, rox : range_row, roy : range_col + i * bdim_y, region : region };
                    body(tid_x, tid_y, out_acc, arr_acc, mask_col, is_row);
                }
                if tid_x < range_row @{
                    // left halo
                    let out_acc = Acc { img : spmr_img, roi : RoI { o_x : 0, o_y : 0, width : spmr_img.width, height : spmr_img.height }, rox : 0, roy :             i * bdim_y, region : region };
                    let arr_acc = Acc { img : spmc_img, roi : RoI { o_x : 0, o_y : 0, width : spmc_img.width, height : spmc_img.height }, rox : 0, roy : range_col + i * bdim_y, region : region };
                    body(tid_x, tid_y, out_acc, arr_acc, mask_col, is_row);
                }
                if tid_x >= bdim_x-range_row @{
                    // right halo
                    let out_acc = Acc { img : spmr_img, roi : RoI { o_x : 0, o_y : 0, width : spmr_img.width, height : spmr_img.height }, rox : range_row + range_row, roy :             i * bdim_y, region : region };
                    let arr_acc = Acc { img : spmc_img, roi : RoI { o_x : 0, o_y : 0, width : spmc_img.width, height : spmc_img.height }, rox : range_row + range_row, roy : range_col + i * bdim_y, region : region };
                    body(tid_x, tid_y, out_acc, arr_acc, mask_col, is_row);
                }
            }

            acc_barrier();

            for i in range(0, unroll) {
                // index space: block
                let is_row = true;
                let out_acc = Acc { img : out_gpu,  roi : RoI { o_x : 0, o_y : 0, width : out_gpu.width,  height : out_gpu.height },
                                                    rox : acc_bdimx() * acc_bidx(), roy : acc_bdimy() * acc_bidy() * unroll + i * bdim_y, region : region };
                let arr_acc = Acc { img : spmr_img, roi : RoI { o_x : 0, o_y : 0, width : spmr_img.width, height : spmr_img.height },
                                                    rox : range_row,                roy : i * bdim_y,                                     region : region };
                body(tid_x, tid_y, out_acc, arr_acc, mask_row, is_row);
            }
        });
    }

    copy(out_gpu.buf, out.buf, out.width * out.height * 4);
    release(arr_gpu.buf);
    release(out_gpu.buf);
}
