// ---------------------------------------------------------------------------
// Support for virtual images
// ---------------------------------------------------------------------------
// pipe support
type VirtualImg = Img;
type pipe = i32;

fn @create_virtual_img(width: i32, height: i32, buf: &mut pipe) -> VirtualImg {
    create_img(width, height, alloc_cpu)
}

fn @create_host_img(width: i32, height: i32) -> Img {
    let stride = round_up(width * sizeof[pixel_t](), round_up(sizeof[pixel_t], get_vector_length())) / sizeof[pixel_t]();
    let buf = alloc_cpu(stride * height * sizeof[pixel_t]());
    new_img(width, height, stride, buf)
}

// -------------------------- point operators ----------------------------------
fn @split_image(math: Intrinsics, arr: Img, out0: &mut pipe, out1: &mut pipe) -> (Img, Img) {
    (arr, arr)
}
