type Mask = Mask5;
type MaskSep = Mask5Sep;

fn closeness(c_d: float, xf: int, yf: int) -> float {
    expf(-c_d * (xf*xf as float)) * expf(-c_d * (yf*yf as float))
}
fn similarity(c_r: float, xi: float, x: float) -> float {
    let diff = xi - x;
    expf(-c_r * diff * diff)
}

fn bilateral_filter(x: int, y: int, acc: Acc, sigma_d: int, c_d: float, c_r: float,
                    bh_lower: fn(int, int, int, fn(f32)) -> int, bh_upper: fn(int, int, int, fn(f32)) -> int
                   ) -> float {
    let mut k = 0.0f;
    let mut p = 0.0f;

    for yf in iterate(-2*sigma_d, 2*sigma_d+1) {
        for xf in iterate(-2*sigma_d, 2*sigma_d+1) {
            let diff = get_pixel(acc, x + xf, y + yf, bh_lower, bh_upper) - pixel_at(acc, x, y);

            let c = closeness(c_d, xf, yf);
            let s = similarity(c_r, get_pixel(acc, x + xf, y + yf, bh_lower, bh_upper), pixel_at(acc, x, y));

            k += c * s;
            p += c * s * get_pixel(acc, x + xf, y + yf, bh_lower, bh_upper);
        }
    }

    p/k
}

fn bilateral_filter_mask(x: int, y: int, acc: Acc, mask: Mask, sigma_d: int, c_r: float,
                         bh_lower: fn(int, int, int, fn(f32)) -> int, bh_upper: fn(int, int, int, fn(f32)) -> int
                        ) -> float {
    let mut k = 0.0f;
    let mut p = 0.0f;

    for yf in iterate(-2*sigma_d, 2*sigma_d+1) {
        for xf in iterate(-2*sigma_d, 2*sigma_d+1) {
            let diff = get_pixel(acc, x + xf, y + yf, bh_lower, bh_upper) - pixel_at(acc, x, y);

            let c = mask.data(xf + 2*sigma_d)(yf + 2*sigma_d);
            let s = expf(-c_r * diff*diff);

            k += c * s;
            p += c * s * get_pixel(acc, x + xf, y + yf, bh_lower, bh_upper);
        }
    }

    p/k
}

fn main() -> int {
    let width   = 1024;
    let height  = 1024;
    let sigma_r = 5.0f;
    let c_r     = 1.0f / (2.0f * sigma_r*sigma_r);
    let arr     = Img { data : ~[width*height:float], width : width, height : height, stride : width };
    let out     = Img { data : ~[width*height:float], width : width, height : height, stride : width };

    let lower = clamp_lower;
    let upper = clamp_upper;

    let mask    = Mask {
        data : [[0.018316f, 0.082085f, 0.135335f, 0.082085f, 0.018316f],
                [0.082085f, 0.367879f, 0.606531f, 0.367879f, 0.082085f],
                [0.135335f, 0.606531f, 1.000000f, 0.606531f, 0.135335f],
                [0.082085f, 0.367879f, 0.606531f, 0.367879f, 0.082085f],
                [0.018316f, 0.082085f, 0.135335f, 0.082085f, 0.018316f]],
        size_x : 5, size_y : 5
    };

    //let mask = Mask {
    //    data : [[0.018316f, 0.043937f, 0.082085f, 0.119433f, 0.135335f, 0.119433f, 0.082085f, 0.043937f, 0.018316f],
    //            [0.043937f, 0.105399f, 0.196912f, 0.286505f, 0.324652f, 0.286505f, 0.196912f, 0.105399f, 0.043937f],
    //            [0.082085f, 0.196912f, 0.367879f, 0.535261f, 0.606531f, 0.535261f, 0.367879f, 0.196912f, 0.082085f],
    //            [0.119433f, 0.286505f, 0.535261f, 0.778801f, 0.882497f, 0.778801f, 0.535261f, 0.286505f, 0.119433f],
    //            [0.135335f, 0.324652f, 0.606531f, 0.882497f, 1.000000f, 0.882497f, 0.606531f, 0.324652f, 0.135335f],
    //            [0.119433f, 0.286505f, 0.535261f, 0.778801f, 0.882497f, 0.778801f, 0.535261f, 0.286505f, 0.119433f],
    //            [0.082085f, 0.196912f, 0.367879f, 0.535261f, 0.606531f, 0.535261f, 0.367879f, 0.196912f, 0.082085f],
    //            [0.043937f, 0.105399f, 0.196912f, 0.286505f, 0.324652f, 0.286505f, 0.196912f, 0.105399f, 0.043937f],
    //            [0.018316f, 0.043937f, 0.082085f, 0.119433f, 0.135335f, 0.119433f, 0.082085f, 0.043937f, 0.018316f]],
    //    size_x : 9, size_y : 9
    //};

    //let mask = Mask {
    //    data : [[0.018316f, 0.033746f, 0.055638f, 0.082085f, 0.108368f, 0.128022f, 0.135335f, 0.128022f, 0.108368f, 0.082085f, 0.055638f, 0.033746f, 0.018316f],
    //            [0.033746f, 0.062177f, 0.102512f, 0.151240f, 0.199666f, 0.235877f, 0.249352f, 0.235877f, 0.199666f, 0.151240f, 0.102512f, 0.062177f, 0.033746f],
    //            [0.055638f, 0.102512f, 0.169013f, 0.249352f, 0.329193f, 0.388896f, 0.411112f, 0.388896f, 0.329193f, 0.249352f, 0.169013f, 0.102512f, 0.055638f],
    //            [0.082085f, 0.151240f, 0.249352f, 0.367879f, 0.485672f, 0.573753f, 0.606531f, 0.573753f, 0.485672f, 0.367879f, 0.249352f, 0.151240f, 0.082085f],
    //            [0.108368f, 0.199666f, 0.329193f, 0.485672f, 0.641180f, 0.757465f, 0.800737f, 0.757465f, 0.641180f, 0.485672f, 0.329193f, 0.199666f, 0.108368f],
    //            [0.128022f, 0.235877f, 0.388896f, 0.573753f, 0.757465f, 0.894839f, 0.945959f, 0.894839f, 0.757465f, 0.573753f, 0.388896f, 0.235877f, 0.128022f],
    //            [0.135335f, 0.249352f, 0.411112f, 0.606531f, 0.800737f, 0.945959f, 1.000000f, 0.945959f, 0.800737f, 0.606531f, 0.411112f, 0.249352f, 0.135335f],
    //            [0.128022f, 0.235877f, 0.388896f, 0.573753f, 0.757465f, 0.894839f, 0.945959f, 0.894839f, 0.757465f, 0.573753f, 0.388896f, 0.235877f, 0.128022f],
    //            [0.108368f, 0.199666f, 0.329193f, 0.485672f, 0.641180f, 0.757465f, 0.800737f, 0.757465f, 0.641180f, 0.485672f, 0.329193f, 0.199666f, 0.108368f],
    //            [0.082085f, 0.151240f, 0.249352f, 0.367879f, 0.485672f, 0.573753f, 0.606531f, 0.573753f, 0.485672f, 0.367879f, 0.249352f, 0.151240f, 0.082085f],
    //            [0.055638f, 0.102512f, 0.169013f, 0.249352f, 0.329193f, 0.388896f, 0.411112f, 0.388896f, 0.329193f, 0.249352f, 0.169013f, 0.102512f, 0.055638f],
    //            [0.033746f, 0.062177f, 0.102512f, 0.151240f, 0.199666f, 0.235877f, 0.249352f, 0.235877f, 0.199666f, 0.151240f, 0.102512f, 0.062177f, 0.033746f],
    //            [0.018316f, 0.033746f, 0.055638f, 0.082085f, 0.108368f, 0.128022f, 0.135335f, 0.128022f, 0.108368f, 0.082085f, 0.055638f, 0.033746f, 0.018316f]],
    //    size_x : 13, size_y : 13
    //};

    let sigma_d = mask.size_x / 4;
    let c_d = 1.0f / (2.0f * (sigma_d*sigma_d as float));


    // SS
    for x, y, mut out_acc, arr_acc, mask in @iteration(out, arr, mask) {
        //out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter(x, y, arr_acc, sigma_d, c_d, c_r, lower, upper);
        out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter_mask(x, y, arr_acc, mask, sigma_d, c_r, lower, upper);
    }

    //// SS + BH
    //for x, y, mut out_acc, arr_acc, mask in @iteration_bounds(out, arr, mask) {
    //    //out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter(x, y, arr_acc, sigma_d, c_d, c_r, lower, upper);
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter_mask(x, y, arr_acc, mask, sigma_d, c_r, lower, upper);
    //}

    //// SS + SM
    //for x, y, mut out_acc, arr_acc, mask in @iteration_advanced(out, arr, mask) {
    //    //out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter(x, y, arr_acc, sigma_d, c_d, c_r, lower, upper);
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter_mask(x, y, arr_acc, mask, sigma_d, c_r, lower, upper);
    //}


    // compare results
    fn reference() -> int {
        let mut passed = 0;
        //let mut rms_err = 0.0f;   // RMS error
        //let EPS = 0.02f;
        //let arr_acc = get_acc(arr, 10);
        //for y in $iterate(0, out.height) {
        //    for x in $iterate(0, out.width) {
        //        let ref = @bilateral_filter_mask(x, y, arr_acc, mask, sigma_d, c_r, lower, upper);
        //        let mut err = ref - out.data(y*out.stride + x);
        //        rms_err += err*err;
        //
        //        if err < 0.0f { err = -err; }
        //        if err > EPS  { passed = 42; }
        //    }
        //}
        //rms_err = sqrtf(rms_err / (out.width*out.height as float));
        passed
    }
    @reference()
}
