type Mask = Mask5;
type MaskSep = Mask5Sep;

fn closeness(c_d : float, xf : int, yf : int) -> float {
    expf(-c_d * (xf*xf as float)) * expf(-c_d * (yf*yf as float))
}
fn similarity(c_r : float, xi : float, x : float) -> float {
    let diff = xi - x;
    expf(-c_r * diff * diff)
}

fn bilateral_filter(acc : Acc, sigma_d : int, c_d : float, c_r : float, x : int, y : int) -> float {
    let mut k = 0.0f;
    let mut p = 0.0f;

    for yf in iterate(-2*sigma_d, 2*sigma_d+1) {
        for xf in iterate(-2*sigma_d, 2*sigma_d+1) {
            let mut idx_x = acc.roi.o_x + acc.rox + x + xf;
            let mut idx_y = acc.roi.o_y + acc.roy + y + yf;

            // 0 --- 1 --- 2
            // 3 --- 4 --- 5
            // 6 --- 7 --- 8

            // left
            if acc.region == 0 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }
            if acc.region == 3 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }
            if acc.region == 6 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }

            // right
            if acc.region == 2 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }
            if acc.region == 5 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }
            if acc.region == 8 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }

            // top
            if acc.region == 0 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }
            if acc.region == 1 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }
            if acc.region == 2 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }

            // bottom
            if acc.region == 6 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }
            if acc.region == 7 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }
            if acc.region == 8 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }

            // all in
            if acc.region == 10 {
                idx_x = clamp_lower(idx_x, acc.roi.o_x);
                idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width);
                idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height);
                idx_y = clamp_lower(idx_y, acc.roi.o_y);
            }

            let diff = acc.img.data(idx_y * acc.img.stride + idx_x) - acc.img.data((acc.roi.o_y + acc.roy + y) * acc.img.stride + acc.roi.o_x + acc.rox + x);

            let c = closeness(c_d, xf, yf);
            let s = similarity(c_r, acc.img.data(idx_y * acc.img.stride + idx_x), acc.img.data((acc.roi.o_y + acc.roy + y) * acc.img.stride + acc.roi.o_x + acc.rox + x));
            k += c * s;
            p += c * s * acc.img.data(idx_y * acc.img.stride + idx_x);
        }
    }

    p/k
}

fn bilateral_filter_mask(mask : Mask, acc : Acc, sigma_d : int, c_r : float, x : int, y : int) -> float {
    let mut k = 0.0f;
    let mut p = 0.0f;

    for yf in iterate(-2*sigma_d, 2*sigma_d+1) {
        for xf in iterate(-2*sigma_d, 2*sigma_d+1) {
            let mut idx_x = acc.roi.o_x + acc.rox + x + xf;
            let mut idx_y = acc.roi.o_y + acc.roy + y + yf;

            // 0 --- 1 --- 2
            // 3 --- 4 --- 5
            // 6 --- 7 --- 8

            // left
            if acc.region == 0 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }
            if acc.region == 3 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }
            if acc.region == 6 { idx_x = clamp_lower(idx_x, acc.roi.o_x); }

            // right
            if acc.region == 2 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }
            if acc.region == 5 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }
            if acc.region == 8 { idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width); }

            // top
            if acc.region == 0 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }
            if acc.region == 1 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }
            if acc.region == 2 { idx_y = clamp_lower(idx_y, acc.roi.o_y); }

            // bottom
            if acc.region == 6 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }
            if acc.region == 7 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }
            if acc.region == 8 { idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height); }

            // all in
            if acc.region == 10 {
                idx_x = clamp_lower(idx_x, acc.roi.o_x);
                idx_x = clamp_upper(idx_x, acc.roi.o_x + acc.roi.width);
                idx_y = clamp_upper(idx_y, acc.roi.o_y + acc.roi.height);
                idx_y = clamp_lower(idx_y, acc.roi.o_y);
            }


            let diff = acc.img.data(idx_y * acc.img.stride + idx_x) - acc.img.data((acc.roi.o_y + acc.roy + y) * acc.img.stride + acc.roi.o_x + acc.rox + x);

            let s = expf(-c_r * diff*diff) * mask.data(xf + 2*sigma_d)(yf + 2*sigma_d);

            k += s;
            p += s * acc.img.data(idx_y * acc.img.stride + idx_x);
        }
    }

    p/k
}

fn main() -> int {
    let width   = 1024;
    let height  = 1024;
    let sigma_r = 5.0f;
    let c_r     = 1.0f / (2.0f * sigma_r*sigma_r);
    let arr     = Img { data : ~[width*height:float], width : width, height : height, stride : width };
    let out     = Img { data : ~[width*height:float], width : width, height : height, stride : width };

    let mask    = Mask {
        data : [[0.018316f, 0.082085f, 0.135335f, 0.082085f, 0.018316f],
                [0.082085f, 0.367879f, 0.606531f, 0.367879f, 0.082085f],
                [0.135335f, 0.606531f, 1.000000f, 0.606531f, 0.135335f],
                [0.082085f, 0.367879f, 0.606531f, 0.367879f, 0.082085f],
                [0.018316f, 0.082085f, 0.135335f, 0.082085f, 0.018316f]],
        size_x : 5, size_y : 5
    };

    //let mask = Mask {
    //    data : [[0.018316f, 0.043937f, 0.082085f, 0.119433f, 0.135335f, 0.119433f, 0.082085f, 0.043937f, 0.018316f],
    //            [0.043937f, 0.105399f, 0.196912f, 0.286505f, 0.324652f, 0.286505f, 0.196912f, 0.105399f, 0.043937f],
    //            [0.082085f, 0.196912f, 0.367879f, 0.535261f, 0.606531f, 0.535261f, 0.367879f, 0.196912f, 0.082085f],
    //            [0.119433f, 0.286505f, 0.535261f, 0.778801f, 0.882497f, 0.778801f, 0.535261f, 0.286505f, 0.119433f],
    //            [0.135335f, 0.324652f, 0.606531f, 0.882497f, 1.000000f, 0.882497f, 0.606531f, 0.324652f, 0.135335f],
    //            [0.119433f, 0.286505f, 0.535261f, 0.778801f, 0.882497f, 0.778801f, 0.535261f, 0.286505f, 0.119433f],
    //            [0.082085f, 0.196912f, 0.367879f, 0.535261f, 0.606531f, 0.535261f, 0.367879f, 0.196912f, 0.082085f],
    //            [0.043937f, 0.105399f, 0.196912f, 0.286505f, 0.324652f, 0.286505f, 0.196912f, 0.105399f, 0.043937f],
    //            [0.018316f, 0.043937f, 0.082085f, 0.119433f, 0.135335f, 0.119433f, 0.082085f, 0.043937f, 0.018316f]],
    //    size_x : 9, size_y : 9
    //};

    //let mask = Mask {
    //    data : [[0.018316f, 0.033746f, 0.055638f, 0.082085f, 0.108368f, 0.128022f, 0.135335f, 0.128022f, 0.108368f, 0.082085f, 0.055638f, 0.033746f, 0.018316f],
    //            [0.033746f, 0.062177f, 0.102512f, 0.151240f, 0.199666f, 0.235877f, 0.249352f, 0.235877f, 0.199666f, 0.151240f, 0.102512f, 0.062177f, 0.033746f],
    //            [0.055638f, 0.102512f, 0.169013f, 0.249352f, 0.329193f, 0.388896f, 0.411112f, 0.388896f, 0.329193f, 0.249352f, 0.169013f, 0.102512f, 0.055638f],
    //            [0.082085f, 0.151240f, 0.249352f, 0.367879f, 0.485672f, 0.573753f, 0.606531f, 0.573753f, 0.485672f, 0.367879f, 0.249352f, 0.151240f, 0.082085f],
    //            [0.108368f, 0.199666f, 0.329193f, 0.485672f, 0.641180f, 0.757465f, 0.800737f, 0.757465f, 0.641180f, 0.485672f, 0.329193f, 0.199666f, 0.108368f],
    //            [0.128022f, 0.235877f, 0.388896f, 0.573753f, 0.757465f, 0.894839f, 0.945959f, 0.894839f, 0.757465f, 0.573753f, 0.388896f, 0.235877f, 0.128022f],
    //            [0.135335f, 0.249352f, 0.411112f, 0.606531f, 0.800737f, 0.945959f, 1.000000f, 0.945959f, 0.800737f, 0.606531f, 0.411112f, 0.249352f, 0.135335f],
    //            [0.128022f, 0.235877f, 0.388896f, 0.573753f, 0.757465f, 0.894839f, 0.945959f, 0.894839f, 0.757465f, 0.573753f, 0.388896f, 0.235877f, 0.128022f],
    //            [0.108368f, 0.199666f, 0.329193f, 0.485672f, 0.641180f, 0.757465f, 0.800737f, 0.757465f, 0.641180f, 0.485672f, 0.329193f, 0.199666f, 0.108368f],
    //            [0.082085f, 0.151240f, 0.249352f, 0.367879f, 0.485672f, 0.573753f, 0.606531f, 0.573753f, 0.485672f, 0.367879f, 0.249352f, 0.151240f, 0.082085f],
    //            [0.055638f, 0.102512f, 0.169013f, 0.249352f, 0.329193f, 0.388896f, 0.411112f, 0.388896f, 0.329193f, 0.249352f, 0.169013f, 0.102512f, 0.055638f],
    //            [0.033746f, 0.062177f, 0.102512f, 0.151240f, 0.199666f, 0.235877f, 0.249352f, 0.235877f, 0.199666f, 0.151240f, 0.102512f, 0.062177f, 0.033746f],
    //            [0.018316f, 0.033746f, 0.055638f, 0.082085f, 0.108368f, 0.128022f, 0.135335f, 0.128022f, 0.108368f, 0.082085f, 0.055638f, 0.033746f, 0.018316f]],
    //    size_x : 13, size_y : 13
    //};

    let sigma_d = mask.size_x / 4;
    let c_d = 1.0f / (2.0f * (sigma_d*sigma_d as float));


    // SS
    for x, y, mask, arr_acc, mut out_acc in @iteration(mask, arr, out) {
        //out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter(arr_acc, sigma_d, c_d, c_r, x, y);
        out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter_mask(mask, arr_acc, sigma_d, c_r, x, y);
    }

    //// SS + BH
    //for x, y, mask, arr_acc, mut out_acc in @iteration_bounds(mask, arr, out) {
    //    //out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter(arr_acc, sigma_d, c_d, c_r, x, y);
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter_mask(mask, arr_acc, sigma_d, c_r, x, y);
    //}

    //// SS + SM
    //for x, y, mask, arr_acc, mut out_acc in @iteration_advanced(mask, arr, out) {
    //    //out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter(arr_acc, sigma_d, c_d, c_r, x, y);
    //    out_acc.img.data((out_acc.roi.o_y + out_acc.roy + y)*out_acc.img.stride + out_acc.roi.o_x + out_acc.rox + x) = bilateral_filter_mask(mask, arr_acc, sigma_d, c_r, x, y);
    //}


    // compare results
    fn reference() -> int {
        let mut passed = 0;
        //let mut rms_err = 0.0f;   // RMS error
        //let EPS = 0.02f;
        //let arr_acc = get_acc(arr, 10);
        //for y in $iterate(0, out.height) {
        //    for x in $iterate(0, out.width) {
        //        let ref = @bilateral_filter_mask(mask, arr_acc, sigma_d, c_r, x, y);
        //        let mut err = ref - out.data(y*out.stride + x);
        //        rms_err += err*err;
        //
        //        if err < 0.0f { err = -err; }
        //        if err > EPS  { passed = 42; }
        //    }
        //}
        //rms_err = sqrtf(rms_err / (out.width*out.height as float));
        passed
    }
    @reference()
}
