/*
 * Bilateral Grid
 *
 * Real-time Edge-Aware Image Processing with the Bilateral Grid
 * J. Chen, S. Paris, F. Durand - ACM Transactions on Graphics (TOG), 2007
 *
 */

struct Grid {
    sigma_s : int,
    sigma_r : float,
    padding : int,
    width   : int,
    height  : int,
    bins    : int,
    data    : &[[float*2]],
}
fn grid_idx(x: int, y: int, z: int, grid: Grid) -> int { (y * grid.width + x) * grid.bins + z + grid.padding }
fn clamp_float(v: f32, l: f32, u: f32) -> f32 { if v < l { l } else { if v >= u { u     } else { v } } }
fn clamp_int  (v: int, l: int, u: int) -> int { if v < l { l } else { if v >= u { u - 1 } else { v } } }


fn create_grid(x: int, y: int, mut grid: Grid, image: fn(int, int) -> float) -> () {
    for ry in range(0, grid.sigma_s+1) {
        for rx in range(0, grid.sigma_s+1) {
            let mut val = image(x * grid.sigma_s + rx - grid.sigma_s/2, y * grid.sigma_s + ry - grid.sigma_s/2);
            val = clamp_float(val, 0.0f, 1.0f);
            let zi = (val * (1.0f / grid.sigma_r) + 0.5f) as int;
            grid.data(grid_idx(x, y, zi, grid))(0) += val;
            grid.data(grid_idx(x, y, zi, grid))(1) += 1.0f;
        }
    }
}

fn slice_grid(x: int, y: int, grid: Grid, image: fn(int, int) -> float, filter: fn(int, int, int, int, Grid) -> float) -> float {
    // trilinear samples to compute the output
    let lerp = |a: f32, b: f32, w: f32| -> f32 { (1.0f - w) * a + w * b };
    let interpolate  = |x: int, y: int, c: int| -> float {
                        let val = clamp_float(image(x, y), 0.0f, 1.0f);
                        let zv = val * (1.0f / grid.sigma_r);
                        let zi = zv as int;
                        let zf = zv - zi as float;
                        let xf = (x % grid.sigma_s) as float / (grid.sigma_s as float);
                        let yf = (y % grid.sigma_s) as float / (grid.sigma_s as float);
                        let xi = x / grid.sigma_s;
                        let yi = y / grid.sigma_s;
                        lerp(lerp(lerp(filter(xi, yi,   zi,   c, grid), filter(xi+1, yi,   zi,   c, grid), xf),
                                  lerp(filter(xi, yi+1, zi,   c, grid), filter(xi+1, yi+1, zi,   c, grid), xf), yf),
                             lerp(lerp(filter(xi, yi,   zi+1, c, grid), filter(xi+1, yi,   zi+1, c, grid), xf),
                                  lerp(filter(xi, yi+1, zi+1, c, grid), filter(xi+1, yi+1, zi+1, c, grid), xf), yf), zf)
                      };
    // normalize
    interpolate(x, y, 0) / interpolate(x, y, 1)
}


extern
fn thorin_bilateral_grid(img_data: &[float], mut out_data: &[float], width: int, height: int) -> () {
    let mut grid:Grid;
    grid.sigma_s = 8;
    grid.sigma_r = 0.1f;
    grid.padding = 2;
    grid.width   = width  / grid.sigma_s;
    grid.height  = height / grid.sigma_s;
    grid.bins    = (1.0f  / grid.sigma_r) as int + 2 * grid.padding;
    grid.data    = ~[grid.width*grid.height*grid.bins:[float*2]];

    let input    = |x: int, y: int| -> float { img_data(y*width + x) };
    let clamped  = |x: int, y: int| -> float { input(clamp_int(x, 0, width), clamp_int(y, 0, height)) };


    // blur the grid
    let blurz    = |x: int, y: int, z: int, c: int, grid: Grid| -> float {
                     grid.data(grid_idx(x, y, z-2, grid))(c) +
                     grid.data(grid_idx(x, y, z-1, grid))(c) * 4.0f +
                     grid.data(grid_idx(x, y, z  , grid))(c) * 6.0f +
                     grid.data(grid_idx(x, y, z+1, grid))(c) * 4.0f +
                     grid.data(grid_idx(x, y, z+2, grid))(c)
                   };
    let blurx    = |x: int, y: int, z: int, c: int, grid: Grid| -> float {
                     blurz(clamp_int(x-2, 0, grid.width), y, z, c, grid) +
                     blurz(clamp_int(x-1, 0, grid.width), y, z, c, grid) * 4.0f +
                     blurz(clamp_int(x  , 0, grid.width), y, z, c, grid) * 6.0f +
                     blurz(clamp_int(x+1, 0, grid.width), y, z, c, grid) * 4.0f +
                     blurz(clamp_int(x+2, 0, grid.width), y, z, c, grid)
                   };
    let blury    = |x: int, y: int, z: int, c: int, grid: Grid| -> float {
                     blurx(x, clamp_int(y-2, 0, grid.height), z, c, grid) +
                     blurx(x, clamp_int(y-1, 0, grid.height), z, c, grid) * 4.0f +
                     blurx(x, clamp_int(y  , 0, grid.height), z, c, grid) * 6.0f +
                     blurx(x, clamp_int(y+1, 0, grid.height), z, c, grid) * 4.0f +
                     blurx(x, clamp_int(y+2, 0, grid.height), z, c, grid)
                   };
    let filter   = |x: int, y: int, z: int, c: int, grid: Grid| -> float { blury(x, y, z, c, grid) };


    // TODO: move this to mapping
    for benchmark() {
        // init grid
        for i in parallel(0, 0, grid.width*grid.height*grid.bins) @{
            grid.data(i) = [0.0f, 0.0f];
        }

        // compute grid
        for y in parallel(0, 0, grid.height) {
            for x in range(0, grid.width) @{
                create_grid(x, y, grid, clamped);
            }
        }

        // slice grid
        for y in parallel(0, 0, height) {
            for x in range(0, width) @{
                out_data(y*width + x) = slice_grid(x, y, grid, input, filter);
            }
        }
    }
}

