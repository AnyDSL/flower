// ---------------------------- streaming --------------------------------------
fn @get_global_stream_vec1(img: Img) -> stream_in {
    let ptr = bitcast[&[1][pixel_t]](img.buf.data);
    let stream_fn  = @|| {
        let mut value = 0 as pixel_t;
        fn @update(idx: int) -> () { value = ptr(idx); }
        fn @read(idx: int) -> pixel_t { value }
        img_to_stream_in(img, 1, update, read)
    };
    stream_fn()
}

fn @get_global_stream_vec2(img: Img) -> stream_in {
    let ptr = bitcast[&[1][[pixel_t * 2]]](
        bitcast[&[1][i8]](
            bitcast[&[1][[pixel_t * 2]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 2 ];
        fn @update(idx: int) -> () { value = ptr(idx); }
        fn @read(idx: int) -> pixel_t { value(idx) }
        img_to_stream_in(img, 2, update, read)
    };
    stream_fn()
}

fn @get_global_stream_vec4(img: Img) -> stream_in {
    let ptr = bitcast[&[1][[pixel_t * 4]]](
        bitcast[&[1][i8]](
            bitcast[&[1][[pixel_t * 4]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 4 ];
        fn @update(idx: int) -> () { value = ptr(idx); }
        fn @read(idx: int) -> pixel_t { value(idx) }
        img_to_stream_in(img, 4, update, read)
    };
    stream_fn()
}

fn @get_global_stream_vec8(img: Img) -> stream_in {
    let ptr = bitcast[&[1][[pixel_t * 8]]](
        bitcast[&[1][i8]](
            bitcast[&[1][[pixel_t * 8]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 8 ];
        fn @update(idx: int) -> () { value = ptr(idx); }
        fn @read(idx: int) -> pixel_t { value(idx) }
        img_to_stream_in(img, 8, update, read)
    };
    stream_fn()
}

fn @get_global_stream_vec16(img: Img) -> stream_in {
    let ptr = bitcast[&[1][[pixel_t * 16]]](
        bitcast[&[1][i8]](
            bitcast[&[1][[pixel_t * 16]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 16 ];
        fn @update(idx: int) -> () { value = ptr(idx); }
        fn @read(idx: int) -> pixel_t { value(idx) }
        img_to_stream_in(img, 16, update, read)
    };
    stream_fn()
}

fn @get_global_stream_vec32(img: Img) -> stream_in {
    let ptr = bitcast[&[1][[pixel_t * 32]]](
        bitcast[&[1][i8]](
            bitcast[&[1][[pixel_t * 32]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 32 ];
        fn @update(idx: int) -> () { value = ptr(idx); }
        fn @read(idx: int) -> pixel_t { value(idx) }
        img_to_stream_in(img, 32, update, read)
    };
    stream_fn()
}

fn @set_global_stream_vec1(img: Img) -> stream_out {
    let ptr = bitcast[&mut[1][pixel_t]](img.buf.data);
    let stream_fn  = @|| {
        let mut value = 0 as pixel_t;
      ;  fn @update(idx: int) -> () { ptr(idx) = value; }
        fn @write(idx: int, din: pixel_t) -> () { value = din; }
        img_to_stream_out(img, 1, update, write)
    };
    stream_fn()
}

fn @set_global_stream_vec2(img: Img) -> stream_out {
    let ptr = bitcast[&mut[1][[pixel_t * 2]]](
        bitcast[&mut[1][i8]](
            bitcast[&mut[1][[pixel_t * 2]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 2 ];
        fn @update(idx: int) -> () { ptr(idx) = value; }
        fn @write(idx: int, din: pixel_t) -> () { value(idx) = din; }
        img_to_stream_out(img, 2, update, write)
    };
    stream_fn()
}

fn @set_global_stream_vec4(img: Img) -> stream_out {
    let ptr = bitcast[&mut[1][[pixel_t * 4]]](
        bitcast[&mut[1][i8]](
            bitcast[&mut[1][[pixel_t * 4]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 4 ];
        fn @update(idx: int) -> () { ptr(idx) = value; }
        fn @write(idx: int, din: pixel_t) -> () { value(idx) = din; }
        img_to_stream_out(img, 4, update, write)
    };
    stream_fn()
}

fn @set_global_stream_vec8(img: Img) -> stream_out {
    let ptr = bitcast[&mut[1][[pixel_t * 8]]](
        bitcast[&mut[1][i8]](
            bitcast[&mut[1][[pixel_t * 8]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 8 ];
        fn @update(idx: int) -> () { ptr(idx) = value; }
        fn @write(idx: int, din: pixel_t) -> () { value(idx) = din; }
        img_to_stream_out(img, 8, update, write)
    };
    stream_fn()
}

fn @set_global_stream_vec16(img: Img) -> stream_out {
    let ptr = bitcast[&mut[1][[pixel_t * 16]]](
        bitcast[&mut[1][i8]](
            bitcast[&mut[1][[pixel_t * 16]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 16 ];
        fn @update(idx: int) -> () { ptr(idx) = value; }
        fn @write(idx: int, din: pixel_t) -> () { value(idx) = din; }
        img_to_stream_out(img, 16, update, write)
    };
    stream_fn()
}

fn @set_global_stream_vec32(img: Img) -> stream_out {
    let ptr = bitcast[&mut[1][[pixel_t * 32]]](
        bitcast[&mut[1][i8]](
            bitcast[&mut[1][[pixel_t * 32]]](img.buf.data)));
    let stream_fn  = @|| {
        let mut value = [ 0 as pixel_t, .. 32 ];
        fn @update(idx: int) -> () { ptr(idx) = value; }
        fn @write(idx: int, din: pixel_t) -> () { value(idx) = din; }
        img_to_stream_out(img, 32, update, write)
    };
    stream_fn()
}
