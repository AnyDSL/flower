extern array(int, int, int) -> [float];
extern free_array([float]) -> ();
extern random_val(int) -> float;

extern getMicroTime() -> ();
extern reset_and_start_timer() -> ();
extern print_time() -> ();

fn iterate(a : int, b : int, yield : fn(int, fn())) -> () {
    if a < b {
        yield(a);
        iterate(a+1, b, yield);
    }
}

fn force_unroll(a : int, b : int, yield : fn(int, fn())) -> () {
    if a < b {
        yield(a);
        @force_unroll(a+1, b, yield);
    }
}

fn iterate_times_two(a : int, b : int, yield : fn(int, fn())) -> () {
    if a < b {
        yield(a);
        iterate(a*2, b, yield);
    }
}

fn init_zero(arr : [float], width : int, height : int) -> () {
    iterate(0, width*height, |i: int| -> () {
        arr[i] = 0.0f;
    });
}
fn init_rand(arr : [float], width : int, height : int) -> () {
    iterate(0, height, |y: int| -> () {
        iterate(0, width, |x: int| -> () {
            arr[x + y*width] = random_val(1024);
        });
    });
}

// border handling specialization
fn clamp_lower(idx : int, lower : int) -> int {
    idx < lower ? lower : idx
}
fn clamp_upper(idx : int, upper : int) -> int {
    idx >= upper ? upper - 1 : idx
}
fn clamp_none(idx : int, bound : int) -> int {
    idx
}
