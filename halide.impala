extern "C" {
    fn print_string(&[u8]) -> ();
}

extern "thorin" {
    fn pe_info[T](&[u8], T) -> ();
}

type Loop = fn(i32, i32, fn(i32) -> ()) -> ();
type Loop_xy = fn(i32, i32, i32, i32, fn(i32, i32) -> ()) -> ();
type Op = (fn(i32, i32) -> i32, i32, i32);

fn @(?lower & ?upper & ?step) unroll_step(lower: i32, upper: i32, @step: i32, body: fn(i32) -> ()) -> () {
    if lower < upper {
        pe_info("counter: ", lower);
        body(lower);
        unroll_step(lower+step, upper, step, body)
    }
}

fn @unroll(lower: i32, upper: i32, body: fn(i32) -> ()) -> () {
    unroll_step(lower, upper, 1, body)
}

fn range_step(lower: i32, upper: i32, step: i32, body: fn(i32) -> ()) -> () {
    if lower < upper {
        body(lower);
        range_step(lower+step, upper, step, body)
    }
}

fn @range(lower: i32, upper: i32, body: fn(i32) -> ()) -> () {
    range_step(lower, upper, 1, body)
}

fn @schedule(loop: Loop_xy, w: i32, h: i32, op: Op) -> Op {
    let out = ~[w*h:i32];
    let (f, x_extend, y_extend) = op;

    for ry in unroll(0, 3) {
        for rx in unroll(0, 3) {
            for x, y in loop(0, 0, w, h) {
                out(y*h + x) = f(x, y);
            }
        }
    }
    (|x, y| out(y*h + x), 0, 0)
}

fn @combine_xy(loop_x: Loop, loop_y: Loop) -> Loop_xy {
    |x, y, w, h, body| loop_y(y, h, |yy| loop_x(x, w, |xx| body(xx, yy)))
}

fn @combine_xy2(loop: Loop) -> Loop_xy { combine_xy(loop, loop) }

fn @tile(x_step: i32, y_step: i32, w: i32, h: i32, loop_xy: Loop_xy) -> Loop_xy {
    |x, y, w, h, body: fn(i32, i32)->()|
        range_step(0, h, y_step,
            |yy| range_step(0, w, x_step,
                |xx| loop_xy(xx, yy, xx+x_step, yy+y_step,
                    |xxx, yyy| body(xxx, yyy))))
}

fn main(img: &[i32], w: i32, h: i32) -> i32 {
    let blur_x = |input| {
        let (f, x_extend, y_extend) = input;
        (|x, y| (f(x-1, y) + f(x, y) + f(x+1, y))/3, x_extend + 1, y_extend + 0)
    };
    let blur_y = |input| {
        let (f, x_extend, y_extend) = input;
        (|x, y| (f(x, y-1) + f(x, y) + f(x, y+1))/3, x_extend + 0, y_extend + 1)
    };

    let f = blur_y(blur_x((|x, y| img(y*w + x), 0, 0)));
    let d = schedule(tile(4, 8, w, h, combine_xy2(range)), w, h, f);
    //let e = schedule(combine_xy2(range), w, h, d);
    //e(0, 0)
    0
}
