fn iteration(arr : Img, out : Img,
             body : fn(int, int, Acc, Acc) -> ()
            ) -> () {
    let arr_acc = Acc { img : arr, o_x : 0, o_y : 0 };
    let out_acc = Acc { img : out, o_x : 0, o_y : 0 };
    get_micro_time();
    for y in $iterate(0, out.height) {
        for x in $inner_loop(0, out.width) {
            @body(x, y, arr_acc, out_acc);
        }
    }
    get_micro_time();
}

fn iteration_bounds(ksize : int, arr : Img, out : Img,
                    body : fn(int, int, Acc, Acc, int) -> ()
                   ) -> () {
    // compute the number of vector strides for boundary handling
    let bhy = ksize / 2;
    let bhx = @round_up(ksize / 2, get_vector_length());

    // (minx, maxx, miny, maxy)
    let Bounds2D = [
        (0              , bhx            , 0               , bhy),
        (bhx            , out.width - bhx, 0               , bhy),
        (out.width - bhx, out.width      , 0               , bhy),

        (0              , bhx            , bhy             , out.height - bhy),
        (bhx            , out.width - bhx, bhy             , out.height - bhy),
        (out.width - bhx, out.width      , bhy             , out.height - bhy),

        (0              , bhx            , out.height - bhy, out.height),
        (bhx            , out.width - bhx, out.height - bhy, out.height),
        (out.width - bhx, out.width      , out.height - bhy, out.height)
    ];

    let arr_acc = Acc { img : arr, o_x : 0, o_y : 0 };
    let out_acc = Acc { img : out, o_x : 0, o_y : 0 };

    get_micro_time();
    for region in @iterate(0, 9) {
        let bounds = Bounds2D(region);
        for y in $iterate(bounds(2), bounds(3)) {
            for x in $inner_loop(bounds(0), bounds(1)) {
                @body(x, y, arr_acc, out_acc, region);
            }
        }
    }
    get_micro_time();
}

fn iteration_advanced(ksize : int, arr : Img, out : Img,
                      body : fn(int, int, Acc, Acc, int) -> ()
                     ) -> () {
    // TODO: blocked loop
    @iteration_bounds(ksize, arr, out, body)
}

fn iteration_sep(mask: MaskSep, arr : Img, out : Img,
                 body : fn(int, int, MaskSep, Acc, Acc, bool) -> ()
                ) -> () {
    // allocate temporary array
    let tmp = Img { data : ~[out.width*out.height:float], width : out.width, height : out.height };
    init_zero(tmp.data, $tmp.width, $tmp.height);
    let arr_acc = Acc { img : arr, o_x : 0, o_y : 0 };
    let out_acc = Acc { img : out, o_x : 0, o_y : 0 };
    let tmp_acc = Acc { img : tmp, o_x : 0, o_y : 0 };

    get_micro_time();
    for y in $iterate(0, out.height) {
        for x in $inner_loop(0, out.width) {
            let is_row = false;
            @body(x, y, mask, arr_acc, tmp_acc, is_row);
        }
    }

    for y in $iterate(0, out.height) {
        for x in $inner_loop(0, out.width) {
            let is_row = true;
            @body(x, y, mask, tmp_acc, out_acc, is_row);
        }
    }
    get_micro_time();
}

fn iteration_sep_bounds(mask : MaskSep, arr : Img, out : Img,
                        body : fn(int, int, MaskSep, Acc, Acc, bool, int) -> ()
                       ) -> () {
    // allocate temporary array
    let tmp = Img { data : ~[out.width*out.height:float], width : out.width, height : out.height };
    init_zero(tmp.data, $tmp.width, $tmp.height);
    let arr_acc = Acc { img : arr, o_x : 0, o_y : 0 };
    let out_acc = Acc { img : out, o_x : 0, o_y : 0 };
    let tmp_acc = Acc { img : tmp, o_x : 0, o_y : 0 };

    let bhy = mask.size / 2;
    let bhx = @round_up(mask.size / 2, get_vector_length());

    let Bounds2DCol = [
        (0               , bhy),
        (bhy             , out.height - bhy),
        (out.height - bhy, out.height)
    ];

    let Bounds2DRow = [
        (0              , bhx),
        (bhx            , out.width - bhx),
        (out.width - bhx, out.width)
    ];

    get_micro_time();
    for region in @iterate(0, 3) {
        let bounds = Bounds2DCol(region);
        for y in $iterate(bounds(0), bounds(1)) {
            for x in $inner_loop(0, out.width) {
                let is_row = false;
                @body(x, y, mask, arr_acc, tmp_acc, is_row, region);
            }
        }
    }

    for region in @iterate(0, 3) {
        let bounds = Bounds2DRow(region);
        for y in $iterate(0, out.height) {
            for x in $inner_loop(bounds(0), bounds(1)) {
                let is_row = true;
                @body(x, y, mask, tmp_acc, out_acc, is_row, region);
            }
        }
    }
    get_micro_time();
}

fn iteration_sep_advanced(mask : MaskSep, arr : Img, out : Img,
                          body : fn(int, int, MaskSep, Acc, Acc, bool, int) -> ()
                         ) -> () {
    let bhy = mask.size / 2;
    let bhx = @round_up(mask.size / 2, get_vector_length());

    let Bounds2DCol = [
        (0               , bhy),
        (bhy             , out.height - bhy),
        (out.height - bhy, out.height)
    ];

    let Bounds2DRow = [
        (0              , bhx),
        (bhx            , out.width - bhx),
        (out.width - bhx, out.width)
    ];

    // allocate temporary array
    let tmp = Img { data : ~[out.width:float], width : out.width, height : 1 };
    init_zero(tmp.data, $tmp.width, $tmp.height);

    get_micro_time();
    for region_col in @iterate(0, 3) {
        let bounds_col = Bounds2DCol(region_col);
        for y in $iterate(bounds_col(0), bounds_col(1)) {
            for x in $inner_loop(0, tmp.width) {
                let is_row = false;
                // index space: cache line
                let arr_acc = Acc { img : arr, o_x : 0, o_y : y };
                let tmp_acc = Acc { img : tmp, o_x : 0, o_y : 0 };
                @body(x, 0, mask, arr_acc, tmp_acc, is_row, region_col);
            }
            for region_row in @iterate(0, 3) {
                let bounds_row = Bounds2DRow(region_row);
                for x in $inner_loop(bounds_row(0), bounds_row(1)) {
                    let is_row = true;
                    // index space: cache line
                    let tmp_acc = Acc { img : tmp, o_x : 0, o_y : 0 };
                    let out_acc = Acc { img : out, o_x : 0, o_y : y };
                    @body(x, 0, mask, tmp_acc, out_acc, is_row, region_row);
                }
            }
        }
    }
    get_micro_time();
}
