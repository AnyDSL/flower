static Region2DCol = [ 1, 4, 7 ];
static Region2DRow = [ 3, 4, 5 ];

fn iteration(out: Img, arr: Img, mask: Mask,
             body: fn(int, int, Acc, Acc, Mask) -> ()
            ) -> () {
    let arr_acc = get_acc(arr, 10);
    let out_acc = get_acc(out, 10);

    for benchmark() {
        for y in $range(0, out.height) {
            for x in $inner_loop(0, out.width) @{
                body(x, y, out_acc, arr_acc, mask);
            }
        }
    }
}

fn iteration_bounds(out: Img, arr: Img, mask: Mask,
                    body: fn(int, int, Acc, Acc, Mask) -> ()
                   ) -> () {
    // compute the number of vector strides for boundary handling
    let bhy = mask.size_y / 2;
    let bhx = round_up(mask.size_x / 2, get_vector_length());

    // (minx, maxx, miny, maxy)
    let Bounds2D = [
        (0              , bhx            , 0               , bhy),
        (bhx            , out.width - bhx, 0               , bhy),
        (out.width - bhx, out.width      , 0               , bhy),

        (0              , bhx            , bhy             , out.height - bhy),
        (bhx            , out.width - bhx, bhy             , out.height - bhy),
        (out.width - bhx, out.width      , bhy             , out.height - bhy),

        (0              , bhx            , out.height - bhy, out.height),
        (bhx            , out.width - bhx, out.height - bhy, out.height),
        (out.width - bhx, out.width      , out.height - bhy, out.height)
    ];

    for benchmark() {
        for region in @range(0, 9) {
            let bounds = Bounds2D(region);
            let arr_acc = get_acc(arr, region);
            let out_acc = get_acc(out, region);

            for y in $range(bounds(2), bounds(3)) {
                for x in $inner_loop(bounds(0), bounds(1)) @{
                    body(x, y, out_acc, arr_acc, mask);
                }
            }
        }
    }
}

fn iteration_advanced(out: Img, arr: Img, mask: Mask,
                      body: fn(int, int, Acc, Acc, Mask) -> ()
                     ) -> () {
    // TODO: blocked loop
    iteration_bounds(out, arr, mask, body)
}

fn iteration_sep(out: Img, arr: Img, mask: MaskSep,
                 body: fn(int, int, Acc, Acc, MaskSep, bool) -> ()
                ) -> () {
    // allocate temporary array
    let tmp = Img { data : ~[out.width*out.height:float], width : out.width, height : out.height, stride : out.width };
    $init_zero(tmp.data, tmp.stride, tmp.height);
    let arr_acc = get_acc(arr, 10);
    let out_acc = get_acc(out, 10);
    let tmp_acc = get_acc(tmp, 10);

    for benchmark() {
        for y in $range(0, out.height) {
            for x in $inner_loop(0, out.width) @{
                let is_row = false;
                body(x, y, tmp_acc, arr_acc, mask, is_row);
            }
        }

        for y in $range(0, out.height) {
            for x in $inner_loop(0, out.width) @{
                let is_row = true;
                body(x, y, out_acc, tmp_acc, mask, is_row);
            }
        }
    }
}

fn iteration_sep_bounds(out: Img, arr: Img, mask: MaskSep,
                        body: fn(int, int, Acc, Acc, MaskSep, bool) -> ()
                       ) -> () {
    // allocate temporary array
    let tmp = Img { data : ~[out.width*out.height:float], width : out.width, height : out.height, stride : out.width };
    $init_zero(tmp.data, tmp.stride, tmp.height);

    let bhy = mask.size / 2;
    let bhx = round_up(mask.size / 2, get_vector_length());

    let Bounds2DCol = [
        (0               , bhy),
        (bhy             , out.height - bhy),
        (out.height - bhy, out.height)
    ];

    let Bounds2DRow = [
        (0              , bhx),
        (bhx            , out.width - bhx),
        (out.width - bhx, out.width)
    ];

    for benchmark() {
        for iter in @range(0, 3) {
            let bounds = Bounds2DCol(iter);
            let region = Region2DCol(iter);
            let arr_acc = get_acc(arr, region);
            let tmp_acc = get_acc(tmp, region);
            for y in $range(bounds(0), bounds(1)) {
                for x in $inner_loop(0, out.width) @{
                    let is_row = false;
                    body(x, y, tmp_acc, arr_acc, mask, is_row);
                }
            }
        }

        for iter in @range(0, 3) {
            let bounds = Bounds2DRow(iter);
            let region = Region2DRow(iter);
            let tmp_acc = get_acc(tmp, region);
            let out_acc = get_acc(out, region);
            for y in $range(0, out.height) {
                for x in $inner_loop(bounds(0), bounds(1)) @{
                    let is_row = true;
                    body(x, y, out_acc, tmp_acc, mask, is_row);
                }
            }
        }
    }
}

fn iteration_sep_advanced(out: Img, arr: Img, mask: MaskSep,
                          body: fn(int, int, Acc, Acc, MaskSep, bool) -> ()
                         ) -> () {
    let bhy = mask.size / 2;
    let bhx = round_up(mask.size / 2, get_vector_length());

    let Bounds2DCol = [
        (0               , bhy),
        (bhy             , out.height - bhy),
        (out.height - bhy, out.height)
    ];

    let Bounds2DRow = [
        (0              , bhx),
        (bhx            , out.width - bhx),
        (out.width - bhx, out.width)
    ];

    // allocate temporary array
    let tmp = Img { data : ~[out.width:float], width : out.width, height : 1, stride : out.width };
    $init_zero(tmp.data, tmp.stride, tmp.height);

    for benchmark() {
        for iter_col in @range(0, 3) {
            let bounds_col = Bounds2DCol(iter_col);
            let region_col = Region2DCol(iter_col);
            let tmp_acc = get_acc(tmp, region_col);
            for y in $range(bounds_col(0), bounds_col(1)) {
                for x in $inner_loop(0, tmp.width) @{
                    let is_row = false;
                    // index space: cache line
                    let arr_acc = Acc { img : arr, roi : RoI { o_x : 0, o_y : 0, width : arr.width, height : arr.height }, rox : 0, roy : y, region : region_col};
                    body(x, 0, tmp_acc, arr_acc, mask, is_row);
                }
                for iter_row in @range(0, 3) {
                    let bounds_row = Bounds2DRow(iter_row);
                    let region_row = Region2DRow(iter_row);
                    let tmp_acc = get_acc(tmp, region_row);
                    for x in $inner_loop(bounds_row(0), bounds_row(1)) @{
                        let is_row = true;
                        // index space: cache line
                        let out_acc = Acc { img : out, roi : RoI { o_x : 0, o_y : 0, width : out.width, height : out.height }, rox : 0, roy : y, region : region_row };
                        body(x, 0, out_acc, tmp_acc, mask, is_row);
                    }
                }
            }
        }
    }
}
